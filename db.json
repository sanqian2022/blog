{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/avatar.jpeg","path":"avatar.jpeg","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/avatar.jpeg","hash":"87f7c47ff2670ac8f7beb482d6a15502b17b7eec","modified":1648348428026},{"_id":"source/_posts/react-base.md","hash":"80ebd9e6809b2c1975ce8732d18f003008818e58","modified":1659236552466},{"_id":"source/favicon.ico","hash":"d605fa02c5226671c9d8f209d67ef39e2a4988b4","modified":1648348646914},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1656294266395},{"_id":"source/_posts/.DS_Store","hash":"d427619b8be72426bff9c8ed434b0d8456025210","modified":1656294266388},{"_id":"source/_posts/two-sum.md","hash":"c5d28b2811ecee5964ff5050b5dd582f09200b1f","modified":1659058113628},{"_id":"source/_posts/vscode-plugin.md","hash":"908f0b493d65b107ebd68a389c6a28619ed9dbf0","modified":1659058128526},{"_id":"source/_posts/git.md","hash":"4eaae7e5c37456d8744c9e5dba2cd84ffd98721c","modified":1659058101080},{"_id":"source/categories/index.md","hash":"6bef239c1d76e01824097b7b429997035561f72b","modified":1648562173933},{"_id":"source/tags/index.md","hash":"5e224d22dca7577c6aa6928a712bb120f4cbf11d","modified":1648562267253},{"_id":"source/_posts/webpack.md","hash":"08b9700fb4a78bdc7f19950740a89b64b56189cb","modified":1657177829416},{"_id":"node_modules/hexo-theme-next/package.json","hash":"196c358209e374cc6abfb76030b394a3f05ef7df","modified":1648305768954},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1648305768954},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"b218746129e16d405b450da1c66d029ac1a94ba1","modified":1648305768990},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1648305768958},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1648305768954},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1648305768958},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"7ac5700b08830381131a212c8cda65d73375b438","modified":1648305768990},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1648305768989},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1648305768990},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"b5e2a35eb6fff56b6e32ce479e63b6fc5e44d5cb","modified":1648305768990},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1648305768958},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1648305768992},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1648305768992},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1648305768992},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1648305768992},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1648305768991},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1648305768992},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1648305768993},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1648305768992},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1648305768993},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1648305768993},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1648305768993},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1648305768959},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1648305768993},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1648305768971},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1648305768959},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1648305768960},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1648305768958},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":1648305768947},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1648305768968},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1648305768949},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"3abdcb715562414063e0fb3eeb6244ce59c477e0","modified":1648305768950},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1648305768956},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1648305768958},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"a2ae21ec522c9afd2a8c70f660a586ed0d8b97dc","modified":1648305768945},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1648305768946},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1648305768950},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1648305768950},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1648305768944},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1648305768950},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1648305768940},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1648305768941},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1648305768947},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1648305768941},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1648305768948},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1648305768948},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1648305768949},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1648305768958},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1648305768950},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1648305768954},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1648305768947},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1648305768938},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1648305768989},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1648305768943},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1648305768989},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1648305768943},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1648305768950},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1648305768940},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1648305768950},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1648305768944},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1648305768960},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b65899433ce2ebee572a34fc0bd9e712d205f90d","modified":1648305768971},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1648305768971},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1648305768952},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1648305768968},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1648305768961},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1648305768967},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1648305768971},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1648305768971},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1648305768973},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1648305768976},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1648305768961},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1648305768943},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1648305768968},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1648305768947},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"672dce0632af589b7fe47fa45c2094fa013885f7","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1648305768947},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1648305768943},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1648305768944},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"299664182f502447c07301461db99bfd6993fdac","modified":1648305768954},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1648305768942},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1648305768944},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1648305768945},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1648305768948},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1648305768964},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1648305768953},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1648305768948},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1648305768946},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1648305768950},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1648305768964},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1648305768964},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1648305768966},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1648305768946},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"8561e4125b227e5134cb058e2a76fb2e5233ca29","modified":1648305768966},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1648305768964},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1648305768959},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1648305768967},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1648305768971},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1648305768960},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1648305768970},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1648305768970},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1648305768970},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1648305768971},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1648305768970},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1648305768960},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1648305768970},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1648305768959},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1648305768962},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1648305768964},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1648305768960},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1648305768959},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"09ffc0b1175e9c11b9329cf8b398123418d7b0eb","modified":1648305768967},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1648305768962},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1648305768960},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1648305768966},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1648305768961},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1648305768971},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1648305768961},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1648305768961},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1648305768966},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1648305768961},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1648305768960},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1648305768972},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1648305768966},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1648305768961},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1648305768979},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1648305768960},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1648305768968},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1648305768959},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1648305768965},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1648305768977},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1648305768943},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1648305768939},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1648305768946},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1648305768944},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1648305768946},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1648305768945},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1648305768942},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1648305768947},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1648305768949},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1648305768948},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1648305768949},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1648305768948},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1648305768948},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1648305768953},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1648305768949},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1648305768946},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1648305768946},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1648305768977},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1648305768980},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1648305768987},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1648305768977},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1648305768978},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1648305768979},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1648305768980},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1648305768989},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1648305768939},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1648305768951},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1648305768950},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1648305768976},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1648305768974},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1648305768974},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1648305768973},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1648305768973},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1648305768976},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1648305768974},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1648305768974},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1648305768977},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1648305768977},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1648305768974},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1648305768974},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1648305768974},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1648305768987},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1648305768980},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1648305768978},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1648305768989},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1648305768979},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1648305768985},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1648305768986},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1648305768987},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1648305768977},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1648305768987},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1648305768979},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1648305768983},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1648305768979},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1648305768979},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1648305768987},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1648305768980},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1648305768989},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1648305768980},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1648305768980},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1648305768987},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1648305768979},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1648305768980},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1648305768980},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1648305768978},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1648305768988},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1648305768980},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1648305768978},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1648305768981},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1648305768979},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1648305768979},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1648305768982},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":1648305768988},{"_id":"public/search.xml","hash":"1cb098bb62b90b82ff4824ed395ff812ac6b0c99","modified":1659236570033},{"_id":"public/tags/index.html","hash":"180c3f035e1b5ee91ada363b8f12149bd91709a4","modified":1659236483958},{"_id":"public/categories/index.html","hash":"1d0fc472dfd979d064fbe17151cdb0c627cba72d","modified":1659236483958},{"_id":"public/categories/工具/index.html","hash":"b9e9b8a11c71e21f160c6a8c01ee1dca9ea2eef5","modified":1659236483958},{"_id":"public/categories/算法/index.html","hash":"5454306a689a2384b1ef2e3b41a3fc654f62cd17","modified":1659236483958},{"_id":"public/categories/react/index.html","hash":"d2fa190ec71c5dc31531c21fcc78d8eba22140d7","modified":1659236570033},{"_id":"public/categories/前端工具/index.html","hash":"1b31f0f19885f634ce994a351b629b276e511d59","modified":1659236483958},{"_id":"public/categories/react/前端框架/index.html","hash":"5075feaa98aae0bd7251e0ee48ab508981317c41","modified":1659236570033},{"_id":"public/archives/index.html","hash":"c52275eab060e97785e338554096cc98272c6d1c","modified":1659236570033},{"_id":"public/archives/2021/index.html","hash":"e5859db85b5194171af16323b570a1364087c16e","modified":1659236483958},{"_id":"public/archives/2021/06/index.html","hash":"acce22b04ace7827f987d66c5a8121d2f54f7a3c","modified":1659236483958},{"_id":"public/archives/2022/index.html","hash":"ce684ea6c645b10f2a5f24c6b84ea4749bfe2003","modified":1659236570033},{"_id":"public/archives/2022/07/index.html","hash":"bf507ac951f40c7d0384d80630e095f79e2526ef","modified":1659236570033},{"_id":"public/tags/Git/index.html","hash":"1bf09eff280536ffd84ba22bbdff328c2b1e5b88","modified":1659236483958},{"_id":"public/tags/leetcode/index.html","hash":"892204c44c854121a023b93ed017afd987dd5c44","modified":1659236483958},{"_id":"public/tags/react/index.html","hash":"fb687740ba9ecc6615fc2b336a038c1db4139d53","modified":1659236570033},{"_id":"public/tags/vscode/index.html","hash":"c9fb4e7391c5a124e11d679e330911fb8e6992d3","modified":1659236483958},{"_id":"public/tags/webpack5/index.html","hash":"e2fadb4e3cf345b016ffe91615ba3f85005ee3ee","modified":1659236483958},{"_id":"public/2022/07/18/react-base/index.html","hash":"12d33bb966ab4cc5dc5018d96d81bde3948e52f4","modified":1659236483958},{"_id":"public/2022/07/05/webpack/index.html","hash":"e0c1ebe7b980f9b02fb616496f1ce096be02fdf7","modified":1659236570033},{"_id":"public/2021/06/19/two-sum/index.html","hash":"4adb617bbfa38b3d8fe02721f8b057d610c573f5","modified":1659236570033},{"_id":"public/2021/06/12/vscode-plugin/index.html","hash":"66df55ebb14402ad80f2d43bf202a56adc95768d","modified":1659236483958},{"_id":"public/2021/06/05/git/index.html","hash":"09945e1d787d87be4bcb60b718d2038ddc2d4488","modified":1659236483958},{"_id":"public/index.html","hash":"8fb6bd9b6faab97e32a7bda52eff47b2f77110e7","modified":1659236570033},{"_id":"public/avatar.jpeg","hash":"87f7c47ff2670ac8f7beb482d6a15502b17b7eec","modified":1659236483958},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1659236483958},{"_id":"public/favicon.ico","hash":"d605fa02c5226671c9d8f209d67ef39e2a4988b4","modified":1659236483958},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1659236483958},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1659236483958},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1659236483958},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1659236483958},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1659236483958},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1659236483958},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1659236483958},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1659236483958},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1659236483958},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1659236483958},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1659236483958},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1659236483958},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1659236483958},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1659236483958},{"_id":"public/css/main.css","hash":"a99a6598369ebe5a5e3538d8418f836e0f3bdc93","modified":1659236483958},{"_id":"public/2022/03/05/react-base/index.html","hash":"6be5c3cbab02599b1bdd8a42bb5289fa2656d6f2","modified":1659236570033},{"_id":"public/archives/2022/03/index.html","hash":"ec12daf6376d62036c1d7b9450b27bf307b0f55e","modified":1659236570033}],"Category":[{"name":"工具","_id":"cl68qk8wf00046qjc0lq6cd7d"},{"name":"算法","_id":"cl68qk8wh00096qjc8g0y8h9x"},{"name":"react","_id":"cl68qk8wi000d6qjch5mp40b8"},{"name":"前端工具","_id":"cl68qk8wi000h6qjc2f9zespw"},{"name":"前端框架","parent":"cl68qk8wi000d6qjch5mp40b8","_id":"cl68qk8wj000n6qjcgirfakke"}],"Data":[],"Page":[{"title":"分类","date":"2022-03-28T12:03:28.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-03-28 20:03:28\ntype: \"categories\"\n---\n","updated":"2022-03-29T13:56:13.933Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl68qk8wa00006qjcgqql85ff","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2022-03-27T07:57:34.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-03-27 15:57:34\ntype: \"tags\"\n---\n","updated":"2022-03-29T13:57:47.253Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl68qk8we00026qjc6ppi3zje","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Git 常用命令","date":"2021-06-05T00:00:00.000Z","updated":"2021-06-12T00:00:00.000Z","description":" ","_content":"\n## 名词解释\n\n- `workspace`：工作区\n- `staging area`：暂存区/缓存区\n- `local repository`：版本库或本地仓库\n- `remote repository`：远程仓库\n\n## 配置\n\n```\n# 检查git版本\ngit --version\n# 查看 git 相关命令\ngit --help\n# 显示当前的Git配置\n$ git config --list\n# 编辑Git配置文件\n$ git config -e [--global]\n# 设置提交代码时的用户信息 (--global表示全局，没有--global表示只查询当前项目中的配置)\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n# 颜色设置\ngit config --global color.ui true                         # git status等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit config --global --unset http.proxy                    # remove  proxy configuration on git\n```\n\n## 新建代码库\n\n```\n# 在当前目录新建一个Git代码库\n$ git init\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n## 增加/删除文件\n\n```\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n# 添加当前目录的所有文件到暂存区\n$ git add .\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n## 代码提交\n\n```\n# 提交暂存区到仓库区\n$ git commit -m [message]\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n# 提交时显示所有diff信息\n$ git commit -v\n# 将add和commit合为一步\n$ git commit -am 'message'\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n## 分支\n\n```\n# 列出所有本地分支\n$ git branch\n# 列出所有远程分支\n$ git branch -r\n# 列出所有本地分支和远程分支\n$ git branch -a\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n# 切换到上一个分支\n$ git checkout -\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n# 合并指定分支到当前分支\n$ git merge [branch]\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n# 删除分支\n$ git branch -d [branch-name]\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n# 检出版本v2.0\n$ git checkout v2.0\n# 从远程分支develop创建新本地分支devel并检出\n$ git checkout -b devel origin/develop\n# 检出head版本的README文件（可用于修改错误回退）\ngit checkout -- README\n```\n\n## 标签\n\n```\n# 列出所有tag\n$ git tag\n# 新建一个tag在当前commit\n$ git tag [tag]\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n# 删除本地tag\n$ git tag -d [tag]\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n# 查看tag信息\n$ git show [tag]\n# 提交指定tag\n$ git push [remote] [tag]\n# 提交所有tag\n$ git push [remote] --tags\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n## 查看信息\n\n```\n# 显示有变更的文件\n$ git status\n# 显示当前分支的版本历史\n$ git log\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n# 显示暂存区和工作区的差异\n$ git diff\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n## 远程同步\n\n```\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n# 显示所有远程仓库\n$ git remote -v\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n## 撤销\n\n```\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n","source":"_posts/git.md","raw":"---\ntitle: 'Git 常用命令'\ndate: '2021-06-05'\nupdated: '2021-06-12'\ntags:\n  - Git\ncategories:\n  - 工具\ndescription: ' '\n---\n\n## 名词解释\n\n- `workspace`：工作区\n- `staging area`：暂存区/缓存区\n- `local repository`：版本库或本地仓库\n- `remote repository`：远程仓库\n\n## 配置\n\n```\n# 检查git版本\ngit --version\n# 查看 git 相关命令\ngit --help\n# 显示当前的Git配置\n$ git config --list\n# 编辑Git配置文件\n$ git config -e [--global]\n# 设置提交代码时的用户信息 (--global表示全局，没有--global表示只查询当前项目中的配置)\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n# 颜色设置\ngit config --global color.ui true                         # git status等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit config --global --unset http.proxy                    # remove  proxy configuration on git\n```\n\n## 新建代码库\n\n```\n# 在当前目录新建一个Git代码库\n$ git init\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n## 增加/删除文件\n\n```\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n# 添加当前目录的所有文件到暂存区\n$ git add .\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n## 代码提交\n\n```\n# 提交暂存区到仓库区\n$ git commit -m [message]\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n# 提交时显示所有diff信息\n$ git commit -v\n# 将add和commit合为一步\n$ git commit -am 'message'\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n## 分支\n\n```\n# 列出所有本地分支\n$ git branch\n# 列出所有远程分支\n$ git branch -r\n# 列出所有本地分支和远程分支\n$ git branch -a\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n# 切换到上一个分支\n$ git checkout -\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n# 合并指定分支到当前分支\n$ git merge [branch]\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n# 删除分支\n$ git branch -d [branch-name]\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n# 检出版本v2.0\n$ git checkout v2.0\n# 从远程分支develop创建新本地分支devel并检出\n$ git checkout -b devel origin/develop\n# 检出head版本的README文件（可用于修改错误回退）\ngit checkout -- README\n```\n\n## 标签\n\n```\n# 列出所有tag\n$ git tag\n# 新建一个tag在当前commit\n$ git tag [tag]\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n# 删除本地tag\n$ git tag -d [tag]\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n# 查看tag信息\n$ git show [tag]\n# 提交指定tag\n$ git push [remote] [tag]\n# 提交所有tag\n$ git push [remote] --tags\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n## 查看信息\n\n```\n# 显示有变更的文件\n$ git status\n# 显示当前分支的版本历史\n$ git log\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n# 显示暂存区和工作区的差异\n$ git diff\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n## 远程同步\n\n```\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n# 显示所有远程仓库\n$ git remote -v\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n## 撤销\n\n```\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n","slug":"git","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl68qk8wc00016qjcbyyy8jxp","content":"<h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><ul>\n<li><code>workspace</code>：工作区</li>\n<li><code>staging area</code>：暂存区/缓存区</li>\n<li><code>local repository</code>：版本库或本地仓库</li>\n<li><code>remote repository</code>：远程仓库</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检查git版本</span><br><span class=\"line\">git <span class=\"attr\">--version</span></span><br><span class=\"line\"># 查看 git 相关命令</span><br><span class=\"line\">git <span class=\"attr\">--help</span></span><br><span class=\"line\"># 显示当前的Git配置</span><br><span class=\"line\">$ git config <span class=\"attr\">--list</span></span><br><span class=\"line\"># 编辑Git配置文件</span><br><span class=\"line\">$ git config -e <span class=\"selector-attr\">[--global]</span></span><br><span class=\"line\"># 设置提交代码时的用户信息 (--global表示全局，没有--global表示只查询当前项目中的配置)</span><br><span class=\"line\">$ git config <span class=\"selector-attr\">[--global]</span> user<span class=\"selector-class\">.name</span> &quot;<span class=\"selector-attr\">[name]</span>&quot;</span><br><span class=\"line\">$ git config <span class=\"selector-attr\">[--global]</span> user<span class=\"selector-class\">.email</span> &quot;<span class=\"selector-attr\">[email address]</span>&quot;</span><br><span class=\"line\"># 颜色设置</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.ui</span> true                         # git status等命令自动着色</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.status</span> auto</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.diff</span> auto</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.branch</span> auto</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.interactive</span> auto</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attr\">--unset</span> http<span class=\"selector-class\">.proxy</span>                    # remove  proxy configuration on git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 在当前目录新建一个Git代码库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git init</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git init [project-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">clone</span> [url]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 添加指定文件到暂存区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git add [file1] [file2] ...</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git add [<span class=\"built_in\">dir</span>]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git add .</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git add -p</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">rm</span> [file1] [file2] ...</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">rm</span> --cached [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">mv</span> [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -m [message]</span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -a</span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -v</span><br><span class=\"line\"><span class=\"comment\"># 将add和commit合为一步</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -am <span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit --amend -m [message]</span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 列出所有本地分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 列出所有远程分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch -r</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 列出所有本地分支和远程分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch -a</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch [branch-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个分支，并切换到该分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout -b [branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个分支，指向指定commit</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch [branch] [commit]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch --track [branch] [remote-branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 切换到指定分支，并更新工作区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout [branch-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 切换到上一个分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout -</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch --set-upstream [branch] [remote-branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 合并指定分支到当前分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git merge [branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 选择一个commit，合并进当前分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git cherry-pick [commit]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 删除分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch -d [branch-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 删除远程分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git push origin --delete [branch-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch -dr [remote/branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 检出版本v2.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout v2.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 从远程分支develop创建新本地分支devel并检出</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout -b devel origin/develop</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 检出<span class=\"built_in\">head</span>版本的README文件（可用于修改错误回退）</span></span><br><span class=\"line\">git checkout -- README</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span></span><br><span class=\"line\"><span class=\"title\"># 新建一个tag</span>在当前commit</span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>]</span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>] [commit]</span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [<span class=\"keyword\">tag</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示有变更的文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示当前分支的版本历史</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 搜索提交历史，根据关键词</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> -S [keyword]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某个commit之后的所有变动，其<span class=\"string\">&quot;提交说明&quot;</span>必须符合搜索条件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> --follow [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git whatchanged [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示指定文件相关的每一次diff</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> -p [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示过去5次提交</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> -5 --pretty --oneline</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git shortlog -sn</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git blame [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示暂存区和工作区的差异</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff --cached [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff HEAD</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示两次提交之间的差异</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff [first-branch]...[second-branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示今天你写了多少行代码</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff --shortstat <span class=\"string\">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git show [commit]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某次提交发生变化的文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git show --name-only [commit]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git show [commit]:[filename]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示当前分支的最近几次提交</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git reflog</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h2><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git fetch [remote]</span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote show [remote]</span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add [shortname] [url]</span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git pull [remote] [branch]</span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] [branch]</span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] --force</span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git checkout [file]</span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git checkout [commit] [file]</span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git checkout .</span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset [file]</span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset --hard</span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset [commit]</span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset --hard [commit]</span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset --keep [commit]</span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git revert [commit]</span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git stash</span><br><span class=\"line\"><span class=\"variable\">$ </span>git stash pop</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":4129,"excerpt":"","more":"<h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><ul>\n<li><code>workspace</code>：工作区</li>\n<li><code>staging area</code>：暂存区/缓存区</li>\n<li><code>local repository</code>：版本库或本地仓库</li>\n<li><code>remote repository</code>：远程仓库</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检查git版本</span><br><span class=\"line\">git <span class=\"attr\">--version</span></span><br><span class=\"line\"># 查看 git 相关命令</span><br><span class=\"line\">git <span class=\"attr\">--help</span></span><br><span class=\"line\"># 显示当前的Git配置</span><br><span class=\"line\">$ git config <span class=\"attr\">--list</span></span><br><span class=\"line\"># 编辑Git配置文件</span><br><span class=\"line\">$ git config -e <span class=\"selector-attr\">[--global]</span></span><br><span class=\"line\"># 设置提交代码时的用户信息 (--global表示全局，没有--global表示只查询当前项目中的配置)</span><br><span class=\"line\">$ git config <span class=\"selector-attr\">[--global]</span> user<span class=\"selector-class\">.name</span> &quot;<span class=\"selector-attr\">[name]</span>&quot;</span><br><span class=\"line\">$ git config <span class=\"selector-attr\">[--global]</span> user<span class=\"selector-class\">.email</span> &quot;<span class=\"selector-attr\">[email address]</span>&quot;</span><br><span class=\"line\"># 颜色设置</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.ui</span> true                         # git status等命令自动着色</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.status</span> auto</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.diff</span> auto</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.branch</span> auto</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attribute\">color</span><span class=\"selector-class\">.interactive</span> auto</span><br><span class=\"line\">git config <span class=\"attr\">--global</span> <span class=\"attr\">--unset</span> http<span class=\"selector-class\">.proxy</span>                    # remove  proxy configuration on git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 在当前目录新建一个Git代码库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git init</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git init [project-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">clone</span> [url]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 添加指定文件到暂存区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git add [file1] [file2] ...</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git add [<span class=\"built_in\">dir</span>]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git add .</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git add -p</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">rm</span> [file1] [file2] ...</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">rm</span> --cached [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">mv</span> [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码提交\"><a href=\"#代码提交\" class=\"headerlink\" title=\"代码提交\"></a>代码提交</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -m [message]</span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -a</span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -v</span><br><span class=\"line\"><span class=\"comment\"># 将add和commit合为一步</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -am <span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit --amend -m [message]</span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 列出所有本地分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 列出所有远程分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch -r</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 列出所有本地分支和远程分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch -a</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch [branch-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个分支，并切换到该分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout -b [branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个分支，指向指定commit</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch [branch] [commit]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch --track [branch] [remote-branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 切换到指定分支，并更新工作区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout [branch-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 切换到上一个分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout -</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch --set-upstream [branch] [remote-branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 合并指定分支到当前分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git merge [branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 选择一个commit，合并进当前分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git cherry-pick [commit]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 删除分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch -d [branch-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 删除远程分支</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git push origin --delete [branch-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git branch -dr [remote/branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 检出版本v2.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout v2.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 从远程分支develop创建新本地分支devel并检出</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git checkout -b devel origin/develop</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 检出<span class=\"built_in\">head</span>版本的README文件（可用于修改错误回退）</span></span><br><span class=\"line\">git checkout -- README</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span></span><br><span class=\"line\"><span class=\"title\"># 新建一个tag</span>在当前commit</span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>]</span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>] [commit]</span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [<span class=\"keyword\">tag</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示有变更的文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git status</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示当前分支的版本历史</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 搜索提交历史，根据关键词</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> -S [keyword]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某个commit之后的所有变动，其<span class=\"string\">&quot;提交说明&quot;</span>必须符合搜索条件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> --follow [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git whatchanged [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示指定文件相关的每一次diff</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> -p [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示过去5次提交</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git <span class=\"built_in\">log</span> -5 --pretty --oneline</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git shortlog -sn</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git blame [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示暂存区和工作区的差异</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff --cached [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff HEAD</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示两次提交之间的差异</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff [first-branch]...[second-branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示今天你写了多少行代码</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git diff --shortstat <span class=\"string\">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git show [commit]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某次提交发生变化的文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git show --name-only [commit]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git show [commit]:[filename]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"> 显示当前分支的最近几次提交</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\"> git reflog</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程同步\"><a href=\"#远程同步\" class=\"headerlink\" title=\"远程同步\"></a>远程同步</h2><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git fetch [remote]</span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote show [remote]</span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add [shortname] [url]</span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git pull [remote] [branch]</span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] [branch]</span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] --force</span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git checkout [file]</span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git checkout [commit] [file]</span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git checkout .</span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset [file]</span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset --hard</span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset [commit]</span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset --hard [commit]</span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git reset --keep [commit]</span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git revert [commit]</span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git stash</span><br><span class=\"line\"><span class=\"variable\">$ </span>git stash pop</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode 两数之和","date":"2021-06-19T00:00:00.000Z","description":" ","_content":"\n给定一个整数数组 nums  和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那两个整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。\n\n#### 示例 1：\n\n- 输入：nums = [2,7,11,15], target = 9\n- 输出：[0,1]\n- 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n\n#### 示例 2：\n\n- 输入：nums = [3,2,4], target = 6\n- 输出：[1,2]\n\n#### 示例 3：\n\n- 输入：nums = [3,3], target = 6\n- 输出：[0,1]\n\n#### 提示：\n\n- 2 <= nums.length <= 104\n- -109 <= nums[i] <= 109\n- -109 <= target <= 109\n- 只会存在一个有效答案\n\n#### 进阶\n\n时间复杂度小于 O(N<sup>2</sup>)\n\n#### 方法一: 暴力枚举\n\n##### 思路及算法\n\n最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。\n\n当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。\n\n```\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nconst twoSum = function(nums, target) {\n  let len = nums.length\n    for ( let i = 0; i < len ; i++) {\n        for (let j = i + 1; j < len; j++) {\n            if (nums[i] + nums[j] === target) {\n                return [i, j]\n            }\n        }\n    }\n};\n```\n\n##### 复杂度分析\n\n- 时间复杂度：O(N<sup>2</sup>)，其中 NN 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。\n\n- 空间复杂度：O(1)。\n\n#### 方法二：哈希表\n\n##### 思路及算法\n\n方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。\n\n使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。\n\n这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。\n\n```\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nconst twoSum = function(nums, target) {\n  const hastable = new Map()\n  let result = []\n  nums.forEach((value, index) => {\n    if (hastable.has(target - value)) {\n      result = [hastable.get(target - value), index]\n    }\n    hastable.set(value, index)\n  })\n  return result\n};\n```\n\n##### 复杂度分析\n\n- 时间复杂度：O(N)，其中 NN 是数组中的元素数量。对于每一个元素 x，我们可以 O(1) 地寻找 target - x\n\n- 空间复杂度：O(N)，其中 NN 是数组中的元素数量。主要为哈希表的开销。\n","source":"_posts/two-sum.md","raw":"---\ntitle: 'leetcode 两数之和'\ndate: '2021-06-19'\ntags:\n  - leetcode\ncategories:\n  - 算法\ndescription: ' '\n---\n\n给定一个整数数组 nums  和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那两个整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。\n\n#### 示例 1：\n\n- 输入：nums = [2,7,11,15], target = 9\n- 输出：[0,1]\n- 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n\n#### 示例 2：\n\n- 输入：nums = [3,2,4], target = 6\n- 输出：[1,2]\n\n#### 示例 3：\n\n- 输入：nums = [3,3], target = 6\n- 输出：[0,1]\n\n#### 提示：\n\n- 2 <= nums.length <= 104\n- -109 <= nums[i] <= 109\n- -109 <= target <= 109\n- 只会存在一个有效答案\n\n#### 进阶\n\n时间复杂度小于 O(N<sup>2</sup>)\n\n#### 方法一: 暴力枚举\n\n##### 思路及算法\n\n最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。\n\n当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。\n\n```\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nconst twoSum = function(nums, target) {\n  let len = nums.length\n    for ( let i = 0; i < len ; i++) {\n        for (let j = i + 1; j < len; j++) {\n            if (nums[i] + nums[j] === target) {\n                return [i, j]\n            }\n        }\n    }\n};\n```\n\n##### 复杂度分析\n\n- 时间复杂度：O(N<sup>2</sup>)，其中 NN 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。\n\n- 空间复杂度：O(1)。\n\n#### 方法二：哈希表\n\n##### 思路及算法\n\n方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。\n\n使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。\n\n这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。\n\n```\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nconst twoSum = function(nums, target) {\n  const hastable = new Map()\n  let result = []\n  nums.forEach((value, index) => {\n    if (hastable.has(target - value)) {\n      result = [hastable.get(target - value), index]\n    }\n    hastable.set(value, index)\n  })\n  return result\n};\n```\n\n##### 复杂度分析\n\n- 时间复杂度：O(N)，其中 NN 是数组中的元素数量。对于每一个元素 x，我们可以 O(1) 地寻找 target - x\n\n- 空间复杂度：O(N)，其中 NN 是数组中的元素数量。主要为哈希表的开销。\n","slug":"two-sum","published":1,"updated":"2022-07-29T01:28:33.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl68qk8we00036qjc4rmaad2g","content":"<p>给定一个整数数组 nums  和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那两个整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<h4 id=\"示例-1：\"><a href=\"#示例-1：\" class=\"headerlink\" title=\"示例 1：\"></a>示例 1：</h4><ul>\n<li>输入：nums = [2,7,11,15], target = 9</li>\n<li>输出：[0,1]</li>\n<li>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</li>\n</ul>\n<h4 id=\"示例-2：\"><a href=\"#示例-2：\" class=\"headerlink\" title=\"示例 2：\"></a>示例 2：</h4><ul>\n<li>输入：nums = [3,2,4], target = 6</li>\n<li>输出：[1,2]</li>\n</ul>\n<h4 id=\"示例-3：\"><a href=\"#示例-3：\" class=\"headerlink\" title=\"示例 3：\"></a>示例 3：</h4><ul>\n<li>输入：nums = [3,3], target = 6</li>\n<li>输出：[0,1]</li>\n</ul>\n<h4 id=\"提示：\"><a href=\"#提示：\" class=\"headerlink\" title=\"提示：\"></a>提示：</h4><ul>\n<li>2 &lt;= nums.length &lt;= 104</li>\n<li>-109 &lt;= nums[i] &lt;= 109</li>\n<li>-109 &lt;= target &lt;= 109</li>\n<li>只会存在一个有效答案</li>\n</ul>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h4><p>时间复杂度小于 O(N<sup>2</sup>)</p>\n<h4 id=\"方法一-暴力枚举\"><a href=\"#方法一-暴力枚举\" class=\"headerlink\" title=\"方法一: 暴力枚举\"></a>方法一: 暴力枚举</h4><h5 id=\"思路及算法\"><a href=\"#思路及算法\" class=\"headerlink\" title=\"思路及算法\"></a>思路及算法</h5><p>最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。</p>\n<p>当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(nums, target)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h5><ul>\n<li><p>时间复杂度：O(N<sup>2</sup>)，其中 NN 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</p>\n</li>\n<li><p>空间复杂度：O(1)。</p>\n</li>\n</ul>\n<h4 id=\"方法二：哈希表\"><a href=\"#方法二：哈希表\" class=\"headerlink\" title=\"方法二：哈希表\"></a>方法二：哈希表</h4><h5 id=\"思路及算法-1\"><a href=\"#思路及算法-1\" class=\"headerlink\" title=\"思路及算法\"></a>思路及算法</h5><p>方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。</p>\n<p>使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。</p>\n<p>这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> twoSum = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hastable = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hastable.<span class=\"title function_\">has</span>(target - value)) &#123;</span><br><span class=\"line\">      result = [hastable.<span class=\"title function_\">get</span>(target - value), index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hastable.<span class=\"title function_\">set</span>(value, index)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"复杂度分析-1\"><a href=\"#复杂度分析-1\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h5><ul>\n<li><p>时间复杂度：O(N)，其中 NN 是数组中的元素数量。对于每一个元素 x，我们可以 O(1) 地寻找 target - x</p>\n</li>\n<li><p>空间复杂度：O(N)，其中 NN 是数组中的元素数量。主要为哈希表的开销。</p>\n</li>\n</ul>\n","site":{"data":{}},"length":1541,"excerpt":"","more":"<p>给定一个整数数组 nums  和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那两个整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<h4 id=\"示例-1：\"><a href=\"#示例-1：\" class=\"headerlink\" title=\"示例 1：\"></a>示例 1：</h4><ul>\n<li>输入：nums = [2,7,11,15], target = 9</li>\n<li>输出：[0,1]</li>\n<li>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</li>\n</ul>\n<h4 id=\"示例-2：\"><a href=\"#示例-2：\" class=\"headerlink\" title=\"示例 2：\"></a>示例 2：</h4><ul>\n<li>输入：nums = [3,2,4], target = 6</li>\n<li>输出：[1,2]</li>\n</ul>\n<h4 id=\"示例-3：\"><a href=\"#示例-3：\" class=\"headerlink\" title=\"示例 3：\"></a>示例 3：</h4><ul>\n<li>输入：nums = [3,3], target = 6</li>\n<li>输出：[0,1]</li>\n</ul>\n<h4 id=\"提示：\"><a href=\"#提示：\" class=\"headerlink\" title=\"提示：\"></a>提示：</h4><ul>\n<li>2 &lt;= nums.length &lt;= 104</li>\n<li>-109 &lt;= nums[i] &lt;= 109</li>\n<li>-109 &lt;= target &lt;= 109</li>\n<li>只会存在一个有效答案</li>\n</ul>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h4><p>时间复杂度小于 O(N<sup>2</sup>)</p>\n<h4 id=\"方法一-暴力枚举\"><a href=\"#方法一-暴力枚举\" class=\"headerlink\" title=\"方法一: 暴力枚举\"></a>方法一: 暴力枚举</h4><h5 id=\"思路及算法\"><a href=\"#思路及算法\" class=\"headerlink\" title=\"思路及算法\"></a>思路及算法</h5><p>最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。</p>\n<p>当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;number[]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(nums, target)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.length</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h5><ul>\n<li><p>时间复杂度：O(N<sup>2</sup>)，其中 NN 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</p>\n</li>\n<li><p>空间复杂度：O(1)。</p>\n</li>\n</ul>\n<h4 id=\"方法二：哈希表\"><a href=\"#方法二：哈希表\" class=\"headerlink\" title=\"方法二：哈希表\"></a>方法二：哈希表</h4><h5 id=\"思路及算法-1\"><a href=\"#思路及算法-1\" class=\"headerlink\" title=\"思路及算法\"></a>思路及算法</h5><p>方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。</p>\n<p>使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。</p>\n<p>这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> twoSum = <span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hastable = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hastable.<span class=\"title function_\">has</span>(target - value)) &#123;</span><br><span class=\"line\">      result = [hastable.<span class=\"title function_\">get</span>(target - value), index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hastable.<span class=\"title function_\">set</span>(value, index)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"复杂度分析-1\"><a href=\"#复杂度分析-1\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h5><ul>\n<li><p>时间复杂度：O(N)，其中 NN 是数组中的元素数量。对于每一个元素 x，我们可以 O(1) 地寻找 target - x</p>\n</li>\n<li><p>空间复杂度：O(N)，其中 NN 是数组中的元素数量。主要为哈希表的开销。</p>\n</li>\n</ul>\n"},{"title":"React基础","date":"2022-03-05T00:00:00.000Z","updated":"2021-03-26T00:00:00.000Z","description":" ","_content":"\n## React 介绍\n\n### React 是什么\n\n> 一个专注于构建用户界面的 JavaScript 库，和 vue 和 angular 并称前端三大框架，不夸张的说，react 引领了很多新思想，世界范围内是最流行的 js 前端框架，最近发布了 18 版本，加入了很多新特性\n\n### React 有什么特点\n\n#### 声明式 UI（JSX）\n\n> 写 UI 就和写普通的 HTML 一样，抛弃命令式的繁琐实现\n\n#### 组件化\n\n> 组件是 react 中最重要的内容，组件可以通过搭积木的方式拼成一个完整的页面，通过组件的抽象可以增加复用能力和提高可维护性\n\n#### 跨平台\n\n> react 既可以开发 web 应用也可以使用同样的语法开发原生应用（react-native），比如安卓和 ios 应用，甚至可以使用 react 开发 VR 应用，想象力空间十足，react 更像是一个 元框架 为各种领域赋能\n\n## 环境初始化\n\n### 安装\n\n```bash\nnpx create-react-app react-basic\n```\n\n### 启动项目\n\n```bash\nnpm start\n```\n\n## JSX 基础\n\n### JSX 介绍\n\n概念：JSX 是 JavaScript XML（HTML）的缩写，表示在 JS 代码中书写 HTML 结构\n作用：在 React 中创建 HTML 结构（页面 UI 结构）\n优势：\n\n1. 采用类似于 HTML 的语法，降低学习成本，会 HTML 就会 JSX\n2. 充分利用 JS 自身的可编程能力创建 HTML 结构\n\n注意：JSX 并不是标准的 JS 语法，是 JS 的语法扩展，浏览器默认是不识别的，脚手架中内置的 @babel/plugin-transform-react-jsx 包，用来解析该语法\n![896dcceeeb4dbc9c4c49f4007c5d9139.png](https://img.gejiba.com/images/896dcceeeb4dbc9c4c49f4007c5d9139.png)\n\n### JSX 中使用 js 表达式\n\n#### 语法以错误检查调试等\n\n`{ JS表达式 }`\n\n```JSX\nconst name = 'Hello World'\n<h1>{name}</h1>\n```\n\n#### 可以使用的表达式\n\n1. 字符串、数值、布尔值、null、undefined、object（ [] / {} ）\n2. 1 + 2、'123abc'.split('')、['a', 'b', 'c'].join('-')\n3. fn()\n\n#### 特别注意\n\nif 语句/ switch-case 语句/ 变量声明语句，这些叫做语句，不是表达式，不能出现在 {} 中！！\n\n### JSX 列表渲染\n\n```JSX\n// 来个列表\nconst songs = [\n  { id: 1, name: '刘备' },\n  { id: 2, name: '关羽' },\n  { id: 3, name: '张飞' },\n  { id: 4, name: '赵云' }\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ul>\n        {\n          songs.map(item => <li>{item.name}</li>)\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n```\n\n**注意**：需要为遍历项添加 key 属性\n\n1. key 在 HTML 结构中是看不到的，是 React 内部用来进行性能优化时使用\n2. key 在当前列表中要唯一的字符串或者数值（String/Number）\n3. 如果列表中有像 id 这种的唯一值，就用 id 来作为 key 值\n4. 如果列表中没有像 id 这种的唯一值，就可以使用 index（下标）来作为 key 值\n\n### JSX 条件渲染\n\n**作用**：根据是否满足条件生成 HTML 结构，比如 Loading 效果\n**实现**：可以使用 三元运算符 或 逻辑与(&&)运算符\n\n```JSX\n// 来个布尔值\nconst flag = true\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* 条件渲染字符串 */}\n      {flag ? 'react真有趣' : 'vue真有趣'}\n      {/* 条件渲染标签/组件 */}\n      {flag ? <span>this is span</span> : null}\n    </div>\n  )\n}\nexport default App\n```\n\n### JSX 样式处理\n\n- 行内样式 - style\n\n```JSX\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={{ color: 'red' }}>this is a div</div>\n    </div>\n  )\n}\n\nexport default App\n```\n\n- 行内样式 - style - 更优写法\n\n```JSX\nconst styleObj = {\n    color:red\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={ styleObj }>this is a div</div>\n    </div>\n  )\n}\n\nexport default App\n```\n\n- 类名 - className（推荐）\n\n```css style.css\n.title {\n  font-size: 30px;\n  color: blue;\n}\n```\n\n- 类名 - className - 动态类名控制\n\n```JSX\nimport './style.css'\nconst showTitle = true\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className={ showTitle ? 'title' : ''}>this is a div</div>\n    </div>\n  )\n}\nexport default App\n```\n\n### JSX 注意事项\n\n1. JSX 必须有一个根节点，如果没有根节点，可以使用<></>（幽灵节点）替代\n2. 所有标签必须形成闭合，成对闭合或者自闭合都可以\n3. JSX 中的语法更加贴近 JS 语法，属性名采用驼峰命名法 class -> className for -> htmlFor\n4. JSX 支持多行（换行），如果需要换行，需使用() 包裹，防止 bug 出现\n\n## React 组件基础\n\n### 组件概念\n\n组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。\n![a5d4800b0937dda52aad91d7cab719e0.png](https://img.gejiba.com/images/a5d4800b0937dda52aad91d7cab719e0.png)\n\n### 函数组件\n\n使用 JS 的函数（或箭头函数）创建的组件，就叫做函数组件\n组件定义与渲染\n\n```JSX\n// 定义函数组件\nfunction HelloFn () {\n  return <div>这是我的第一个函数组件!</div>\n}\n\n// 定义类组件\nfunction App () {\n  return (\n    <div className=\"App\">\n      {/* 渲染函数组件 */}\n      <HelloFn />\n      <HelloFn></HelloFn>\n    </div>\n  )\n}\nexport default App\n```\n\n**约定说明**\n\n1. 组件的名称必须首字母大写，react 内部会根据这个来判断是组件还是普通的 HTML 标签\n2. 函数组件必须有返回值，表示该组件的 UI 结构；如果不需要渲染任何内容，则返回 null\n3. 组件就像 HTML 标签一样可以被渲染到页面中。组件表示的是一段结构内容，对于函数组件来说，渲染的内容是函数的返回值就是对应的内容\n4. 使用函数名称作为组件标签名称，可以成对出现也可以自闭合\n\n### 类组件\n\n使用 ES6 的 class 创建的组件，叫做类（class）组件\n\n```JSX\n// 引入React\nimport React from 'react'\n\n// 定义类组件\nclass HelloC extends React.Component {\n  render () {\n    return <div>这是我的第一个类组件!</div>\n  }\n}\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      {/* 渲染类组件 */}\n      <HelloC />\n      <HelloC></HelloC>\n    </div>\n  )\n}\nexport default App\n```\n\n**约定说明**\n\n1. 类名称也必须以大写字母开头\n2. 类组件应该继承 React.Component 父类，从而使用父类中提供的方法或属性\n3. 类组件必须提供 render 方法 render 方法必须有返回值，表示该组件的 UI 结构\n\n### 事件绑定\n\n#### 1. 如何绑定事件\n\n- 语法\n  on + 事件名称 = { 事件处理程序 } ，比如：`<div onClick={()=>{}}></div>`\n- 注意点\n  react 事件采用驼峰命名法，比如：`onMouseEnter`、`onFocus`\n- 样例\n\n```JSX\n// 函数组件\nfunction HelloFn () {\n  // 定义事件回调函数\n  const clickHandler = () => {\n    console.log('事件被触发了')\n  }\n  return (\n    // 绑定事件\n    <button onClick={clickHandler}>click me!</button>\n  )\n}\n\n// 类组件\nclass HelloC extends React.Component {\n  // 定义事件回调函数\n  clickHandler = () => {\n    console.log('事件被触发了')\n  }\n  render () {\n    return (\n      // 绑定事件\n      <button onClick={this.clickHandler}>click me!</button>\n    )\n  }\n}\n```\n\n#### 获取事件对象\n\n- 通过事件处理程序的参数获取事件对象 e\n\n```JSX\n// 函数组件\nfunction HelloFn () {\n  // 定义事件回调函数\n  const clickHandler = (e) => {\n    e.preventDefault()\n    console.log('事件被触发了', e)\n  }\n  return (\n    // 绑定事件\n    <a href=\"http://www.baidu.com/\" onClick={clickHandler}>百度</a>\n  )\n}\n```\n\n### 组件状态\n\n> **前提**：在 react hook 出来之前，函数式组件是没有自己的状态的\n\n![2b236ba8ae6567bbf8ff35cd434287b0.png](https://img.gejiba.com/images/2b236ba8ae6567bbf8ff35cd434287b0.png)\n\n#### 初始化状态\n\n- 通过 class 的实例属性 state 来初始化\n- state 的值是一个对象结构，表示一个组件可以有多个数据状态\n\n```JSX\nclass Counter extends React.Component {\n  // 初始化状态\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n  }\n  render() {\n    return <button>计数器</button>\n  }\n}\n```\n\n#### 读取状态\n\n- 通过 this.state 来获取状态\n\n```JSX\nclass Counter extends React.Component {\n  // 初始化状态\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n  }\n  render() {\n    // 读取状态\n    return <button>计数器{this.state.count}</button>\n  }\n}\n```\n\n### 修改状态\n\n- 语法\n  this.setState({ 要修改的部分数据 })\n- setState 方法作用\n  a. 修改 state 中的数据状态\n  b. 更新 UI\n- 思想\n  数据驱动视图，也就是只要修改数据状态，那么页面就会自动刷新，无需手动操作 dom\n- 注意事项\n  **不要直接修改 state 中的值，必须通过 setState 方法进行修改**\n\n```JSX\nclass Counter extends React.Component {\n  // 定义数据\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n  }\n  // 定义修改数据的方法\n  setCount = () => {\n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n  // 使用数据 并绑定事件\n  render () {\n    return <button onClick={this.setCount}>{this.state.count}</button>\n  }\n}\n```\n\n### this 问题说明\n\n![c0effcdb7343c55aa42751b43255d24c.png](https://img.gejiba.com/images/c0effcdb7343c55aa42751b43255d24c.png)\n\n随着 js 标准的发展，主流的写法已经变成了 class fields，无需考虑太多 this 问题\n\n### React 的状态不可变\n\n**概念**：不要直接修改状态的值，而是基于当前状态创建新的状态值\n\n1. 错误的直接修改\n\n```JavaScript\nstate = {\n  count : 0,\n  list: [1,2,3],\n  person: {\n     name:'jack',\n     age:18\n  }\n}\n// 直接修改简单类型Number\nthis.state.count++\n++this.state.count\nthis.state.count += 1\nthis.state.count = 1\n\n// 直接修改数组\nthis.state.list.push(123)\nthis.state.list.spice(1,1)\n\n// 直接修改对象\nthis.state.person.name = 'rose'\n```\n\n2. 基于当前状态创建新值\n\n```JavaScript\nthis.setState({\n    count: this.state.count + 1\n    list: [...this.state.list, 4],\n    person: {\n       ...this.state.person,\n       // 覆盖原来的属性 就可以达到修改对象中属性的目的\n       name: 'rose'\n    }\n})\n```\n\n### 表单处理\n\n使用 React 处理表单元素，一般有俩种方式：\n\n1. 受控组件 （推荐使用）\n2. 非受控组件\n\n#### 受控表单组件\n\n> 什么是受控组件？ input 框自己的状态被 React 组件状态控制\n> React 组件的状态的地方是在 state 中，input 表单元素也有自己的状态是在 value 中，React 将 state 与表单元素的值（value）绑定到一起，由 state 的值来控制表单元素的值，从而保证单一数据源特性\n\n**实现步骤**\n\n以获取文本框的值为例，受控组件的使用步骤如下：\n\n1. 在组件的 state 中声明一个组件的状态数据\n2. 将状态数据设置为 input 标签元素的 value 属性的值\n3. 为 input 添加 change 事件，在事件处理程序中，通过事件对象 e 获取到当前文本框的值（即用户当前输入的值）\n4. 调用 setState 方法，将文本框的值作为 state 状态的最新值\n\n```JSX\nimport React from 'react'\n\nclass InputComponent extends React.Component {\n  // 声明组件状态\n  constructor(props) {\n    super(props);\n    this.state = {message: 'this is message'};\n  }\n  // 声明事件回调函数\n  changeHandler = (e) => {\n    this.setState({ message: e.target.value })\n  }\n  render () {\n    return (\n      <div>\n        {/* 绑定value 绑定事件*/}\n        <input value={this.state.message} onChange={this.changeHandler} />\n      </div>\n    )\n  }\n}\n\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <InputComponent />\n    </div>\n  )\n}\nexport default App\n```\n\n#### 非受控表单组件\n\n> 什么是非受控组件？\n> 非受控组件就是通过手动操作 dom 的方式获取文本框的值，文本框的状态不受 react 组件的 state 中的状态控制，直接通过原生 dom 获取输入框的值\n\n**实现步骤**\n\n1. 导入 createRef 函数\n2. 调用 createRef 函数，创建一个 ref 对象，存储到名为 msgRef 的实例属性中\n3. 为 input 添加 ref 属性，值为 msgRef\n4. 在按钮的事件处理程序中，通过 msgRef.current 即可拿到 input 对应的 dom 元素，而其中 msgRef.current.value 拿到的就是文本框的值\n\n```JSX\nimport React, { createRef } from 'react'\n\nclass InputComponent extends React.Component {\n  // 使用createRef产生一个存放dom的对象容器\n  msgRef = createRef()\n\n  changeHandler = () => {\n    console.log(this.msgRef.current.value)\n  }\n\n  render() {\n    return (\n      <div>\n        {/* ref绑定 获取真实dom */}\n        <input ref={this.msgRef} />\n        <button onClick={this.changeHandler}>click</button>\n      </div>\n    )\n  }\n}\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <InputComponent />\n    </div>\n  )\n}\nexport default App\n```\n\n## React 组件通信\n\n### 组件通信的意义\n\n组件是独立且封闭的单元，默认情况下组件**只能使用自己的数据（state）**\n组件化开发的过程中，完整的功能会拆分多个组件，在这个过程中不可避免的需要互相传递一些数据\n为了能让各组件之间可以进行互相沟通，数据传递，这个过程就是组件通信\n\n1. 父子关系 - 最重要的\n2. 兄弟关系 - 自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信\n3. 其它关系 - mobx / redux / 基于 hook 的方案\n\n### 父传子实现\n\n**实现步骤**\n\n1.  父组件提供要传递的数据 - state\n2.  给子组件标签添加属性值为 state 中的数据\n3.  子组件中通过 props 接收父组件中传过来的数据\n    a. 类组件使用 this.props 获取 props 对象\n    b. 函数式组件直接通过参数获取 props 对象\n\n![efb04fab8891b6507a321a9706b0b1c1.png](https://img.gejiba.com/images/efb04fab8891b6507a321a9706b0b1c1.png)\n\n**代码实现**\n\n```JSX\nimport React from 'react'\n\n// 函数式子组件\nfunction FSon(props) {\n  console.log(props)\n  return (\n    <div>\n      子组件1\n      {props.msg}\n    </div>\n  )\n}\n\n// 类子组件\nclass CSon extends React.Component {\n  render() {\n    return (\n      <div>\n        子组件2\n        {this.props.msg}\n      </div>\n    )\n  }\n}\n// 父组件\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: 'this is a message'\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div>父组件</div>\n        <FSon msg={this.state.message} />\n        <CSon msg={this.state.message} />\n      </>\n    )\n  }\n}\n\nexport default App\n```\n\n### props 说明\n\n#### props 是只读对象（readonly）\n\n根据单项数据流的要求，子组件只能读取 props 中的数据，不能进行修改\n\n#### props 可以传递任意数据\n\n数字、字符串、布尔值、数组、对象、函数、JSX\n\n```JSX\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: 'this is a message'\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>父组件</div>\n        <FSon\n          msg={this.state.message}\n          age={20}\n          isMan={true}\n          cb={() => { console.log(1) }}\n          child={<span>this is child</span>}\n        />\n        <CSon msg={this.state.message} />\n      </div>\n    )\n  }\n}\n```\n\n![b60880bb7a5ce85b074e0ff9784acc8a.png](https://img.gejiba.com/images/b60880bb7a5ce85b074e0ff9784acc8a.png)\n\n### 子传父实现\n\n**口诀**： 父组件给子组件传递回调函数，子组件调用\n**实现步骤**\n\n1. 父组件提供一个回调函数 - 用于接收数据\n2. 将函数作为属性的值，传给子组件\n3. 子组件通过 props 调用 回调函数\n4. 将子组件中的数据作为参数传递给回调函数\n\n![7e6f7f4d3ea9fc7b56ca52d0240603f3.png](https://img.gejiba.com/images/7e6f7f4d3ea9fc7b56ca52d0240603f3.png)\n\n```JSX\nimport React from 'react'\n\n// 子组件\nfunction Son(props) {\n  function handleClick() {\n    // 调用父组件传递过来的回调函数 并注入参数\n    props.changeMsg('this is newMessage')\n  }\n  return (\n    <div>\n      {props.msg}\n      <button onClick={handleClick}>change</button>\n    </div>\n  )\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: 'this is a message'\n    }\n  }\n  // 提供回调函数\n  changeMessage = (newMsg) => {\n    console.log('子组件传过来的数据:',newMsg)\n    this.setState({\n      message: newMsg\n    })\n  }\n  render() {\n    return (\n      <div>\n        <div>父组件</div>\n        <Son\n          msg={this.state.message}\n          // 传递给子组件\n          changeMsg={this.changeMessage}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n### 兄弟组件通信\n\n**核心思路**： 通过状态提升机制，利用共同的父组件实现兄弟通信\n![bc10d3653e637134a16cc5cef364cabe.png](https://img.gejiba.com/images/bc10d3653e637134a16cc5cef364cabe.png)\n\n**实现步骤**\n\n1. 将共享状态提升到最近的公共父组件中，由公共父组件管理这个状态\n\n   - 提供共享状态\n   - 提供操作共享状态的方法\n\n2. 要接收数据状态的子组件通过 props 接收数据\n3. 要传递数据状态的子组件通过 props 接收方法，调用方法传递数据\n\n```JSX\nimport React from 'react'\n\n// 子组件A\nfunction SonA(props) {\n  return (\n    <div>\n      SonA\n      {props.msg}\n    </div>\n  )\n}\n// 子组件B\nfunction SonB(props) {\n  return (\n    <div>\n      SonB\n      <button onClick={() => props.changeMsg('new message')}>changeMsg</button>\n    </div>\n  )\n}\n\n// 父组件\nclass App extends React.Component {\n  // 父组件提供状态数据\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: 'this is a message'\n    }\n  }\n  // 父组件提供修改数据的方法\n  changeMsg = (newMsg) => {\n    this.setState({\n      message: newMsg\n    })\n  }\n\n  render() {\n    return (\n      <>\n        {/* 接收数据的组件 */}\n        <SonA msg={this.state.message} />\n        {/* 修改数据的组件 */}\n        <SonB changeMsg={this.changeMsg} />\n      </>\n    )\n  }\n}\n\nexport default App\n\n```\n\n### 跨组件通信 Context\n\n![9decc7bd1f6bbd7b065439fcb8317a50.png](https://img.gejiba.com/images/9decc7bd1f6bbd7b065439fcb8317a50.png)\n\n> 上图是一个 react 形成的嵌套组件树，如果我们想从 App 组件向任意一个下层组件传递数据，该怎么办呢？目前我们能采取的方式就是一层一层的 props 往下传，显然很繁琐\n> Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法\n\n**实现步骤**\n\n1. 创建 Context 对象 导出 Provider 和 Consumer 对象\n\n```JavaScript\nconst { Provider, Consumer } = createContext()\n```\n\n2. 使用 Provider 包裹根组件提供数据\n\n```JSX\n<Provider value={this.state.message}>\n    {/* 根组件 */}\n</Provider>\n```\n\n3.  需要用到数据的组件使用 Consumer 包裹获取数据\n\n```JSX\n<Consumer >\n    {value => /* 基于 context 值进行渲染*/}\n</Consumer>\n```\n\n**代码实现**\n\n```JSX\nimport React, { createContext }  from 'react'\n\n// 1. 创建Context对象\nconst { Provider, Consumer } = createContext()\n\n\n// 3. 消费数据\nfunction ComC() {\n  return (\n    <Consumer >\n      {value => <div>{value}</div>}\n    </Consumer>\n  )\n}\n\nfunction ComA() {\n  return (\n    <ComC/>\n  )\n}\n\n// 2. 提供数据\nclass App extends React.Component {\n  state = {\n    message: 'this is message'\n  }\n  render() {\n    return (\n      <Provider value={this.state.message}>\n        <div className=\"app\">\n          <ComA />\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n```\n\n## React 组件进阶\n\n### children 属性\n\n#### children 属性是什么\n\n> 表示该组件的子节点，只要组件内部有子节点，props 中就有该属性\n\n#### children 可以是什么\n\n1. 普通文本\n2. 普通标签元素\n3. 函数\n4. JSX\n\n### props 校验-场景和使用\n\n> 对于组件来说，props 是由外部传入的，我们其实无法保证组件使用者传入了什么格式的数据，如果传入的数据格式不对，就有可能会导致组件内部错误，有一个点很关键 - 组件的使用者可能报错了也不知道为什么，看下面的例子\n\n```JSX\nconst List = props => {\n  const arr = props.colors\n  const lis = arr.map((item, index) => <li key={index}>{item.name}</li>)\n  return <ul>{lis}</ul>\n}\n\n<List colors={20} />\n```\n\n面对这样的问题，如何解决？ **props 校验**\n\n**实现步骤**\n\n1. 安装属性校验包： `npm i prop-types`\n2. 导入 prop-types 包\n3. 使用 组件名.propTypes = {} 给组件添加校验规则\n\n**核心代码**\n\n```JSX\nimport PropTypes from 'prop-types'\n\nconst List = props => {\n  const arr = props.colors\n  const lis = arr.map((item, index) => <li key={index}>{item.name}</li>)\n  return <ul>{lis}</ul>\n}\n\nList.propTypes = {\n  colors: PropTypes.array\n}\n```\n\n### props 校验-规则说明\n\n#### 四种常见结构\n\n1. 常见类型：array、bool、func、number、object、string\n2. React 元素类型：element\n3. 必填项：isRequired\n4. 特定的结构对象：shape({})\n\n```JavaScript\n// 常见类型\noptionalFunc: PropTypes.func,\n// 必填 只需要在类型后面串联一个isRequired\nrequiredFunc: PropTypes.func.isRequired,\n// 特定结构的对象\noptionalObjectWithShape: PropTypes.shape({\n\tcolor: PropTypes.string,\n\tfontSize: PropTypes.number\n})\n```\n\n[官网文档更多阅读](https://reactjs.org/docs/typechecking-with-proptypes.html)\n\n### props 校验-规则说明\n\n> 通过 `defaultProps` 可以给组件的 props 设置默认值，在未传入 props 的时候生效\n\n#### 函数组件\n\n直接使用函数参数默认值\n\n```JSX\nfunction List({pageSize = 10}) {\n  return (\n    <div>\n      此处展示props的默认值：{ pageSize }\n    </div>\n  )\n}\n\n// 不传入pageSize属性\n<List />\n```\n\n#### 类组件\n\n使用类静态属性声明默认值，`static defaultProps = {}`\n\n```JSX\nclass List extends Component {\n  static defaultProps = {\n    pageSize: 10\n  }\n\n  render() {\n    return (\n      <div>\n        此处展示props的默认值：{this.props.pageSize}\n      </div>\n    )\n  }\n}\n<List />\n```\n\n### 生命周期 - 概述\n\n> 组件的生命周期是指组件从被创建到挂载到页面中运行起来，再到组件不用时卸载的过程，注意，只有类组件才有生命周期（类组件 实例化 函数组件 不需要实例化）\n> ![6bcfce01b8fec23ca114b6c4fbac6a16.png](https://img.gejiba.com/images/6bcfce01b8fec23ca114b6c4fbac6a16.png)\n\n[http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)\n\n### 生命周期 - 挂载阶段\n\n![1fd62b6f68705bf5d1d562b5d764153c.png](https://img.gejiba.com/images/1fd62b6f68705bf5d1d562b5d764153c.png)\n\n| 钩子函数          | 触发时机                                                 | 作用                                                          |\n| ----------------- | -------------------------------------------------------- | ------------------------------------------------------------- |\n| constructor       | constructor 创建组件时，最先执行，初始化的时候只执行一次 | 1. 初始化 state 2. 创建 Ref 3. 使用 bind 解决 this 指向问题等 |\n| render            | 每次组件渲染都会触发                                     | 渲染 UI（注意： 不能在里面调用 setState() ）                  |\n| componentDidMount | 组件挂载（完成 DOM 渲染）后执行，初始化的时候执行一次    | 1. 发送网络请求 2.DOM 操作                                    |\n\n### 生命周期 - 更新阶段\n\n![480575c7388d6aab5d3405a55eb3a837.png](https://img.gejiba.com/images/480575c7388d6aab5d3405a55eb3a837.png)\n\n| 钩子函数           | 触发时机                                      | 作用                                                         |\n| ------------------ | --------------------------------------------- | ------------------------------------------------------------ |\n| render             | 每次组件渲染都会触发                          | 每次组件渲染都会触发 渲染 UI（与 挂载阶段 是同一个 render）  |\n| componentDidUpdate | componentDidUpdate 组件更新后（DOM 渲染完毕） | DOM 操作，可以获取到更新后的 DOM 内容，不要直接调用 setState |\n\n### 生命周期 - 卸载阶段\n\n| 钩子函数             | 触发时机                 | 作用                                                        |\n| -------------------- | ------------------------ | ----------------------------------------------------------- |\n| componentWillUnmount | 组件卸载（从页面中消失） | 组件卸载（从页面中消失） 执行清理工作（比如：清理定时器等） |\n\n## Hooks 基础\n\n### Hooks 概念理解\n\n#### 什么是 hooks\n\n> Hooks 的本质：一套能够使函数组件更强大，更灵活的“钩子”\n\nReact 体系里组件分为 类组件 和 函数组件\n经过多年的实战，函数组件是一个更加匹配 React 的设计理念 UI = f(data)，也更有利于逻辑拆分与重用的组件表达形式，而先前的函数组件是不可以有自己的状态的，为了能让函数组件可以拥有自己的状态，所以从 react v16.8 开始，Hooks 应运而生\n\n**注意点**：\n\n1. 有了 hooks 之后，为了兼容老版本，class 类组件并没有被移除，俩者都可以使用\n2. 有了 hooks 之后，不能在把函数成为无状态组件了，因为 hooks 为函数组件提供了状态\n3. hooks 只能在函数组件中使用\n\n#### Hooks 解决了什么问题\n\nHooks 的出现解决了俩个问题 1. 组件的状态逻辑复用 2.class 组件自身的问题\n\n1.  组件的逻辑复用\n    在 hooks 出现之前，react 先后尝试了 mixins 混入，HOC 高阶组件，render-props 等模式\n    但是都有各自的问题，比如 mixin 的数据来源不清晰，高阶组件的嵌套问题等等\n2.  class 组件自身的问题\n    class 组件就像一个厚重的‘战舰’ 一样，大而全，提供了很多东西，有不可忽视的学习成本，比如各种生命周期，this 指向问题等等，而我们更多时候需要的是一个轻快灵活的'快艇'\n\n#### useState\n\n##### 基础使用\n\n**作用**\n\n> useState 为函数组件提供状态（state）\n\n**使用步骤**\n\n1. 导入 useState 函数\n2. 调用 useState 函数，并传入状态的初始值\n3. 从 useState 函数的返回值中，拿到状态和修改状态的方法\n4. 在 JSX 中展示状态\n5. 调用修改状态的方法更新状态\n\n**代码实现**\n\n```JSX\nimport { useState } from 'react'\n\nfunction App() {\n  // 参数：状态初始值比如,传入 0 表示该状态的初始值为 0\n  // 返回值：数组,包含两个值：1 状态值（state） 2 修改该状态的函数（setState）\n  const [count, setCount] = useState(0)\n  return (\n    <button onClick={() => { setCount(count + 1) }}>{count}</button>\n  )\n}\nexport default App\n```\n\n##### 状态的读取和修改\n\n**读取状态**\n\n> 该方式提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用\n\n**修改状态**\n\n1. setCount 是一个函数，参数表示最新的状态值\n2. 调用该函数后，将使用新值替换旧值\n3. 修改状态后，由于状态发生变化，会引起视图变化\n\n**注意事项**\n\n1. 修改状态的时候，一定要使用新的状态替换旧的状态，不能直接修改旧的状态，尤其是引用类型\n\n##### 组件的更新过程\n\n函数组件使用 **useState hook** 后的执行过程，以及状态值的变化\n\n- 组件第一次渲染\n  a. 从头开始执行该组件中的代码逻辑\n  b. 调用 useState(0) 将传入的参数作为状态初始值，即：0\n  c. 渲染组件，此时，获取到的状态 count 值为： 0\n- 组件第二次渲染\n  a. 点击按钮，调用 setCount(count + 1) 修改状态，因为状态发生改变，所以，该组件会重新渲染\n  b. 组件重新渲染时，会再次执行该组件中的代码逻辑\n  c. 再次调用 useState(0)，此时 React 内部会拿到最新的状态值而非初始值，比如，该案例中最新的状态值为 1\n  d. 再次渲染组件，此时，获取到的状态 count 值为：1\n\n注意：**useState 的初始值(参数)只会在组件第一次渲染时生效**。也就是说，以后的每次渲染，useState 获取到都是最新的状态值，React 组件会记住每次最新的状态值\n\n```JSX\nimport { useState } from 'react'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  // 在这里可以进行打印测试\n  console.log(count)\n  return (\n    <button onClick={() => { setCount(count + 1) }}>{count}</button>\n  )\n}\nexport default App\n```\n\n##### 使用规则\n\n1. useState 函数可以执行多次，每次执行互相独立，每调用一次为函数组件提供一个状态\n2. useState 注意事项\n   a. 只能出现在函数组件中\n   b. 不能嵌套在 if/for/其它函数中（react 按照 hooks 的调用顺序识别每一个 hook）\n   ```JSX\n   let num = 1\n   function List(){\n     num++\n     if(num / 2 === 0){\n       const [name, setName] = useState('cp')\n     }\n     const [list,setList] = useState([])\n   }\n   // 俩个hook的顺序不是固定的，这是不可以的！！！\n   ```\n   c. 可以通过开发者工具查看 hooks 状态\n\n#### useEffect\n\n##### 理解函数副作用\n\n**什么是副作用**\n\n> 副作用是相对于主作用来说的，一个函数除了主作用，其他的作用就是副作用。对于 React 组件来说，**主作用就是根据数据（state/props）渲染 UI**，除此之外都是副作用（比如，手动修改 DOM）\n\n**常见的副作用**\n\n1. 数据请求 ajax 发送\n2. 手动修改 dom\n3. localstorage 操作\n\nuseEffect 函数的作用就是为 react 函数组件提供副作用处理的！\n\n##### 基础使用\n\n**作用**\n\n> 为 react 函数组件提供副作用处理\n\n**使用步骤**\n\n1. 导入 useEffect 函数\n2. 调用 useEffect 函数，并传入回调函数\n3. 在回调函数中编写副作用处理（dom 操作）\n4. 修改数据状态\n5. 检测副作用是否生效\n\n**代码实现**\n\n```JSX\nimport { useEffect, useState } from 'react'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  useEffect(()=>{\n    // dom操作\n    document.title = `当前已点击了${count}次`\n  })\n  return (\n    <button onClick={() => { setCount(count + 1) }}>{count}</button>\n  )\n}\n\nexport default App\n```\n\n##### 依赖项控制执行时机\n\n1. 不添加依赖项\n\n> 组件首次渲染执行一次，以及不管是哪个状态更改引起组件更新时都会重新执行\n>\n> 1.  组件初始渲染\n> 2.  组件更新 （不管是哪个状态引起的更新）\n\n2. 添加空数组\n\n> 组件只在首次渲染时执行一次\n\n3. 添加特定依赖项\n\n> 副作用函数在首次渲染时执行，在依赖项发生变化时重新执行\n\n```JSX\nfunction App() {\n    const [count, setCount] = useState(0)\n    const [name, setName] = useState('zs')\n\n    useEffect(() => {\n        console.log('副作用执行了')\n    }, [count])\n\n    return (\n        <>\n         <button onClick={() => { setCount(count + 1) }}>{count}</button>\n         <button onClick={() => { setName('cp') }}>{name}</button>\n        </>\n    )\n}\n```\n\n**注意事项**\nuseEffect 回调函数中用到的数据（比如，count）就是依赖数据，就应该出现在依赖项数组中，如果不添加依赖项就会有 bug 出现\n\n## Hooks 进阶\n\n### Hooks 进阶\n\n**使用场景**\n参数只会在组件的初始渲染中起作用，后续渲染时会被忽略。如果初始 state 需要通过计算才能获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用\n\n**语法**\n\n```JavaScript\nconst [name, setName] = useState(()=>{\n  // 编写计算逻辑    return '计算之后的初始值'\n})\n```\n\n**语法选择**\n\n1. 如果就是初始化一个普通的数据 直接使用 useState(普通数据) 即可\n2. 如果要初始化的数据无法直接得到需要通过计算才能获取到，使用 useState(()=>{})\n\n```JSX\nimport { useState } from 'react'\n\nfunction Counter(props) {\n  const [count, setCount] = useState(() => {\n    return props.count\n  })\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <>\n      <Counter count={10} />\n      <Counter count={20} />\n    </>\n  )\n}\n\nexport default App\n```\n\n### useEffect - 清理副作用\n\n**使用场景**\n在组件被销毁时，如果有些副作用操作需要被清理，就可以使用此语法，比如常见的定时器\n**语法及规则**\n\n```JavaScript\nuseEffect(() => {\n    console.log('副作用函数执行了')\n    // 副作用函数的执行时机为: 在下一次副作用函数执行之前执行\n    return () => {\n        console.log('清理副作用的函数执行了')\n        // 在这里写清理副作用的代码\n    }\n})\n```\n\n**定时器小案例**\n\n> 添加副作用函数前：组件虽然已经不显示了，但是定时器依旧在运行\n\n```JSX\nimport { useEffect, useState } from 'react'\nfunction Foo() {\n    useEffect(() => {\n        setInterval(() => {\n            console.log('副作用函数执行了')\n        }, 1000)\n    })\n    return <div>Foo</div>\n}\n\n\nfunction App() {\n    const [flag, setFlag] = useState(true)\n    return (\n        <>\n          <button onClick={() => setFlag(false)}>click</button>\n         {flag ? <Foo/> : null}\n        </>\n    )\n}\n\nexport default App\n```\n\n> 添加清理副作用函数后：一旦组件被销毁，定时器也被清理\n\n```JSX\nimport { useEffect, useState } from 'react'\n\nfunction Foo() {\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            console.log('副作用函数执行了')\n        }, 1000)\n        // 添加清理副租用函数\n        return () => {\n            clearInterval(timerId)\n        }\n    })\n    return <div>Foo</div>\n}\nfunction App() {\n    const [flag, setFlag] = useState(true)\n    return (\n        <>\n          <button onClick={() => setFlag(false)}>click</button>\n         {flag ? <Foo/> : null}\n        </>\n    )\n}\n\nexport default App\n```\n\n### useEffect - 发送网络请求\n\n**使用场景**\n如何在 useEffect 中发送网络请求，并且封装同步 async await 操作\n\n**语法要求**\n不可以直接在 useEffect 的回调函数外层直接包裹 await ，因为异步会导致清理函数无法立即返回\n\n```JavaScript\nuseEffect(async ()=>{\n    const res = await axios.get('http://geek.itheima.net/v1_0/channels')\n    console.log(res)\n},[])\n```\n\n**正确写法**\n在内部单独定义一个函数，然后把这个函数包装成同步\n\n```JSX\nuseEffect(()=>{\n    async function fetchData(){\n       const res = await axios.get('https://api.inews.qq.com/newsqa/v1/query/inner/publish/modules/list?modules=statisGradeCityDetail,diseaseh5Shelf')                            console.log(res)\n    }\n},[])\n```\n\n### useRef\n\n**使用场景**\n\n> 在函数组件中获取真实的 dom 元素对象或者是组件对象\n\n**使用步骤**\n\n1. 导入 useRef 函数\n2. 执行 useRef 函数并传入 null，返回值为一个对象 内部有一个 current 属性存放拿到的 dom 对象（组件实例）\n3. 通过 ref 绑定 要获取的元素或者组件\n\n**获取 dom**\n\n```JSX\nimport { useEffect, useRef } from 'react'\nfunction App() {\n    const h1Ref = useRef(null)\n    useEffect(() => {\n        console.log(h1Ref)\n    },[])\n    return (\n        <div>\n            <h1 ref={ h1Ref }>this is h1</h1>\n        </div>\n    )\n}\nexport default App\n```\n\n**获取组件实例**\n\n> 函数组件没有实例，不能使用 ref 获取，如果想获取组件实例，必须是类组件\n\n```JSX Foo.jsx\nclass Foo extends React.Component {\n    sayHi = () => {\n        console.log('say hi')\n    }\n    render(){\n        return <div>Foo</div>\n    }\n}\n\nexport default Foo\n```\n\n```JSX App.jsx\nimport { useEffect, useRef } from 'react'\nimport Foo from './Foo'\nfunction App() {\n    const h1Foo = useRef(null)\n    useEffect(() => {\n        console.log(h1Foo)\n    }, [])\n    return (\n        <div> <Foo ref={ h1Foo } /></div>\n    )\n}\nexport default App\n```\n\n### useContext\n\n**实现步骤**\n\n1. 使用 createContext 创建 Context 对象\n2. 在顶层组件通过 Provider 提供数据\n3. 在底层组件通过 useContext 函数获取数据\n\n```JSX\nimport { createContext, useContext } from 'react'\n// 创建Context对象\nconst Context = createContext()\n\nfunction Foo() {\n    return <div>Foo <Bar/></div>\n}\n\nfunction Bar() {\n    // 底层组件通过useContext函数获取数据\n    const name = useContext(Context)\n    return <div>Bar {name}</div>\n}\n\nfunction App() {\n    return (\n        // 顶层组件通过Provider 提供数据\n        <Context.Provider value={'this is name'}>\n            <div><Foo/></div>\n        </Context.Provider>\n    )\n}\n\nexport default App\n```\n","source":"_posts/react-base.md","raw":"---\ntitle: 'React基础'\ndate: '2022-03-05'\nupdated: '2021-03-26'\ntags:\n  - react\ncategories:\n  - react\n  - 前端框架\ndescription: ' '\n---\n\n## React 介绍\n\n### React 是什么\n\n> 一个专注于构建用户界面的 JavaScript 库，和 vue 和 angular 并称前端三大框架，不夸张的说，react 引领了很多新思想，世界范围内是最流行的 js 前端框架，最近发布了 18 版本，加入了很多新特性\n\n### React 有什么特点\n\n#### 声明式 UI（JSX）\n\n> 写 UI 就和写普通的 HTML 一样，抛弃命令式的繁琐实现\n\n#### 组件化\n\n> 组件是 react 中最重要的内容，组件可以通过搭积木的方式拼成一个完整的页面，通过组件的抽象可以增加复用能力和提高可维护性\n\n#### 跨平台\n\n> react 既可以开发 web 应用也可以使用同样的语法开发原生应用（react-native），比如安卓和 ios 应用，甚至可以使用 react 开发 VR 应用，想象力空间十足，react 更像是一个 元框架 为各种领域赋能\n\n## 环境初始化\n\n### 安装\n\n```bash\nnpx create-react-app react-basic\n```\n\n### 启动项目\n\n```bash\nnpm start\n```\n\n## JSX 基础\n\n### JSX 介绍\n\n概念：JSX 是 JavaScript XML（HTML）的缩写，表示在 JS 代码中书写 HTML 结构\n作用：在 React 中创建 HTML 结构（页面 UI 结构）\n优势：\n\n1. 采用类似于 HTML 的语法，降低学习成本，会 HTML 就会 JSX\n2. 充分利用 JS 自身的可编程能力创建 HTML 结构\n\n注意：JSX 并不是标准的 JS 语法，是 JS 的语法扩展，浏览器默认是不识别的，脚手架中内置的 @babel/plugin-transform-react-jsx 包，用来解析该语法\n![896dcceeeb4dbc9c4c49f4007c5d9139.png](https://img.gejiba.com/images/896dcceeeb4dbc9c4c49f4007c5d9139.png)\n\n### JSX 中使用 js 表达式\n\n#### 语法以错误检查调试等\n\n`{ JS表达式 }`\n\n```JSX\nconst name = 'Hello World'\n<h1>{name}</h1>\n```\n\n#### 可以使用的表达式\n\n1. 字符串、数值、布尔值、null、undefined、object（ [] / {} ）\n2. 1 + 2、'123abc'.split('')、['a', 'b', 'c'].join('-')\n3. fn()\n\n#### 特别注意\n\nif 语句/ switch-case 语句/ 变量声明语句，这些叫做语句，不是表达式，不能出现在 {} 中！！\n\n### JSX 列表渲染\n\n```JSX\n// 来个列表\nconst songs = [\n  { id: 1, name: '刘备' },\n  { id: 2, name: '关羽' },\n  { id: 3, name: '张飞' },\n  { id: 4, name: '赵云' }\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ul>\n        {\n          songs.map(item => <li>{item.name}</li>)\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n```\n\n**注意**：需要为遍历项添加 key 属性\n\n1. key 在 HTML 结构中是看不到的，是 React 内部用来进行性能优化时使用\n2. key 在当前列表中要唯一的字符串或者数值（String/Number）\n3. 如果列表中有像 id 这种的唯一值，就用 id 来作为 key 值\n4. 如果列表中没有像 id 这种的唯一值，就可以使用 index（下标）来作为 key 值\n\n### JSX 条件渲染\n\n**作用**：根据是否满足条件生成 HTML 结构，比如 Loading 效果\n**实现**：可以使用 三元运算符 或 逻辑与(&&)运算符\n\n```JSX\n// 来个布尔值\nconst flag = true\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* 条件渲染字符串 */}\n      {flag ? 'react真有趣' : 'vue真有趣'}\n      {/* 条件渲染标签/组件 */}\n      {flag ? <span>this is span</span> : null}\n    </div>\n  )\n}\nexport default App\n```\n\n### JSX 样式处理\n\n- 行内样式 - style\n\n```JSX\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={{ color: 'red' }}>this is a div</div>\n    </div>\n  )\n}\n\nexport default App\n```\n\n- 行内样式 - style - 更优写法\n\n```JSX\nconst styleObj = {\n    color:red\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={ styleObj }>this is a div</div>\n    </div>\n  )\n}\n\nexport default App\n```\n\n- 类名 - className（推荐）\n\n```css style.css\n.title {\n  font-size: 30px;\n  color: blue;\n}\n```\n\n- 类名 - className - 动态类名控制\n\n```JSX\nimport './style.css'\nconst showTitle = true\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className={ showTitle ? 'title' : ''}>this is a div</div>\n    </div>\n  )\n}\nexport default App\n```\n\n### JSX 注意事项\n\n1. JSX 必须有一个根节点，如果没有根节点，可以使用<></>（幽灵节点）替代\n2. 所有标签必须形成闭合，成对闭合或者自闭合都可以\n3. JSX 中的语法更加贴近 JS 语法，属性名采用驼峰命名法 class -> className for -> htmlFor\n4. JSX 支持多行（换行），如果需要换行，需使用() 包裹，防止 bug 出现\n\n## React 组件基础\n\n### 组件概念\n\n组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。\n![a5d4800b0937dda52aad91d7cab719e0.png](https://img.gejiba.com/images/a5d4800b0937dda52aad91d7cab719e0.png)\n\n### 函数组件\n\n使用 JS 的函数（或箭头函数）创建的组件，就叫做函数组件\n组件定义与渲染\n\n```JSX\n// 定义函数组件\nfunction HelloFn () {\n  return <div>这是我的第一个函数组件!</div>\n}\n\n// 定义类组件\nfunction App () {\n  return (\n    <div className=\"App\">\n      {/* 渲染函数组件 */}\n      <HelloFn />\n      <HelloFn></HelloFn>\n    </div>\n  )\n}\nexport default App\n```\n\n**约定说明**\n\n1. 组件的名称必须首字母大写，react 内部会根据这个来判断是组件还是普通的 HTML 标签\n2. 函数组件必须有返回值，表示该组件的 UI 结构；如果不需要渲染任何内容，则返回 null\n3. 组件就像 HTML 标签一样可以被渲染到页面中。组件表示的是一段结构内容，对于函数组件来说，渲染的内容是函数的返回值就是对应的内容\n4. 使用函数名称作为组件标签名称，可以成对出现也可以自闭合\n\n### 类组件\n\n使用 ES6 的 class 创建的组件，叫做类（class）组件\n\n```JSX\n// 引入React\nimport React from 'react'\n\n// 定义类组件\nclass HelloC extends React.Component {\n  render () {\n    return <div>这是我的第一个类组件!</div>\n  }\n}\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      {/* 渲染类组件 */}\n      <HelloC />\n      <HelloC></HelloC>\n    </div>\n  )\n}\nexport default App\n```\n\n**约定说明**\n\n1. 类名称也必须以大写字母开头\n2. 类组件应该继承 React.Component 父类，从而使用父类中提供的方法或属性\n3. 类组件必须提供 render 方法 render 方法必须有返回值，表示该组件的 UI 结构\n\n### 事件绑定\n\n#### 1. 如何绑定事件\n\n- 语法\n  on + 事件名称 = { 事件处理程序 } ，比如：`<div onClick={()=>{}}></div>`\n- 注意点\n  react 事件采用驼峰命名法，比如：`onMouseEnter`、`onFocus`\n- 样例\n\n```JSX\n// 函数组件\nfunction HelloFn () {\n  // 定义事件回调函数\n  const clickHandler = () => {\n    console.log('事件被触发了')\n  }\n  return (\n    // 绑定事件\n    <button onClick={clickHandler}>click me!</button>\n  )\n}\n\n// 类组件\nclass HelloC extends React.Component {\n  // 定义事件回调函数\n  clickHandler = () => {\n    console.log('事件被触发了')\n  }\n  render () {\n    return (\n      // 绑定事件\n      <button onClick={this.clickHandler}>click me!</button>\n    )\n  }\n}\n```\n\n#### 获取事件对象\n\n- 通过事件处理程序的参数获取事件对象 e\n\n```JSX\n// 函数组件\nfunction HelloFn () {\n  // 定义事件回调函数\n  const clickHandler = (e) => {\n    e.preventDefault()\n    console.log('事件被触发了', e)\n  }\n  return (\n    // 绑定事件\n    <a href=\"http://www.baidu.com/\" onClick={clickHandler}>百度</a>\n  )\n}\n```\n\n### 组件状态\n\n> **前提**：在 react hook 出来之前，函数式组件是没有自己的状态的\n\n![2b236ba8ae6567bbf8ff35cd434287b0.png](https://img.gejiba.com/images/2b236ba8ae6567bbf8ff35cd434287b0.png)\n\n#### 初始化状态\n\n- 通过 class 的实例属性 state 来初始化\n- state 的值是一个对象结构，表示一个组件可以有多个数据状态\n\n```JSX\nclass Counter extends React.Component {\n  // 初始化状态\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n  }\n  render() {\n    return <button>计数器</button>\n  }\n}\n```\n\n#### 读取状态\n\n- 通过 this.state 来获取状态\n\n```JSX\nclass Counter extends React.Component {\n  // 初始化状态\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n  }\n  render() {\n    // 读取状态\n    return <button>计数器{this.state.count}</button>\n  }\n}\n```\n\n### 修改状态\n\n- 语法\n  this.setState({ 要修改的部分数据 })\n- setState 方法作用\n  a. 修改 state 中的数据状态\n  b. 更新 UI\n- 思想\n  数据驱动视图，也就是只要修改数据状态，那么页面就会自动刷新，无需手动操作 dom\n- 注意事项\n  **不要直接修改 state 中的值，必须通过 setState 方法进行修改**\n\n```JSX\nclass Counter extends React.Component {\n  // 定义数据\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n  }\n  // 定义修改数据的方法\n  setCount = () => {\n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n  // 使用数据 并绑定事件\n  render () {\n    return <button onClick={this.setCount}>{this.state.count}</button>\n  }\n}\n```\n\n### this 问题说明\n\n![c0effcdb7343c55aa42751b43255d24c.png](https://img.gejiba.com/images/c0effcdb7343c55aa42751b43255d24c.png)\n\n随着 js 标准的发展，主流的写法已经变成了 class fields，无需考虑太多 this 问题\n\n### React 的状态不可变\n\n**概念**：不要直接修改状态的值，而是基于当前状态创建新的状态值\n\n1. 错误的直接修改\n\n```JavaScript\nstate = {\n  count : 0,\n  list: [1,2,3],\n  person: {\n     name:'jack',\n     age:18\n  }\n}\n// 直接修改简单类型Number\nthis.state.count++\n++this.state.count\nthis.state.count += 1\nthis.state.count = 1\n\n// 直接修改数组\nthis.state.list.push(123)\nthis.state.list.spice(1,1)\n\n// 直接修改对象\nthis.state.person.name = 'rose'\n```\n\n2. 基于当前状态创建新值\n\n```JavaScript\nthis.setState({\n    count: this.state.count + 1\n    list: [...this.state.list, 4],\n    person: {\n       ...this.state.person,\n       // 覆盖原来的属性 就可以达到修改对象中属性的目的\n       name: 'rose'\n    }\n})\n```\n\n### 表单处理\n\n使用 React 处理表单元素，一般有俩种方式：\n\n1. 受控组件 （推荐使用）\n2. 非受控组件\n\n#### 受控表单组件\n\n> 什么是受控组件？ input 框自己的状态被 React 组件状态控制\n> React 组件的状态的地方是在 state 中，input 表单元素也有自己的状态是在 value 中，React 将 state 与表单元素的值（value）绑定到一起，由 state 的值来控制表单元素的值，从而保证单一数据源特性\n\n**实现步骤**\n\n以获取文本框的值为例，受控组件的使用步骤如下：\n\n1. 在组件的 state 中声明一个组件的状态数据\n2. 将状态数据设置为 input 标签元素的 value 属性的值\n3. 为 input 添加 change 事件，在事件处理程序中，通过事件对象 e 获取到当前文本框的值（即用户当前输入的值）\n4. 调用 setState 方法，将文本框的值作为 state 状态的最新值\n\n```JSX\nimport React from 'react'\n\nclass InputComponent extends React.Component {\n  // 声明组件状态\n  constructor(props) {\n    super(props);\n    this.state = {message: 'this is message'};\n  }\n  // 声明事件回调函数\n  changeHandler = (e) => {\n    this.setState({ message: e.target.value })\n  }\n  render () {\n    return (\n      <div>\n        {/* 绑定value 绑定事件*/}\n        <input value={this.state.message} onChange={this.changeHandler} />\n      </div>\n    )\n  }\n}\n\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <InputComponent />\n    </div>\n  )\n}\nexport default App\n```\n\n#### 非受控表单组件\n\n> 什么是非受控组件？\n> 非受控组件就是通过手动操作 dom 的方式获取文本框的值，文本框的状态不受 react 组件的 state 中的状态控制，直接通过原生 dom 获取输入框的值\n\n**实现步骤**\n\n1. 导入 createRef 函数\n2. 调用 createRef 函数，创建一个 ref 对象，存储到名为 msgRef 的实例属性中\n3. 为 input 添加 ref 属性，值为 msgRef\n4. 在按钮的事件处理程序中，通过 msgRef.current 即可拿到 input 对应的 dom 元素，而其中 msgRef.current.value 拿到的就是文本框的值\n\n```JSX\nimport React, { createRef } from 'react'\n\nclass InputComponent extends React.Component {\n  // 使用createRef产生一个存放dom的对象容器\n  msgRef = createRef()\n\n  changeHandler = () => {\n    console.log(this.msgRef.current.value)\n  }\n\n  render() {\n    return (\n      <div>\n        {/* ref绑定 获取真实dom */}\n        <input ref={this.msgRef} />\n        <button onClick={this.changeHandler}>click</button>\n      </div>\n    )\n  }\n}\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <InputComponent />\n    </div>\n  )\n}\nexport default App\n```\n\n## React 组件通信\n\n### 组件通信的意义\n\n组件是独立且封闭的单元，默认情况下组件**只能使用自己的数据（state）**\n组件化开发的过程中，完整的功能会拆分多个组件，在这个过程中不可避免的需要互相传递一些数据\n为了能让各组件之间可以进行互相沟通，数据传递，这个过程就是组件通信\n\n1. 父子关系 - 最重要的\n2. 兄弟关系 - 自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信\n3. 其它关系 - mobx / redux / 基于 hook 的方案\n\n### 父传子实现\n\n**实现步骤**\n\n1.  父组件提供要传递的数据 - state\n2.  给子组件标签添加属性值为 state 中的数据\n3.  子组件中通过 props 接收父组件中传过来的数据\n    a. 类组件使用 this.props 获取 props 对象\n    b. 函数式组件直接通过参数获取 props 对象\n\n![efb04fab8891b6507a321a9706b0b1c1.png](https://img.gejiba.com/images/efb04fab8891b6507a321a9706b0b1c1.png)\n\n**代码实现**\n\n```JSX\nimport React from 'react'\n\n// 函数式子组件\nfunction FSon(props) {\n  console.log(props)\n  return (\n    <div>\n      子组件1\n      {props.msg}\n    </div>\n  )\n}\n\n// 类子组件\nclass CSon extends React.Component {\n  render() {\n    return (\n      <div>\n        子组件2\n        {this.props.msg}\n      </div>\n    )\n  }\n}\n// 父组件\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: 'this is a message'\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div>父组件</div>\n        <FSon msg={this.state.message} />\n        <CSon msg={this.state.message} />\n      </>\n    )\n  }\n}\n\nexport default App\n```\n\n### props 说明\n\n#### props 是只读对象（readonly）\n\n根据单项数据流的要求，子组件只能读取 props 中的数据，不能进行修改\n\n#### props 可以传递任意数据\n\n数字、字符串、布尔值、数组、对象、函数、JSX\n\n```JSX\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: 'this is a message'\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>父组件</div>\n        <FSon\n          msg={this.state.message}\n          age={20}\n          isMan={true}\n          cb={() => { console.log(1) }}\n          child={<span>this is child</span>}\n        />\n        <CSon msg={this.state.message} />\n      </div>\n    )\n  }\n}\n```\n\n![b60880bb7a5ce85b074e0ff9784acc8a.png](https://img.gejiba.com/images/b60880bb7a5ce85b074e0ff9784acc8a.png)\n\n### 子传父实现\n\n**口诀**： 父组件给子组件传递回调函数，子组件调用\n**实现步骤**\n\n1. 父组件提供一个回调函数 - 用于接收数据\n2. 将函数作为属性的值，传给子组件\n3. 子组件通过 props 调用 回调函数\n4. 将子组件中的数据作为参数传递给回调函数\n\n![7e6f7f4d3ea9fc7b56ca52d0240603f3.png](https://img.gejiba.com/images/7e6f7f4d3ea9fc7b56ca52d0240603f3.png)\n\n```JSX\nimport React from 'react'\n\n// 子组件\nfunction Son(props) {\n  function handleClick() {\n    // 调用父组件传递过来的回调函数 并注入参数\n    props.changeMsg('this is newMessage')\n  }\n  return (\n    <div>\n      {props.msg}\n      <button onClick={handleClick}>change</button>\n    </div>\n  )\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: 'this is a message'\n    }\n  }\n  // 提供回调函数\n  changeMessage = (newMsg) => {\n    console.log('子组件传过来的数据:',newMsg)\n    this.setState({\n      message: newMsg\n    })\n  }\n  render() {\n    return (\n      <div>\n        <div>父组件</div>\n        <Son\n          msg={this.state.message}\n          // 传递给子组件\n          changeMsg={this.changeMessage}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n### 兄弟组件通信\n\n**核心思路**： 通过状态提升机制，利用共同的父组件实现兄弟通信\n![bc10d3653e637134a16cc5cef364cabe.png](https://img.gejiba.com/images/bc10d3653e637134a16cc5cef364cabe.png)\n\n**实现步骤**\n\n1. 将共享状态提升到最近的公共父组件中，由公共父组件管理这个状态\n\n   - 提供共享状态\n   - 提供操作共享状态的方法\n\n2. 要接收数据状态的子组件通过 props 接收数据\n3. 要传递数据状态的子组件通过 props 接收方法，调用方法传递数据\n\n```JSX\nimport React from 'react'\n\n// 子组件A\nfunction SonA(props) {\n  return (\n    <div>\n      SonA\n      {props.msg}\n    </div>\n  )\n}\n// 子组件B\nfunction SonB(props) {\n  return (\n    <div>\n      SonB\n      <button onClick={() => props.changeMsg('new message')}>changeMsg</button>\n    </div>\n  )\n}\n\n// 父组件\nclass App extends React.Component {\n  // 父组件提供状态数据\n  constructor(props) {\n    super(props)\n    this.state = {\n      message: 'this is a message'\n    }\n  }\n  // 父组件提供修改数据的方法\n  changeMsg = (newMsg) => {\n    this.setState({\n      message: newMsg\n    })\n  }\n\n  render() {\n    return (\n      <>\n        {/* 接收数据的组件 */}\n        <SonA msg={this.state.message} />\n        {/* 修改数据的组件 */}\n        <SonB changeMsg={this.changeMsg} />\n      </>\n    )\n  }\n}\n\nexport default App\n\n```\n\n### 跨组件通信 Context\n\n![9decc7bd1f6bbd7b065439fcb8317a50.png](https://img.gejiba.com/images/9decc7bd1f6bbd7b065439fcb8317a50.png)\n\n> 上图是一个 react 形成的嵌套组件树，如果我们想从 App 组件向任意一个下层组件传递数据，该怎么办呢？目前我们能采取的方式就是一层一层的 props 往下传，显然很繁琐\n> Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法\n\n**实现步骤**\n\n1. 创建 Context 对象 导出 Provider 和 Consumer 对象\n\n```JavaScript\nconst { Provider, Consumer } = createContext()\n```\n\n2. 使用 Provider 包裹根组件提供数据\n\n```JSX\n<Provider value={this.state.message}>\n    {/* 根组件 */}\n</Provider>\n```\n\n3.  需要用到数据的组件使用 Consumer 包裹获取数据\n\n```JSX\n<Consumer >\n    {value => /* 基于 context 值进行渲染*/}\n</Consumer>\n```\n\n**代码实现**\n\n```JSX\nimport React, { createContext }  from 'react'\n\n// 1. 创建Context对象\nconst { Provider, Consumer } = createContext()\n\n\n// 3. 消费数据\nfunction ComC() {\n  return (\n    <Consumer >\n      {value => <div>{value}</div>}\n    </Consumer>\n  )\n}\n\nfunction ComA() {\n  return (\n    <ComC/>\n  )\n}\n\n// 2. 提供数据\nclass App extends React.Component {\n  state = {\n    message: 'this is message'\n  }\n  render() {\n    return (\n      <Provider value={this.state.message}>\n        <div className=\"app\">\n          <ComA />\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n```\n\n## React 组件进阶\n\n### children 属性\n\n#### children 属性是什么\n\n> 表示该组件的子节点，只要组件内部有子节点，props 中就有该属性\n\n#### children 可以是什么\n\n1. 普通文本\n2. 普通标签元素\n3. 函数\n4. JSX\n\n### props 校验-场景和使用\n\n> 对于组件来说，props 是由外部传入的，我们其实无法保证组件使用者传入了什么格式的数据，如果传入的数据格式不对，就有可能会导致组件内部错误，有一个点很关键 - 组件的使用者可能报错了也不知道为什么，看下面的例子\n\n```JSX\nconst List = props => {\n  const arr = props.colors\n  const lis = arr.map((item, index) => <li key={index}>{item.name}</li>)\n  return <ul>{lis}</ul>\n}\n\n<List colors={20} />\n```\n\n面对这样的问题，如何解决？ **props 校验**\n\n**实现步骤**\n\n1. 安装属性校验包： `npm i prop-types`\n2. 导入 prop-types 包\n3. 使用 组件名.propTypes = {} 给组件添加校验规则\n\n**核心代码**\n\n```JSX\nimport PropTypes from 'prop-types'\n\nconst List = props => {\n  const arr = props.colors\n  const lis = arr.map((item, index) => <li key={index}>{item.name}</li>)\n  return <ul>{lis}</ul>\n}\n\nList.propTypes = {\n  colors: PropTypes.array\n}\n```\n\n### props 校验-规则说明\n\n#### 四种常见结构\n\n1. 常见类型：array、bool、func、number、object、string\n2. React 元素类型：element\n3. 必填项：isRequired\n4. 特定的结构对象：shape({})\n\n```JavaScript\n// 常见类型\noptionalFunc: PropTypes.func,\n// 必填 只需要在类型后面串联一个isRequired\nrequiredFunc: PropTypes.func.isRequired,\n// 特定结构的对象\noptionalObjectWithShape: PropTypes.shape({\n\tcolor: PropTypes.string,\n\tfontSize: PropTypes.number\n})\n```\n\n[官网文档更多阅读](https://reactjs.org/docs/typechecking-with-proptypes.html)\n\n### props 校验-规则说明\n\n> 通过 `defaultProps` 可以给组件的 props 设置默认值，在未传入 props 的时候生效\n\n#### 函数组件\n\n直接使用函数参数默认值\n\n```JSX\nfunction List({pageSize = 10}) {\n  return (\n    <div>\n      此处展示props的默认值：{ pageSize }\n    </div>\n  )\n}\n\n// 不传入pageSize属性\n<List />\n```\n\n#### 类组件\n\n使用类静态属性声明默认值，`static defaultProps = {}`\n\n```JSX\nclass List extends Component {\n  static defaultProps = {\n    pageSize: 10\n  }\n\n  render() {\n    return (\n      <div>\n        此处展示props的默认值：{this.props.pageSize}\n      </div>\n    )\n  }\n}\n<List />\n```\n\n### 生命周期 - 概述\n\n> 组件的生命周期是指组件从被创建到挂载到页面中运行起来，再到组件不用时卸载的过程，注意，只有类组件才有生命周期（类组件 实例化 函数组件 不需要实例化）\n> ![6bcfce01b8fec23ca114b6c4fbac6a16.png](https://img.gejiba.com/images/6bcfce01b8fec23ca114b6c4fbac6a16.png)\n\n[http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)\n\n### 生命周期 - 挂载阶段\n\n![1fd62b6f68705bf5d1d562b5d764153c.png](https://img.gejiba.com/images/1fd62b6f68705bf5d1d562b5d764153c.png)\n\n| 钩子函数          | 触发时机                                                 | 作用                                                          |\n| ----------------- | -------------------------------------------------------- | ------------------------------------------------------------- |\n| constructor       | constructor 创建组件时，最先执行，初始化的时候只执行一次 | 1. 初始化 state 2. 创建 Ref 3. 使用 bind 解决 this 指向问题等 |\n| render            | 每次组件渲染都会触发                                     | 渲染 UI（注意： 不能在里面调用 setState() ）                  |\n| componentDidMount | 组件挂载（完成 DOM 渲染）后执行，初始化的时候执行一次    | 1. 发送网络请求 2.DOM 操作                                    |\n\n### 生命周期 - 更新阶段\n\n![480575c7388d6aab5d3405a55eb3a837.png](https://img.gejiba.com/images/480575c7388d6aab5d3405a55eb3a837.png)\n\n| 钩子函数           | 触发时机                                      | 作用                                                         |\n| ------------------ | --------------------------------------------- | ------------------------------------------------------------ |\n| render             | 每次组件渲染都会触发                          | 每次组件渲染都会触发 渲染 UI（与 挂载阶段 是同一个 render）  |\n| componentDidUpdate | componentDidUpdate 组件更新后（DOM 渲染完毕） | DOM 操作，可以获取到更新后的 DOM 内容，不要直接调用 setState |\n\n### 生命周期 - 卸载阶段\n\n| 钩子函数             | 触发时机                 | 作用                                                        |\n| -------------------- | ------------------------ | ----------------------------------------------------------- |\n| componentWillUnmount | 组件卸载（从页面中消失） | 组件卸载（从页面中消失） 执行清理工作（比如：清理定时器等） |\n\n## Hooks 基础\n\n### Hooks 概念理解\n\n#### 什么是 hooks\n\n> Hooks 的本质：一套能够使函数组件更强大，更灵活的“钩子”\n\nReact 体系里组件分为 类组件 和 函数组件\n经过多年的实战，函数组件是一个更加匹配 React 的设计理念 UI = f(data)，也更有利于逻辑拆分与重用的组件表达形式，而先前的函数组件是不可以有自己的状态的，为了能让函数组件可以拥有自己的状态，所以从 react v16.8 开始，Hooks 应运而生\n\n**注意点**：\n\n1. 有了 hooks 之后，为了兼容老版本，class 类组件并没有被移除，俩者都可以使用\n2. 有了 hooks 之后，不能在把函数成为无状态组件了，因为 hooks 为函数组件提供了状态\n3. hooks 只能在函数组件中使用\n\n#### Hooks 解决了什么问题\n\nHooks 的出现解决了俩个问题 1. 组件的状态逻辑复用 2.class 组件自身的问题\n\n1.  组件的逻辑复用\n    在 hooks 出现之前，react 先后尝试了 mixins 混入，HOC 高阶组件，render-props 等模式\n    但是都有各自的问题，比如 mixin 的数据来源不清晰，高阶组件的嵌套问题等等\n2.  class 组件自身的问题\n    class 组件就像一个厚重的‘战舰’ 一样，大而全，提供了很多东西，有不可忽视的学习成本，比如各种生命周期，this 指向问题等等，而我们更多时候需要的是一个轻快灵活的'快艇'\n\n#### useState\n\n##### 基础使用\n\n**作用**\n\n> useState 为函数组件提供状态（state）\n\n**使用步骤**\n\n1. 导入 useState 函数\n2. 调用 useState 函数，并传入状态的初始值\n3. 从 useState 函数的返回值中，拿到状态和修改状态的方法\n4. 在 JSX 中展示状态\n5. 调用修改状态的方法更新状态\n\n**代码实现**\n\n```JSX\nimport { useState } from 'react'\n\nfunction App() {\n  // 参数：状态初始值比如,传入 0 表示该状态的初始值为 0\n  // 返回值：数组,包含两个值：1 状态值（state） 2 修改该状态的函数（setState）\n  const [count, setCount] = useState(0)\n  return (\n    <button onClick={() => { setCount(count + 1) }}>{count}</button>\n  )\n}\nexport default App\n```\n\n##### 状态的读取和修改\n\n**读取状态**\n\n> 该方式提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用\n\n**修改状态**\n\n1. setCount 是一个函数，参数表示最新的状态值\n2. 调用该函数后，将使用新值替换旧值\n3. 修改状态后，由于状态发生变化，会引起视图变化\n\n**注意事项**\n\n1. 修改状态的时候，一定要使用新的状态替换旧的状态，不能直接修改旧的状态，尤其是引用类型\n\n##### 组件的更新过程\n\n函数组件使用 **useState hook** 后的执行过程，以及状态值的变化\n\n- 组件第一次渲染\n  a. 从头开始执行该组件中的代码逻辑\n  b. 调用 useState(0) 将传入的参数作为状态初始值，即：0\n  c. 渲染组件，此时，获取到的状态 count 值为： 0\n- 组件第二次渲染\n  a. 点击按钮，调用 setCount(count + 1) 修改状态，因为状态发生改变，所以，该组件会重新渲染\n  b. 组件重新渲染时，会再次执行该组件中的代码逻辑\n  c. 再次调用 useState(0)，此时 React 内部会拿到最新的状态值而非初始值，比如，该案例中最新的状态值为 1\n  d. 再次渲染组件，此时，获取到的状态 count 值为：1\n\n注意：**useState 的初始值(参数)只会在组件第一次渲染时生效**。也就是说，以后的每次渲染，useState 获取到都是最新的状态值，React 组件会记住每次最新的状态值\n\n```JSX\nimport { useState } from 'react'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  // 在这里可以进行打印测试\n  console.log(count)\n  return (\n    <button onClick={() => { setCount(count + 1) }}>{count}</button>\n  )\n}\nexport default App\n```\n\n##### 使用规则\n\n1. useState 函数可以执行多次，每次执行互相独立，每调用一次为函数组件提供一个状态\n2. useState 注意事项\n   a. 只能出现在函数组件中\n   b. 不能嵌套在 if/for/其它函数中（react 按照 hooks 的调用顺序识别每一个 hook）\n   ```JSX\n   let num = 1\n   function List(){\n     num++\n     if(num / 2 === 0){\n       const [name, setName] = useState('cp')\n     }\n     const [list,setList] = useState([])\n   }\n   // 俩个hook的顺序不是固定的，这是不可以的！！！\n   ```\n   c. 可以通过开发者工具查看 hooks 状态\n\n#### useEffect\n\n##### 理解函数副作用\n\n**什么是副作用**\n\n> 副作用是相对于主作用来说的，一个函数除了主作用，其他的作用就是副作用。对于 React 组件来说，**主作用就是根据数据（state/props）渲染 UI**，除此之外都是副作用（比如，手动修改 DOM）\n\n**常见的副作用**\n\n1. 数据请求 ajax 发送\n2. 手动修改 dom\n3. localstorage 操作\n\nuseEffect 函数的作用就是为 react 函数组件提供副作用处理的！\n\n##### 基础使用\n\n**作用**\n\n> 为 react 函数组件提供副作用处理\n\n**使用步骤**\n\n1. 导入 useEffect 函数\n2. 调用 useEffect 函数，并传入回调函数\n3. 在回调函数中编写副作用处理（dom 操作）\n4. 修改数据状态\n5. 检测副作用是否生效\n\n**代码实现**\n\n```JSX\nimport { useEffect, useState } from 'react'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  useEffect(()=>{\n    // dom操作\n    document.title = `当前已点击了${count}次`\n  })\n  return (\n    <button onClick={() => { setCount(count + 1) }}>{count}</button>\n  )\n}\n\nexport default App\n```\n\n##### 依赖项控制执行时机\n\n1. 不添加依赖项\n\n> 组件首次渲染执行一次，以及不管是哪个状态更改引起组件更新时都会重新执行\n>\n> 1.  组件初始渲染\n> 2.  组件更新 （不管是哪个状态引起的更新）\n\n2. 添加空数组\n\n> 组件只在首次渲染时执行一次\n\n3. 添加特定依赖项\n\n> 副作用函数在首次渲染时执行，在依赖项发生变化时重新执行\n\n```JSX\nfunction App() {\n    const [count, setCount] = useState(0)\n    const [name, setName] = useState('zs')\n\n    useEffect(() => {\n        console.log('副作用执行了')\n    }, [count])\n\n    return (\n        <>\n         <button onClick={() => { setCount(count + 1) }}>{count}</button>\n         <button onClick={() => { setName('cp') }}>{name}</button>\n        </>\n    )\n}\n```\n\n**注意事项**\nuseEffect 回调函数中用到的数据（比如，count）就是依赖数据，就应该出现在依赖项数组中，如果不添加依赖项就会有 bug 出现\n\n## Hooks 进阶\n\n### Hooks 进阶\n\n**使用场景**\n参数只会在组件的初始渲染中起作用，后续渲染时会被忽略。如果初始 state 需要通过计算才能获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用\n\n**语法**\n\n```JavaScript\nconst [name, setName] = useState(()=>{\n  // 编写计算逻辑    return '计算之后的初始值'\n})\n```\n\n**语法选择**\n\n1. 如果就是初始化一个普通的数据 直接使用 useState(普通数据) 即可\n2. 如果要初始化的数据无法直接得到需要通过计算才能获取到，使用 useState(()=>{})\n\n```JSX\nimport { useState } from 'react'\n\nfunction Counter(props) {\n  const [count, setCount] = useState(() => {\n    return props.count\n  })\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <>\n      <Counter count={10} />\n      <Counter count={20} />\n    </>\n  )\n}\n\nexport default App\n```\n\n### useEffect - 清理副作用\n\n**使用场景**\n在组件被销毁时，如果有些副作用操作需要被清理，就可以使用此语法，比如常见的定时器\n**语法及规则**\n\n```JavaScript\nuseEffect(() => {\n    console.log('副作用函数执行了')\n    // 副作用函数的执行时机为: 在下一次副作用函数执行之前执行\n    return () => {\n        console.log('清理副作用的函数执行了')\n        // 在这里写清理副作用的代码\n    }\n})\n```\n\n**定时器小案例**\n\n> 添加副作用函数前：组件虽然已经不显示了，但是定时器依旧在运行\n\n```JSX\nimport { useEffect, useState } from 'react'\nfunction Foo() {\n    useEffect(() => {\n        setInterval(() => {\n            console.log('副作用函数执行了')\n        }, 1000)\n    })\n    return <div>Foo</div>\n}\n\n\nfunction App() {\n    const [flag, setFlag] = useState(true)\n    return (\n        <>\n          <button onClick={() => setFlag(false)}>click</button>\n         {flag ? <Foo/> : null}\n        </>\n    )\n}\n\nexport default App\n```\n\n> 添加清理副作用函数后：一旦组件被销毁，定时器也被清理\n\n```JSX\nimport { useEffect, useState } from 'react'\n\nfunction Foo() {\n    useEffect(() => {\n        const timerId = setInterval(() => {\n            console.log('副作用函数执行了')\n        }, 1000)\n        // 添加清理副租用函数\n        return () => {\n            clearInterval(timerId)\n        }\n    })\n    return <div>Foo</div>\n}\nfunction App() {\n    const [flag, setFlag] = useState(true)\n    return (\n        <>\n          <button onClick={() => setFlag(false)}>click</button>\n         {flag ? <Foo/> : null}\n        </>\n    )\n}\n\nexport default App\n```\n\n### useEffect - 发送网络请求\n\n**使用场景**\n如何在 useEffect 中发送网络请求，并且封装同步 async await 操作\n\n**语法要求**\n不可以直接在 useEffect 的回调函数外层直接包裹 await ，因为异步会导致清理函数无法立即返回\n\n```JavaScript\nuseEffect(async ()=>{\n    const res = await axios.get('http://geek.itheima.net/v1_0/channels')\n    console.log(res)\n},[])\n```\n\n**正确写法**\n在内部单独定义一个函数，然后把这个函数包装成同步\n\n```JSX\nuseEffect(()=>{\n    async function fetchData(){\n       const res = await axios.get('https://api.inews.qq.com/newsqa/v1/query/inner/publish/modules/list?modules=statisGradeCityDetail,diseaseh5Shelf')                            console.log(res)\n    }\n},[])\n```\n\n### useRef\n\n**使用场景**\n\n> 在函数组件中获取真实的 dom 元素对象或者是组件对象\n\n**使用步骤**\n\n1. 导入 useRef 函数\n2. 执行 useRef 函数并传入 null，返回值为一个对象 内部有一个 current 属性存放拿到的 dom 对象（组件实例）\n3. 通过 ref 绑定 要获取的元素或者组件\n\n**获取 dom**\n\n```JSX\nimport { useEffect, useRef } from 'react'\nfunction App() {\n    const h1Ref = useRef(null)\n    useEffect(() => {\n        console.log(h1Ref)\n    },[])\n    return (\n        <div>\n            <h1 ref={ h1Ref }>this is h1</h1>\n        </div>\n    )\n}\nexport default App\n```\n\n**获取组件实例**\n\n> 函数组件没有实例，不能使用 ref 获取，如果想获取组件实例，必须是类组件\n\n```JSX Foo.jsx\nclass Foo extends React.Component {\n    sayHi = () => {\n        console.log('say hi')\n    }\n    render(){\n        return <div>Foo</div>\n    }\n}\n\nexport default Foo\n```\n\n```JSX App.jsx\nimport { useEffect, useRef } from 'react'\nimport Foo from './Foo'\nfunction App() {\n    const h1Foo = useRef(null)\n    useEffect(() => {\n        console.log(h1Foo)\n    }, [])\n    return (\n        <div> <Foo ref={ h1Foo } /></div>\n    )\n}\nexport default App\n```\n\n### useContext\n\n**实现步骤**\n\n1. 使用 createContext 创建 Context 对象\n2. 在顶层组件通过 Provider 提供数据\n3. 在底层组件通过 useContext 函数获取数据\n\n```JSX\nimport { createContext, useContext } from 'react'\n// 创建Context对象\nconst Context = createContext()\n\nfunction Foo() {\n    return <div>Foo <Bar/></div>\n}\n\nfunction Bar() {\n    // 底层组件通过useContext函数获取数据\n    const name = useContext(Context)\n    return <div>Bar {name}</div>\n}\n\nfunction App() {\n    return (\n        // 顶层组件通过Provider 提供数据\n        <Context.Provider value={'this is name'}>\n            <div><Foo/></div>\n        </Context.Provider>\n    )\n}\n\nexport default App\n```\n","slug":"react-base","published":1,"_id":"cl68qk8wg00066qjcgl77134l","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"React-介绍\"><a href=\"#React-介绍\" class=\"headerlink\" title=\"React 介绍\"></a>React 介绍</h2><h3 id=\"React-是什么\"><a href=\"#React-是什么\" class=\"headerlink\" title=\"React 是什么\"></a>React 是什么</h3><blockquote>\n<p>一个专注于构建用户界面的 JavaScript 库，和 vue 和 angular 并称前端三大框架，不夸张的说，react 引领了很多新思想，世界范围内是最流行的 js 前端框架，最近发布了 18 版本，加入了很多新特性</p>\n</blockquote>\n<h3 id=\"React-有什么特点\"><a href=\"#React-有什么特点\" class=\"headerlink\" title=\"React 有什么特点\"></a>React 有什么特点</h3><h4 id=\"声明式-UI（JSX）\"><a href=\"#声明式-UI（JSX）\" class=\"headerlink\" title=\"声明式 UI（JSX）\"></a>声明式 UI（JSX）</h4><blockquote>\n<p>写 UI 就和写普通的 HTML 一样，抛弃命令式的繁琐实现</p>\n</blockquote>\n<h4 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h4><blockquote>\n<p>组件是 react 中最重要的内容，组件可以通过搭积木的方式拼成一个完整的页面，通过组件的抽象可以增加复用能力和提高可维护性</p>\n</blockquote>\n<h4 id=\"跨平台\"><a href=\"#跨平台\" class=\"headerlink\" title=\"跨平台\"></a>跨平台</h4><blockquote>\n<p>react 既可以开发 web 应用也可以使用同样的语法开发原生应用（react-native），比如安卓和 ios 应用，甚至可以使用 react 开发 VR 应用，想象力空间十足，react 更像是一个 元框架 为各种领域赋能</p>\n</blockquote>\n<h2 id=\"环境初始化\"><a href=\"#环境初始化\" class=\"headerlink\" title=\"环境初始化\"></a>环境初始化</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app react-basic</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSX-基础\"><a href=\"#JSX-基础\" class=\"headerlink\" title=\"JSX 基础\"></a>JSX 基础</h2><h3 id=\"JSX-介绍\"><a href=\"#JSX-介绍\" class=\"headerlink\" title=\"JSX 介绍\"></a>JSX 介绍</h3><p>概念：JSX 是 JavaScript XML（HTML）的缩写，表示在 JS 代码中书写 HTML 结构<br>作用：在 React 中创建 HTML 结构（页面 UI 结构）<br>优势：</p>\n<ol>\n<li>采用类似于 HTML 的语法，降低学习成本，会 HTML 就会 JSX</li>\n<li>充分利用 JS 自身的可编程能力创建 HTML 结构</li>\n</ol>\n<p>注意：JSX 并不是标准的 JS 语法，是 JS 的语法扩展，浏览器默认是不识别的，脚手架中内置的 @babel/plugin-transform-react-jsx 包，用来解析该语法<br><img src=\"https://img.gejiba.com/images/896dcceeeb4dbc9c4c49f4007c5d9139.png\" alt=\"896dcceeeb4dbc9c4c49f4007c5d9139.png\"></p>\n<h3 id=\"JSX-中使用-js-表达式\"><a href=\"#JSX-中使用-js-表达式\" class=\"headerlink\" title=\"JSX 中使用 js 表达式\"></a>JSX 中使用 js 表达式</h3><h4 id=\"语法以错误检查调试等\"><a href=\"#语法以错误检查调试等\" class=\"headerlink\" title=\"语法以错误检查调试等\"></a>语法以错误检查调试等</h4><p><code>&#123; JS表达式 &#125;</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">&lt;h1&gt;&#123;name&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"可以使用的表达式\"><a href=\"#可以使用的表达式\" class=\"headerlink\" title=\"可以使用的表达式\"></a>可以使用的表达式</h4><ol>\n<li>字符串、数值、布尔值、null、undefined、object（ [] / {} ）</li>\n<li>1 + 2、’123abc’.split(‘’)、[‘a’, ‘b’, ‘c’].join(‘-‘)</li>\n<li>fn()</li>\n</ol>\n<h4 id=\"特别注意\"><a href=\"#特别注意\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h4><p>if 语句/ switch-case 语句/ 变量声明语句，这些叫做语句，不是表达式，不能出现在 {} 中！！</p>\n<h3 id=\"JSX-列表渲染\"><a href=\"#JSX-列表渲染\" class=\"headerlink\" title=\"JSX 列表渲染\"></a>JSX 列表渲染</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来个列表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> songs = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘备&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;关羽&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张飞&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;赵云&#x27;</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          songs.map(item =&gt; <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：需要为遍历项添加 key 属性</p>\n<ol>\n<li>key 在 HTML 结构中是看不到的，是 React 内部用来进行性能优化时使用</li>\n<li>key 在当前列表中要唯一的字符串或者数值（String/Number）</li>\n<li>如果列表中有像 id 这种的唯一值，就用 id 来作为 key 值</li>\n<li>如果列表中没有像 id 这种的唯一值，就可以使用 index（下标）来作为 key 值</li>\n</ol>\n<h3 id=\"JSX-条件渲染\"><a href=\"#JSX-条件渲染\" class=\"headerlink\" title=\"JSX 条件渲染\"></a>JSX 条件渲染</h3><p><strong>作用</strong>：根据是否满足条件生成 HTML 结构，比如 Loading 效果<br><strong>实现</strong>：可以使用 三元运算符 或 逻辑与(&amp;&amp;)运算符</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来个布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 条件渲染字符串 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;flag ? &#x27;react真有趣&#x27; : &#x27;vue真有趣&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 条件渲染标签/组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;flag ? <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>this is span<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> : null&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSX-样式处理\"><a href=\"#JSX-样式处理\" class=\"headerlink\" title=\"JSX 样式处理\"></a>JSX 样式处理</h3><ul>\n<li>行内样式 - style</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>this is a div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>行内样式 - style - 更优写法</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> styleObj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>:red</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">styleObj</span> &#125;&gt;</span>this is a div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类名 - className（推荐）</li>\n</ul>\n<figure class=\"highlight css\"><figcaption><span>style.css</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类名 - className - 动态类名控制</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> showTitle = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">showTitle</span> ? &#x27;<span class=\"attr\">title</span>&#x27; <span class=\"attr\">:</span> &#x27;&#x27;&#125;&gt;</span>this is a div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSX-注意事项\"><a href=\"#JSX-注意事项\" class=\"headerlink\" title=\"JSX 注意事项\"></a>JSX 注意事项</h3><ol>\n<li>JSX 必须有一个根节点，如果没有根节点，可以使用&lt;&gt;&lt;/&gt;（幽灵节点）替代</li>\n<li>所有标签必须形成闭合，成对闭合或者自闭合都可以</li>\n<li>JSX 中的语法更加贴近 JS 语法，属性名采用驼峰命名法 class -&gt; className for -&gt; htmlFor</li>\n<li>JSX 支持多行（换行），如果需要换行，需使用() 包裹，防止 bug 出现</li>\n</ol>\n<h2 id=\"React-组件基础\"><a href=\"#React-组件基础\" class=\"headerlink\" title=\"React 组件基础\"></a>React 组件基础</h2><h3 id=\"组件概念\"><a href=\"#组件概念\" class=\"headerlink\" title=\"组件概念\"></a>组件概念</h3><p>组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。<br><img src=\"https://img.gejiba.com/images/a5d4800b0937dda52aad91d7cab719e0.png\" alt=\"a5d4800b0937dda52aad91d7cab719e0.png\"></p>\n<h3 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h3><p>使用 JS 的函数（或箭头函数）创建的组件，就叫做函数组件<br>组件定义与渲染</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义函数组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloFn</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是我的第一个函数组件!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义类组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 渲染函数组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">HelloFn</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">HelloFn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HelloFn</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>约定说明</strong></p>\n<ol>\n<li>组件的名称必须首字母大写，react 内部会根据这个来判断是组件还是普通的 HTML 标签</li>\n<li>函数组件必须有返回值，表示该组件的 UI 结构；如果不需要渲染任何内容，则返回 null</li>\n<li>组件就像 HTML 标签一样可以被渲染到页面中。组件表示的是一段结构内容，对于函数组件来说，渲染的内容是函数的返回值就是对应的内容</li>\n<li>使用函数名称作为组件标签名称，可以成对出现也可以自闭合</li>\n</ol>\n<h3 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h3><p>使用 ES6 的 class 创建的组件，叫做类（class）组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入React</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义类组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是我的第一个类组件!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 渲染类组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">HelloC</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">HelloC</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HelloC</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>约定说明</strong></p>\n<ol>\n<li>类名称也必须以大写字母开头</li>\n<li>类组件应该继承 React.Component 父类，从而使用父类中提供的方法或属性</li>\n<li>类组件必须提供 render 方法 render 方法必须有返回值，表示该组件的 UI 结构</li>\n</ol>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><h4 id=\"1-如何绑定事件\"><a href=\"#1-如何绑定事件\" class=\"headerlink\" title=\"1. 如何绑定事件\"></a>1. 如何绑定事件</h4><ul>\n<li>语法<br>on + 事件名称 = { 事件处理程序 } ，比如：<code>&lt;div onClick=&#123;()=&gt;&#123;&#125;&#125;&gt;&lt;/div&gt;</code></li>\n<li>注意点<br>react 事件采用驼峰命名法，比如：<code>onMouseEnter</code>、<code>onFocus</code></li>\n<li>样例</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloFn</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义事件回调函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;事件被触发了&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 绑定事件</span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;clickHandler&#125;</span>&gt;</span>click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义事件回调函数</span></span><br><span class=\"line\">  clickHandler = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;事件被触发了&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 绑定事件</span></span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.clickHandler&#125;</span>&gt;</span>click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取事件对象\"><a href=\"#获取事件对象\" class=\"headerlink\" title=\"获取事件对象\"></a>获取事件对象</h4><ul>\n<li>通过事件处理程序的参数获取事件对象 e</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloFn</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义事件回调函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;事件被触发了&#x27;</span>, e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 绑定事件</span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.baidu.com/&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;clickHandler&#125;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件状态\"><a href=\"#组件状态\" class=\"headerlink\" title=\"组件状态\"></a>组件状态</h3><blockquote>\n<p><strong>前提</strong>：在 react hook 出来之前，函数式组件是没有自己的状态的</p>\n</blockquote>\n<p><img src=\"https://img.gejiba.com/images/2b236ba8ae6567bbf8ff35cd434287b0.png\" alt=\"2b236ba8ae6567bbf8ff35cd434287b0.png\"></p>\n<h4 id=\"初始化状态\"><a href=\"#初始化状态\" class=\"headerlink\" title=\"初始化状态\"></a>初始化状态</h4><ul>\n<li>通过 class 的实例属性 state 来初始化</li>\n<li>state 的值是一个对象结构，表示一个组件可以有多个数据状态</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化状态</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>计数器<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取状态\"><a href=\"#读取状态\" class=\"headerlink\" title=\"读取状态\"></a>读取状态</h4><ul>\n<li>通过 this.state 来获取状态</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化状态</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取状态</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>计数器&#123;this.state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改状态\"><a href=\"#修改状态\" class=\"headerlink\" title=\"修改状态\"></a>修改状态</h3><ul>\n<li>语法<br>this.setState({ 要修改的部分数据 })</li>\n<li>setState 方法作用<br>a. 修改 state 中的数据状态<br>b. 更新 UI</li>\n<li>思想<br>数据驱动视图，也就是只要修改数据状态，那么页面就会自动刷新，无需手动操作 dom</li>\n<li>注意事项<br><strong>不要直接修改 state 中的值，必须通过 setState 方法进行修改</strong></li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义数据</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 定义修改数据的方法</span></span><br><span class=\"line\">  setCount = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 使用数据 并绑定事件</span></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.setCount&#125;</span>&gt;</span>&#123;this.state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this-问题说明\"><a href=\"#this-问题说明\" class=\"headerlink\" title=\"this 问题说明\"></a>this 问题说明</h3><p><img src=\"https://img.gejiba.com/images/c0effcdb7343c55aa42751b43255d24c.png\" alt=\"c0effcdb7343c55aa42751b43255d24c.png\"></p>\n<p>随着 js 标准的发展，主流的写法已经变成了 class fields，无需考虑太多 this 问题</p>\n<h3 id=\"React-的状态不可变\"><a href=\"#React-的状态不可变\" class=\"headerlink\" title=\"React 的状态不可变\"></a>React 的状态不可变</h3><p><strong>概念</strong>：不要直接修改状态的值，而是基于当前状态创建新的状态值</p>\n<ol>\n<li>错误的直接修改</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state = &#123;</span><br><span class=\"line\">  count : <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">list</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  <span class=\"attr\">person</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">name</span>:<span class=\"string\">&#x27;jack&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 直接修改简单类型Number</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">++<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接修改数组</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">list</span>.<span class=\"title function_\">spice</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接修改对象</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">person</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;rose&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>基于当前状态创建新值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">list</span>: [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">list</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    <span class=\"attr\">person</span>: &#123;</span><br><span class=\"line\">       ...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">person</span>,</span><br><span class=\"line\">       <span class=\"comment\">// 覆盖原来的属性 就可以达到修改对象中属性的目的</span></span><br><span class=\"line\">       <span class=\"attr\">name</span>: <span class=\"string\">&#x27;rose&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表单处理\"><a href=\"#表单处理\" class=\"headerlink\" title=\"表单处理\"></a>表单处理</h3><p>使用 React 处理表单元素，一般有俩种方式：</p>\n<ol>\n<li>受控组件 （推荐使用）</li>\n<li>非受控组件</li>\n</ol>\n<h4 id=\"受控表单组件\"><a href=\"#受控表单组件\" class=\"headerlink\" title=\"受控表单组件\"></a>受控表单组件</h4><blockquote>\n<p>什么是受控组件？ input 框自己的状态被 React 组件状态控制<br>React 组件的状态的地方是在 state 中，input 表单元素也有自己的状态是在 value 中，React 将 state 与表单元素的值（value）绑定到一起，由 state 的值来控制表单元素的值，从而保证单一数据源特性</p>\n</blockquote>\n<p><strong>实现步骤</strong></p>\n<p>以获取文本框的值为例，受控组件的使用步骤如下：</p>\n<ol>\n<li>在组件的 state 中声明一个组件的状态数据</li>\n<li>将状态数据设置为 input 标签元素的 value 属性的值</li>\n<li>为 input 添加 change 事件，在事件处理程序中，通过事件对象 e 获取到当前文本框的值（即用户当前输入的值）</li>\n<li>调用 setState 方法，将文本框的值作为 state 状态的最新值</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InputComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 声明组件状态</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is message&#x27;</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 声明事件回调函数</span></span><br><span class=\"line\">  changeHandler = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">message</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 绑定value 绑定事件*/&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.message&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.changeHandler&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">InputComponent</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"非受控表单组件\"><a href=\"#非受控表单组件\" class=\"headerlink\" title=\"非受控表单组件\"></a>非受控表单组件</h4><blockquote>\n<p>什么是非受控组件？<br>非受控组件就是通过手动操作 dom 的方式获取文本框的值，文本框的状态不受 react 组件的 state 中的状态控制，直接通过原生 dom 获取输入框的值</p>\n</blockquote>\n<p><strong>实现步骤</strong></p>\n<ol>\n<li>导入 createRef 函数</li>\n<li>调用 createRef 函数，创建一个 ref 对象，存储到名为 msgRef 的实例属性中</li>\n<li>为 input 添加 ref 属性，值为 msgRef</li>\n<li>在按钮的事件处理程序中，通过 msgRef.current 即可拿到 input 对应的 dom 元素，而其中 msgRef.current.value 拿到的就是文本框的值</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InputComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用createRef产生一个存放dom的对象容器</span></span><br><span class=\"line\">  msgRef = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  changeHandler = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">msgRef</span>.<span class=\"property\">current</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* ref绑定 获取真实dom */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.msgRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.changeHandler&#125;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">InputComponent</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"React-组件通信\"><a href=\"#React-组件通信\" class=\"headerlink\" title=\"React 组件通信\"></a>React 组件通信</h2><h3 id=\"组件通信的意义\"><a href=\"#组件通信的意义\" class=\"headerlink\" title=\"组件通信的意义\"></a>组件通信的意义</h3><p>组件是独立且封闭的单元，默认情况下组件<strong>只能使用自己的数据（state）</strong><br>组件化开发的过程中，完整的功能会拆分多个组件，在这个过程中不可避免的需要互相传递一些数据<br>为了能让各组件之间可以进行互相沟通，数据传递，这个过程就是组件通信</p>\n<ol>\n<li>父子关系 - 最重要的</li>\n<li>兄弟关系 - 自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信</li>\n<li>其它关系 - mobx / redux / 基于 hook 的方案</li>\n</ol>\n<h3 id=\"父传子实现\"><a href=\"#父传子实现\" class=\"headerlink\" title=\"父传子实现\"></a>父传子实现</h3><p><strong>实现步骤</strong></p>\n<ol>\n<li> 父组件提供要传递的数据 - state</li>\n<li> 给子组件标签添加属性值为 state 中的数据</li>\n<li>子组件中通过 props 接收父组件中传过来的数据<br> a. 类组件使用 this.props 获取 props 对象<br> b. 函数式组件直接通过参数获取 props 对象</li>\n</ol>\n<p><img src=\"https://img.gejiba.com/images/efb04fab8891b6507a321a9706b0b1c1.png\" alt=\"efb04fab8891b6507a321a9706b0b1c1.png\"></p>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数式子组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FSon</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      子组件1</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;props.msg&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类子组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CSon</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        子组件2</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;this.props.msg&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is a message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>父组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">FSon</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CSon</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"props-说明\"><a href=\"#props-说明\" class=\"headerlink\" title=\"props 说明\"></a>props 说明</h3><h4 id=\"props-是只读对象（readonly）\"><a href=\"#props-是只读对象（readonly）\" class=\"headerlink\" title=\"props 是只读对象（readonly）\"></a>props 是只读对象（readonly）</h4><p>根据单项数据流的要求，子组件只能读取 props 中的数据，不能进行修改</p>\n<h4 id=\"props-可以传递任意数据\"><a href=\"#props-可以传递任意数据\" class=\"headerlink\" title=\"props 可以传递任意数据\"></a>props 可以传递任意数据</h4><p>数字、字符串、布尔值、数组、对象、函数、JSX</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is a message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>父组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">FSon</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">age</span>=<span class=\"string\">&#123;20&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">isMan</span>=<span class=\"string\">&#123;true&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">cb</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; console.log(1) &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          child=&#123;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>this is child<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CSon</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img.gejiba.com/images/b60880bb7a5ce85b074e0ff9784acc8a.png\" alt=\"b60880bb7a5ce85b074e0ff9784acc8a.png\"></p>\n<h3 id=\"子传父实现\"><a href=\"#子传父实现\" class=\"headerlink\" title=\"子传父实现\"></a>子传父实现</h3><p><strong>口诀</strong>： 父组件给子组件传递回调函数，子组件调用<br><strong>实现步骤</strong></p>\n<ol>\n<li>父组件提供一个回调函数 - 用于接收数据</li>\n<li>将函数作为属性的值，传给子组件</li>\n<li>子组件通过 props 调用 回调函数</li>\n<li>将子组件中的数据作为参数传递给回调函数</li>\n</ol>\n<p><img src=\"https://img.gejiba.com/images/7e6f7f4d3ea9fc7b56ca52d0240603f3.png\" alt=\"7e6f7f4d3ea9fc7b56ca52d0240603f3.png\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用父组件传递过来的回调函数 并注入参数</span></span><br><span class=\"line\">    props.<span class=\"title function_\">changeMsg</span>(<span class=\"string\">&#x27;this is newMessage&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;props.msg&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>change<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is a message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 提供回调函数</span></span><br><span class=\"line\">  changeMessage = <span class=\"function\">(<span class=\"params\">newMsg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;子组件传过来的数据:&#x27;</span>,newMsg)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: newMsg</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>父组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Son</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          // 传递给子组件</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeMsg</span>=<span class=\"string\">&#123;this.changeMessage&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"兄弟组件通信\"><a href=\"#兄弟组件通信\" class=\"headerlink\" title=\"兄弟组件通信\"></a>兄弟组件通信</h3><p><strong>核心思路</strong>： 通过状态提升机制，利用共同的父组件实现兄弟通信<br><img src=\"https://img.gejiba.com/images/bc10d3653e637134a16cc5cef364cabe.png\" alt=\"bc10d3653e637134a16cc5cef364cabe.png\"></p>\n<p><strong>实现步骤</strong></p>\n<ol>\n<li><p>将共享状态提升到最近的公共父组件中，由公共父组件管理这个状态</p>\n<ul>\n<li>提供共享状态</li>\n<li>提供操作共享状态的方法</li>\n</ul>\n</li>\n<li><p>要接收数据状态的子组件通过 props 接收数据</p>\n</li>\n<li><p>要传递数据状态的子组件通过 props 接收方法，调用方法传递数据</p>\n</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件A</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonA</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      SonA</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;props.msg&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件B</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonB</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      SonB</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> props.changeMsg(&#x27;new message&#x27;)&#125;&gt;changeMsg<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 父组件提供状态数据</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is a message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 父组件提供修改数据的方法</span></span><br><span class=\"line\">  changeMsg = <span class=\"function\">(<span class=\"params\">newMsg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: newMsg</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 接收数据的组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonA</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 修改数据的组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonB</span> <span class=\"attr\">changeMsg</span>=<span class=\"string\">&#123;this.changeMsg&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"跨组件通信-Context\"><a href=\"#跨组件通信-Context\" class=\"headerlink\" title=\"跨组件通信 Context\"></a>跨组件通信 Context</h3><p><img src=\"https://img.gejiba.com/images/9decc7bd1f6bbd7b065439fcb8317a50.png\" alt=\"9decc7bd1f6bbd7b065439fcb8317a50.png\"></p>\n<blockquote>\n<p>上图是一个 react 形成的嵌套组件树，如果我们想从 App 组件向任意一个下层组件传递数据，该怎么办呢？目前我们能采取的方式就是一层一层的 props 往下传，显然很繁琐<br>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法</p>\n</blockquote>\n<p><strong>实现步骤</strong></p>\n<ol>\n<li>创建 Context 对象 导出 Provider 和 Consumer 对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Provider</span>, <span class=\"title class_\">Consumer</span> &#125; = <span class=\"title function_\">createContext</span>()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 Provider 包裹根组件提供数据</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Provider</span> value=&#123;<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">message</span>&#125;&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* 根组件 */</span>&#125;</span><br><span class=\"line\">&lt;/<span class=\"title class_\">Provider</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li> 需要用到数据的组件使用 Consumer 包裹获取数据</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Consumer</span> &gt;</span><br><span class=\"line\">    &#123;<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"comment\">/* 基于 context 值进行渲染*/</span>&#125;</span><br><span class=\"line\">&lt;/<span class=\"title class_\">Consumer</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createContext &#125;  <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建Context对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Provider</span>, <span class=\"title class_\">Consumer</span> &#125; = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 消费数据</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ComC</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Consumer</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;value =&gt; <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Consumer</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ComA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ComC</span>/&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 提供数据</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is message&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.message&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">ComA</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"React-组件进阶\"><a href=\"#React-组件进阶\" class=\"headerlink\" title=\"React 组件进阶\"></a>React 组件进阶</h2><h3 id=\"children-属性\"><a href=\"#children-属性\" class=\"headerlink\" title=\"children 属性\"></a>children 属性</h3><h4 id=\"children-属性是什么\"><a href=\"#children-属性是什么\" class=\"headerlink\" title=\"children 属性是什么\"></a>children 属性是什么</h4><blockquote>\n<p>表示该组件的子节点，只要组件内部有子节点，props 中就有该属性</p>\n</blockquote>\n<h4 id=\"children-可以是什么\"><a href=\"#children-可以是什么\" class=\"headerlink\" title=\"children 可以是什么\"></a>children 可以是什么</h4><ol>\n<li>普通文本</li>\n<li>普通标签元素</li>\n<li>函数</li>\n<li>JSX</li>\n</ol>\n<h3 id=\"props-校验-场景和使用\"><a href=\"#props-校验-场景和使用\" class=\"headerlink\" title=\"props 校验-场景和使用\"></a>props 校验-场景和使用</h3><blockquote>\n<p>对于组件来说，props 是由外部传入的，我们其实无法保证组件使用者传入了什么格式的数据，如果传入的数据格式不对，就有可能会导致组件内部错误，有一个点很关键 - 组件的使用者可能报错了也不知道为什么，看下面的例子</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">List</span> = props =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = props.<span class=\"property\">colors</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lis = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;lis&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"title class_\">List</span> colors=&#123;<span class=\"number\">20</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>面对这样的问题，如何解决？ <strong>props 校验</strong></p>\n<p><strong>实现步骤</strong></p>\n<ol>\n<li>安装属性校验包： <code>npm i prop-types</code></li>\n<li>导入 prop-types 包</li>\n<li>使用 组件名.propTypes = {} 给组件添加校验规则</li>\n</ol>\n<p><strong>核心代码</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">List</span> = props =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = props.<span class=\"property\">colors</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lis = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;lis&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">List</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">colors</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">array</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"props-校验-规则说明\"><a href=\"#props-校验-规则说明\" class=\"headerlink\" title=\"props 校验-规则说明\"></a>props 校验-规则说明</h3><h4 id=\"四种常见结构\"><a href=\"#四种常见结构\" class=\"headerlink\" title=\"四种常见结构\"></a>四种常见结构</h4><ol>\n<li>常见类型：array、bool、func、number、object、string</li>\n<li>React 元素类型：element</li>\n<li>必填项：isRequired</li>\n<li>特定的结构对象：shape({})</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常见类型</span></span><br><span class=\"line\"><span class=\"attr\">optionalFunc</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>,</span><br><span class=\"line\"><span class=\"comment\">// 必填 只需要在类型后面串联一个isRequired</span></span><br><span class=\"line\"><span class=\"attr\">requiredFunc</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\"><span class=\"comment\">// 特定结构的对象</span></span><br><span class=\"line\"><span class=\"attr\">optionalObjectWithShape</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"title function_\">shape</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">color</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">string</span>,</span><br><span class=\"line\">\t<span class=\"attr\">fontSize</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">number</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html\">官网文档更多阅读</a></p>\n<h3 id=\"props-校验-规则说明-1\"><a href=\"#props-校验-规则说明-1\" class=\"headerlink\" title=\"props 校验-规则说明\"></a>props 校验-规则说明</h3><blockquote>\n<p>通过 <code>defaultProps</code> 可以给组件的 props 设置默认值，在未传入 props 的时候生效</p>\n</blockquote>\n<h4 id=\"函数组件-1\"><a href=\"#函数组件-1\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h4><p>直接使用函数参数默认值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">List</span>(<span class=\"params\">&#123;pageSize = <span class=\"number\">10</span>&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      此处展示props的默认值：&#123; pageSize &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不传入pageSize属性</span></span><br><span class=\"line\">&lt;<span class=\"title class_\">List</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类组件-1\"><a href=\"#类组件-1\" class=\"headerlink\" title=\"类组件\"></a>类组件</h4><p>使用类静态属性声明默认值，<code>static defaultProps = &#123;&#125;</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">List</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        此处展示props的默认值：&#123;this.props.pageSize&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">List</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生命周期-概述\"><a href=\"#生命周期-概述\" class=\"headerlink\" title=\"生命周期 - 概述\"></a>生命周期 - 概述</h3><blockquote>\n<p>组件的生命周期是指组件从被创建到挂载到页面中运行起来，再到组件不用时卸载的过程，注意，只有类组件才有生命周期（类组件 实例化 函数组件 不需要实例化）<br><img src=\"https://img.gejiba.com/images/6bcfce01b8fec23ca114b6c4fbac6a16.png\" alt=\"6bcfce01b8fec23ca114b6c4fbac6a16.png\"></p>\n</blockquote>\n<p><a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p>\n<h3 id=\"生命周期-挂载阶段\"><a href=\"#生命周期-挂载阶段\" class=\"headerlink\" title=\"生命周期 - 挂载阶段\"></a>生命周期 - 挂载阶段</h3><p><img src=\"https://img.gejiba.com/images/1fd62b6f68705bf5d1d562b5d764153c.png\" alt=\"1fd62b6f68705bf5d1d562b5d764153c.png\"></p>\n<table>\n<thead>\n<tr>\n<th>钩子函数</th>\n<th>触发时机</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>constructor</td>\n<td>constructor 创建组件时，最先执行，初始化的时候只执行一次</td>\n<td>1. 初始化 state 2. 创建 Ref 3. 使用 bind 解决 this 指向问题等</td>\n</tr>\n<tr>\n<td>render</td>\n<td>每次组件渲染都会触发</td>\n<td>渲染 UI（注意： 不能在里面调用 setState() ）</td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>组件挂载（完成 DOM 渲染）后执行，初始化的时候执行一次</td>\n<td>1. 发送网络请求 2.DOM 操作</td>\n</tr>\n</tbody></table>\n<h3 id=\"生命周期-更新阶段\"><a href=\"#生命周期-更新阶段\" class=\"headerlink\" title=\"生命周期 - 更新阶段\"></a>生命周期 - 更新阶段</h3><p><img src=\"https://img.gejiba.com/images/480575c7388d6aab5d3405a55eb3a837.png\" alt=\"480575c7388d6aab5d3405a55eb3a837.png\"></p>\n<table>\n<thead>\n<tr>\n<th>钩子函数</th>\n<th>触发时机</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>render</td>\n<td>每次组件渲染都会触发</td>\n<td>每次组件渲染都会触发 渲染 UI（与 挂载阶段 是同一个 render）</td>\n</tr>\n<tr>\n<td>componentDidUpdate</td>\n<td>componentDidUpdate 组件更新后（DOM 渲染完毕）</td>\n<td>DOM 操作，可以获取到更新后的 DOM 内容，不要直接调用 setState</td>\n</tr>\n</tbody></table>\n<h3 id=\"生命周期-卸载阶段\"><a href=\"#生命周期-卸载阶段\" class=\"headerlink\" title=\"生命周期 - 卸载阶段\"></a>生命周期 - 卸载阶段</h3><table>\n<thead>\n<tr>\n<th>钩子函数</th>\n<th>触发时机</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>componentWillUnmount</td>\n<td>组件卸载（从页面中消失）</td>\n<td>组件卸载（从页面中消失） 执行清理工作（比如：清理定时器等）</td>\n</tr>\n</tbody></table>\n<h2 id=\"Hooks-基础\"><a href=\"#Hooks-基础\" class=\"headerlink\" title=\"Hooks 基础\"></a>Hooks 基础</h2><h3 id=\"Hooks-概念理解\"><a href=\"#Hooks-概念理解\" class=\"headerlink\" title=\"Hooks 概念理解\"></a>Hooks 概念理解</h3><h4 id=\"什么是-hooks\"><a href=\"#什么是-hooks\" class=\"headerlink\" title=\"什么是 hooks\"></a>什么是 hooks</h4><blockquote>\n<p>Hooks 的本质：一套能够使函数组件更强大，更灵活的“钩子”</p>\n</blockquote>\n<p>React 体系里组件分为 类组件 和 函数组件<br>经过多年的实战，函数组件是一个更加匹配 React 的设计理念 UI = f(data)，也更有利于逻辑拆分与重用的组件表达形式，而先前的函数组件是不可以有自己的状态的，为了能让函数组件可以拥有自己的状态，所以从 react v16.8 开始，Hooks 应运而生</p>\n<p><strong>注意点</strong>：</p>\n<ol>\n<li>有了 hooks 之后，为了兼容老版本，class 类组件并没有被移除，俩者都可以使用</li>\n<li>有了 hooks 之后，不能在把函数成为无状态组件了，因为 hooks 为函数组件提供了状态</li>\n<li>hooks 只能在函数组件中使用</li>\n</ol>\n<h4 id=\"Hooks-解决了什么问题\"><a href=\"#Hooks-解决了什么问题\" class=\"headerlink\" title=\"Hooks 解决了什么问题\"></a>Hooks 解决了什么问题</h4><p>Hooks 的出现解决了俩个问题 1. 组件的状态逻辑复用 2.class 组件自身的问题</p>\n<ol>\n<li>组件的逻辑复用<br> 在 hooks 出现之前，react 先后尝试了 mixins 混入，HOC 高阶组件，render-props 等模式<br> 但是都有各自的问题，比如 mixin 的数据来源不清晰，高阶组件的嵌套问题等等</li>\n<li>class 组件自身的问题<br> class 组件就像一个厚重的‘战舰’ 一样，大而全，提供了很多东西，有不可忽视的学习成本，比如各种生命周期，this 指向问题等等，而我们更多时候需要的是一个轻快灵活的’快艇’</li>\n</ol>\n<h4 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h4><h5 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h5><p><strong>作用</strong></p>\n<blockquote>\n<p>useState 为函数组件提供状态（state）</p>\n</blockquote>\n<p><strong>使用步骤</strong></p>\n<ol>\n<li>导入 useState 函数</li>\n<li>调用 useState 函数，并传入状态的初始值</li>\n<li>从 useState 函数的返回值中，拿到状态和修改状态的方法</li>\n<li>在 JSX 中展示状态</li>\n<li>调用修改状态的方法更新状态</li>\n</ol>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参数：状态初始值比如,传入 0 表示该状态的初始值为 0</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回值：数组,包含两个值：1 状态值（state） 2 修改该状态的函数（setState）</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setCount(count + 1) &#125;&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"状态的读取和修改\"><a href=\"#状态的读取和修改\" class=\"headerlink\" title=\"状态的读取和修改\"></a>状态的读取和修改</h5><p><strong>读取状态</strong></p>\n<blockquote>\n<p>该方式提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用</p>\n</blockquote>\n<p><strong>修改状态</strong></p>\n<ol>\n<li>setCount 是一个函数，参数表示最新的状态值</li>\n<li>调用该函数后，将使用新值替换旧值</li>\n<li>修改状态后，由于状态发生变化，会引起视图变化</li>\n</ol>\n<p><strong>注意事项</strong></p>\n<ol>\n<li>修改状态的时候，一定要使用新的状态替换旧的状态，不能直接修改旧的状态，尤其是引用类型</li>\n</ol>\n<h5 id=\"组件的更新过程\"><a href=\"#组件的更新过程\" class=\"headerlink\" title=\"组件的更新过程\"></a>组件的更新过程</h5><p>函数组件使用 <strong>useState hook</strong> 后的执行过程，以及状态值的变化</p>\n<ul>\n<li>组件第一次渲染<br>a. 从头开始执行该组件中的代码逻辑<br>b. 调用 useState(0) 将传入的参数作为状态初始值，即：0<br>c. 渲染组件，此时，获取到的状态 count 值为： 0</li>\n<li>组件第二次渲染<br>a. 点击按钮，调用 setCount(count + 1) 修改状态，因为状态发生改变，所以，该组件会重新渲染<br>b. 组件重新渲染时，会再次执行该组件中的代码逻辑<br>c. 再次调用 useState(0)，此时 React 内部会拿到最新的状态值而非初始值，比如，该案例中最新的状态值为 1<br>d. 再次渲染组件，此时，获取到的状态 count 值为：1</li>\n</ul>\n<p>注意：<strong>useState 的初始值(参数)只会在组件第一次渲染时生效</strong>。也就是说，以后的每次渲染，useState 获取到都是最新的状态值，React 组件会记住每次最新的状态值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 在这里可以进行打印测试</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setCount(count + 1) &#125;&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用规则\"><a href=\"#使用规则\" class=\"headerlink\" title=\"使用规则\"></a>使用规则</h5><ol>\n<li>useState 函数可以执行多次，每次执行互相独立，每调用一次为函数组件提供一个状态</li>\n<li>useState 注意事项<br>a. 只能出现在函数组件中<br>b. 不能嵌套在 if/for/其它函数中（react 按照 hooks 的调用顺序识别每一个 hook）<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">List</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  num++</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(num / <span class=\"number\">2</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;cp&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [list,setList] = <span class=\"title function_\">useState</span>([])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 俩个hook的顺序不是固定的，这是不可以的！！！</span></span><br></pre></td></tr></table></figure>\nc. 可以通过开发者工具查看 hooks 状态</li>\n</ol>\n<h4 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h4><h5 id=\"理解函数副作用\"><a href=\"#理解函数副作用\" class=\"headerlink\" title=\"理解函数副作用\"></a>理解函数副作用</h5><p><strong>什么是副作用</strong></p>\n<blockquote>\n<p>副作用是相对于主作用来说的，一个函数除了主作用，其他的作用就是副作用。对于 React 组件来说，<strong>主作用就是根据数据（state/props）渲染 UI</strong>，除此之外都是副作用（比如，手动修改 DOM）</p>\n</blockquote>\n<p><strong>常见的副作用</strong></p>\n<ol>\n<li>数据请求 ajax 发送</li>\n<li>手动修改 dom</li>\n<li>localstorage 操作</li>\n</ol>\n<p>useEffect 函数的作用就是为 react 函数组件提供副作用处理的！</p>\n<h5 id=\"基础使用-1\"><a href=\"#基础使用-1\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h5><p><strong>作用</strong></p>\n<blockquote>\n<p>为 react 函数组件提供副作用处理</p>\n</blockquote>\n<p><strong>使用步骤</strong></p>\n<ol>\n<li>导入 useEffect 函数</li>\n<li>调用 useEffect 函数，并传入回调函数</li>\n<li>在回调函数中编写副作用处理（dom 操作）</li>\n<li>修改数据状态</li>\n<li>检测副作用是否生效</li>\n</ol>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dom操作</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">`当前已点击了<span class=\"subst\">$&#123;count&#125;</span>次`</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setCount(count + 1) &#125;&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"依赖项控制执行时机\"><a href=\"#依赖项控制执行时机\" class=\"headerlink\" title=\"依赖项控制执行时机\"></a>依赖项控制执行时机</h5><ol>\n<li>不添加依赖项</li>\n</ol>\n<blockquote>\n<p>组件首次渲染执行一次，以及不管是哪个状态更改引起组件更新时都会重新执行</p>\n<ol>\n<li> 组件初始渲染</li>\n<li> 组件更新 （不管是哪个状态引起的更新）</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>添加空数组</li>\n</ol>\n<blockquote>\n<p>组件只在首次渲染时执行一次</p>\n</blockquote>\n<ol start=\"3\">\n<li>添加特定依赖项</li>\n</ol>\n<blockquote>\n<p>副作用函数在首次渲染时执行，在依赖项发生变化时重新执行</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;zs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;副作用执行了&#x27;</span>)</span><br><span class=\"line\">    &#125;, [count])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setCount(count + 1) &#125;&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setName(&#x27;cp&#x27;) &#125;&#125;&gt;&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意事项</strong><br>useEffect 回调函数中用到的数据（比如，count）就是依赖数据，就应该出现在依赖项数组中，如果不添加依赖项就会有 bug 出现</p>\n<h2 id=\"Hooks-进阶\"><a href=\"#Hooks-进阶\" class=\"headerlink\" title=\"Hooks 进阶\"></a>Hooks 进阶</h2><h3 id=\"Hooks-进阶-1\"><a href=\"#Hooks-进阶-1\" class=\"headerlink\" title=\"Hooks 进阶\"></a>Hooks 进阶</h3><p><strong>使用场景</strong><br>参数只会在组件的初始渲染中起作用，后续渲染时会被忽略。如果初始 state 需要通过计算才能获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 编写计算逻辑    return &#x27;计算之后的初始值&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>语法选择</strong></p>\n<ol>\n<li>如果就是初始化一个普通的数据 直接使用 useState(普通数据) 即可</li>\n<li>如果要初始化的数据无法直接得到需要通过计算才能获取到，使用 useState(()=&gt;{})</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Counter</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> props.<span class=\"property\">count</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Counter</span> <span class=\"attr\">count</span>=<span class=\"string\">&#123;10&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Counter</span> <span class=\"attr\">count</span>=<span class=\"string\">&#123;20&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect-清理副作用\"><a href=\"#useEffect-清理副作用\" class=\"headerlink\" title=\"useEffect - 清理副作用\"></a>useEffect - 清理副作用</h3><p><strong>使用场景</strong><br>在组件被销毁时，如果有些副作用操作需要被清理，就可以使用此语法，比如常见的定时器<br><strong>语法及规则</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;副作用函数执行了&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 副作用函数的执行时机为: 在下一次副作用函数执行之前执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;清理副作用的函数执行了&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 在这里写清理副作用的代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>定时器小案例</strong></p>\n<blockquote>\n<p>添加副作用函数前：组件虽然已经不显示了，但是定时器依旧在运行</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;副作用函数执行了&#x27;</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setFlag(false)&#125;&gt;click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         &#123;flag ? <span class=\"tag\">&lt;<span class=\"name\">Foo</span>/&gt;</span> : null&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加清理副作用函数后：一旦组件被销毁，定时器也被清理</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> timerId = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;副作用函数执行了&#x27;</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 添加清理副租用函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(timerId)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setFlag(false)&#125;&gt;click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         &#123;flag ? <span class=\"tag\">&lt;<span class=\"name\">Foo</span>/&gt;</span> : null&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect-发送网络请求\"><a href=\"#useEffect-发送网络请求\" class=\"headerlink\" title=\"useEffect - 发送网络请求\"></a>useEffect - 发送网络请求</h3><p><strong>使用场景</strong><br>如何在 useEffect 中发送网络请求，并且封装同步 async await 操作</p>\n<p><strong>语法要求</strong><br>不可以直接在 useEffect 的回调函数外层直接包裹 await ，因为异步会导致清理函数无法立即返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://geek.itheima.net/v1_0/channels&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;,[])</span><br></pre></td></tr></table></figure>\n\n<p><strong>正确写法</strong><br>在内部单独定义一个函数，然后把这个函数包装成同步</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://api.inews.qq.com/newsqa/v1/query/inner/publish/modules/list?modules=statisGradeCityDetail,diseaseh5Shelf&#x27;</span>)                            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,[])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h3><p><strong>使用场景</strong></p>\n<blockquote>\n<p>在函数组件中获取真实的 dom 元素对象或者是组件对象</p>\n</blockquote>\n<p><strong>使用步骤</strong></p>\n<ol>\n<li>导入 useRef 函数</li>\n<li>执行 useRef 函数并传入 null，返回值为一个对象 内部有一个 current 属性存放拿到的 dom 对象（组件实例）</li>\n<li>通过 ref 绑定 要获取的元素或者组件</li>\n</ol>\n<p><strong>获取 dom</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> h1Ref = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(h1Ref)</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">h1Ref</span> &#125;&gt;</span>this is h1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>获取组件实例</strong></p>\n<blockquote>\n<p>函数组件没有实例，不能使用 ref 获取，如果想获取组件实例，必须是类组件</p>\n</blockquote>\n<figure class=\"highlight jsx\"><figcaption><span>Foo.jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    sayHi = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;say hi&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Foo</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><figcaption><span>App.jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Foo</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Foo&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> h1Foo = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(h1Foo)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">Foo</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">h1Foo</span> &#125; /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h3><p><strong>实现步骤</strong></p>\n<ol>\n<li>使用 createContext 创建 Context 对象</li>\n<li>在顶层组件通过 Provider 提供数据</li>\n<li>在底层组件通过 useContext 函数获取数据</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建Context对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Foo <span class=\"tag\">&lt;<span class=\"name\">Bar</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 底层组件通过useContext函数获取数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Bar &#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"comment\">// 顶层组件通过Provider 提供数据</span></span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">this</span> <span class=\"attr\">is</span> <span class=\"attr\">name</span>&#x27;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Foo</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":22275,"excerpt":"","more":"<h2 id=\"React-介绍\"><a href=\"#React-介绍\" class=\"headerlink\" title=\"React 介绍\"></a>React 介绍</h2><h3 id=\"React-是什么\"><a href=\"#React-是什么\" class=\"headerlink\" title=\"React 是什么\"></a>React 是什么</h3><blockquote>\n<p>一个专注于构建用户界面的 JavaScript 库，和 vue 和 angular 并称前端三大框架，不夸张的说，react 引领了很多新思想，世界范围内是最流行的 js 前端框架，最近发布了 18 版本，加入了很多新特性</p>\n</blockquote>\n<h3 id=\"React-有什么特点\"><a href=\"#React-有什么特点\" class=\"headerlink\" title=\"React 有什么特点\"></a>React 有什么特点</h3><h4 id=\"声明式-UI（JSX）\"><a href=\"#声明式-UI（JSX）\" class=\"headerlink\" title=\"声明式 UI（JSX）\"></a>声明式 UI（JSX）</h4><blockquote>\n<p>写 UI 就和写普通的 HTML 一样，抛弃命令式的繁琐实现</p>\n</blockquote>\n<h4 id=\"组件化\"><a href=\"#组件化\" class=\"headerlink\" title=\"组件化\"></a>组件化</h4><blockquote>\n<p>组件是 react 中最重要的内容，组件可以通过搭积木的方式拼成一个完整的页面，通过组件的抽象可以增加复用能力和提高可维护性</p>\n</blockquote>\n<h4 id=\"跨平台\"><a href=\"#跨平台\" class=\"headerlink\" title=\"跨平台\"></a>跨平台</h4><blockquote>\n<p>react 既可以开发 web 应用也可以使用同样的语法开发原生应用（react-native），比如安卓和 ios 应用，甚至可以使用 react 开发 VR 应用，想象力空间十足，react 更像是一个 元框架 为各种领域赋能</p>\n</blockquote>\n<h2 id=\"环境初始化\"><a href=\"#环境初始化\" class=\"headerlink\" title=\"环境初始化\"></a>环境初始化</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx create-react-app react-basic</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JSX-基础\"><a href=\"#JSX-基础\" class=\"headerlink\" title=\"JSX 基础\"></a>JSX 基础</h2><h3 id=\"JSX-介绍\"><a href=\"#JSX-介绍\" class=\"headerlink\" title=\"JSX 介绍\"></a>JSX 介绍</h3><p>概念：JSX 是 JavaScript XML（HTML）的缩写，表示在 JS 代码中书写 HTML 结构<br>作用：在 React 中创建 HTML 结构（页面 UI 结构）<br>优势：</p>\n<ol>\n<li>采用类似于 HTML 的语法，降低学习成本，会 HTML 就会 JSX</li>\n<li>充分利用 JS 自身的可编程能力创建 HTML 结构</li>\n</ol>\n<p>注意：JSX 并不是标准的 JS 语法，是 JS 的语法扩展，浏览器默认是不识别的，脚手架中内置的 @babel/plugin-transform-react-jsx 包，用来解析该语法<br><img src=\"https://img.gejiba.com/images/896dcceeeb4dbc9c4c49f4007c5d9139.png\" alt=\"896dcceeeb4dbc9c4c49f4007c5d9139.png\"></p>\n<h3 id=\"JSX-中使用-js-表达式\"><a href=\"#JSX-中使用-js-表达式\" class=\"headerlink\" title=\"JSX 中使用 js 表达式\"></a>JSX 中使用 js 表达式</h3><h4 id=\"语法以错误检查调试等\"><a href=\"#语法以错误检查调试等\" class=\"headerlink\" title=\"语法以错误检查调试等\"></a>语法以错误检查调试等</h4><p><code>&#123; JS表达式 &#125;</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">&lt;h1&gt;&#123;name&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"可以使用的表达式\"><a href=\"#可以使用的表达式\" class=\"headerlink\" title=\"可以使用的表达式\"></a>可以使用的表达式</h4><ol>\n<li>字符串、数值、布尔值、null、undefined、object（ [] / {} ）</li>\n<li>1 + 2、’123abc’.split(‘’)、[‘a’, ‘b’, ‘c’].join(‘-‘)</li>\n<li>fn()</li>\n</ol>\n<h4 id=\"特别注意\"><a href=\"#特别注意\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h4><p>if 语句/ switch-case 语句/ 变量声明语句，这些叫做语句，不是表达式，不能出现在 {} 中！！</p>\n<h3 id=\"JSX-列表渲染\"><a href=\"#JSX-列表渲染\" class=\"headerlink\" title=\"JSX 列表渲染\"></a>JSX 列表渲染</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来个列表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> songs = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;刘备&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;关羽&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张飞&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;赵云&#x27;</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          songs.map(item =&gt; <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：需要为遍历项添加 key 属性</p>\n<ol>\n<li>key 在 HTML 结构中是看不到的，是 React 内部用来进行性能优化时使用</li>\n<li>key 在当前列表中要唯一的字符串或者数值（String/Number）</li>\n<li>如果列表中有像 id 这种的唯一值，就用 id 来作为 key 值</li>\n<li>如果列表中没有像 id 这种的唯一值，就可以使用 index（下标）来作为 key 值</li>\n</ol>\n<h3 id=\"JSX-条件渲染\"><a href=\"#JSX-条件渲染\" class=\"headerlink\" title=\"JSX 条件渲染\"></a>JSX 条件渲染</h3><p><strong>作用</strong>：根据是否满足条件生成 HTML 结构，比如 Loading 效果<br><strong>实现</strong>：可以使用 三元运算符 或 逻辑与(&amp;&amp;)运算符</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 来个布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 条件渲染字符串 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;flag ? &#x27;react真有趣&#x27; : &#x27;vue真有趣&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 条件渲染标签/组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;flag ? <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>this is span<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> : null&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSX-样式处理\"><a href=\"#JSX-样式处理\" class=\"headerlink\" title=\"JSX 样式处理\"></a>JSX 样式处理</h3><ul>\n<li>行内样式 - style</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> &#x27;<span class=\"attr\">red</span>&#x27; &#125;&#125;&gt;</span>this is a div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>行内样式 - style - 更优写法</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> styleObj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>:red</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">styleObj</span> &#125;&gt;</span>this is a div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类名 - className（推荐）</li>\n</ul>\n<figure class=\"highlight css\"><figcaption><span>style.css</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类名 - className - 动态类名控制</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> showTitle = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">showTitle</span> ? &#x27;<span class=\"attr\">title</span>&#x27; <span class=\"attr\">:</span> &#x27;&#x27;&#125;&gt;</span>this is a div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSX-注意事项\"><a href=\"#JSX-注意事项\" class=\"headerlink\" title=\"JSX 注意事项\"></a>JSX 注意事项</h3><ol>\n<li>JSX 必须有一个根节点，如果没有根节点，可以使用&lt;&gt;&lt;/&gt;（幽灵节点）替代</li>\n<li>所有标签必须形成闭合，成对闭合或者自闭合都可以</li>\n<li>JSX 中的语法更加贴近 JS 语法，属性名采用驼峰命名法 class -&gt; className for -&gt; htmlFor</li>\n<li>JSX 支持多行（换行），如果需要换行，需使用() 包裹，防止 bug 出现</li>\n</ol>\n<h2 id=\"React-组件基础\"><a href=\"#React-组件基础\" class=\"headerlink\" title=\"React 组件基础\"></a>React 组件基础</h2><h3 id=\"组件概念\"><a href=\"#组件概念\" class=\"headerlink\" title=\"组件概念\"></a>组件概念</h3><p>组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。<br><img src=\"https://img.gejiba.com/images/a5d4800b0937dda52aad91d7cab719e0.png\" alt=\"a5d4800b0937dda52aad91d7cab719e0.png\"></p>\n<h3 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h3><p>使用 JS 的函数（或箭头函数）创建的组件，就叫做函数组件<br>组件定义与渲染</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义函数组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloFn</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是我的第一个函数组件!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义类组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 渲染函数组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">HelloFn</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">HelloFn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HelloFn</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>约定说明</strong></p>\n<ol>\n<li>组件的名称必须首字母大写，react 内部会根据这个来判断是组件还是普通的 HTML 标签</li>\n<li>函数组件必须有返回值，表示该组件的 UI 结构；如果不需要渲染任何内容，则返回 null</li>\n<li>组件就像 HTML 标签一样可以被渲染到页面中。组件表示的是一段结构内容，对于函数组件来说，渲染的内容是函数的返回值就是对应的内容</li>\n<li>使用函数名称作为组件标签名称，可以成对出现也可以自闭合</li>\n</ol>\n<h3 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h3><p>使用 ES6 的 class 创建的组件，叫做类（class）组件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入React</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义类组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是我的第一个类组件!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;/* 渲染类组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">HelloC</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">HelloC</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HelloC</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>约定说明</strong></p>\n<ol>\n<li>类名称也必须以大写字母开头</li>\n<li>类组件应该继承 React.Component 父类，从而使用父类中提供的方法或属性</li>\n<li>类组件必须提供 render 方法 render 方法必须有返回值，表示该组件的 UI 结构</li>\n</ol>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><h4 id=\"1-如何绑定事件\"><a href=\"#1-如何绑定事件\" class=\"headerlink\" title=\"1. 如何绑定事件\"></a>1. 如何绑定事件</h4><ul>\n<li>语法<br>on + 事件名称 = { 事件处理程序 } ，比如：<code>&lt;div onClick=&#123;()=&gt;&#123;&#125;&#125;&gt;&lt;/div&gt;</code></li>\n<li>注意点<br>react 事件采用驼峰命名法，比如：<code>onMouseEnter</code>、<code>onFocus</code></li>\n<li>样例</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloFn</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义事件回调函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;事件被触发了&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 绑定事件</span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;clickHandler&#125;</span>&gt;</span>click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloC</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义事件回调函数</span></span><br><span class=\"line\">  clickHandler = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;事件被触发了&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 绑定事件</span></span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.clickHandler&#125;</span>&gt;</span>click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取事件对象\"><a href=\"#获取事件对象\" class=\"headerlink\" title=\"获取事件对象\"></a>获取事件对象</h4><ul>\n<li>通过事件处理程序的参数获取事件对象 e</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">HelloFn</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义事件回调函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">clickHandler</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;事件被触发了&#x27;</span>, e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"comment\">// 绑定事件</span></span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.baidu.com/&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;clickHandler&#125;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件状态\"><a href=\"#组件状态\" class=\"headerlink\" title=\"组件状态\"></a>组件状态</h3><blockquote>\n<p><strong>前提</strong>：在 react hook 出来之前，函数式组件是没有自己的状态的</p>\n</blockquote>\n<p><img src=\"https://img.gejiba.com/images/2b236ba8ae6567bbf8ff35cd434287b0.png\" alt=\"2b236ba8ae6567bbf8ff35cd434287b0.png\"></p>\n<h4 id=\"初始化状态\"><a href=\"#初始化状态\" class=\"headerlink\" title=\"初始化状态\"></a>初始化状态</h4><ul>\n<li>通过 class 的实例属性 state 来初始化</li>\n<li>state 的值是一个对象结构，表示一个组件可以有多个数据状态</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化状态</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>计数器<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取状态\"><a href=\"#读取状态\" class=\"headerlink\" title=\"读取状态\"></a>读取状态</h4><ul>\n<li>通过 this.state 来获取状态</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化状态</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取状态</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>计数器&#123;this.state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改状态\"><a href=\"#修改状态\" class=\"headerlink\" title=\"修改状态\"></a>修改状态</h3><ul>\n<li>语法<br>this.setState({ 要修改的部分数据 })</li>\n<li>setState 方法作用<br>a. 修改 state 中的数据状态<br>b. 更新 UI</li>\n<li>思想<br>数据驱动视图，也就是只要修改数据状态，那么页面就会自动刷新，无需手动操作 dom</li>\n<li>注意事项<br><strong>不要直接修改 state 中的值，必须通过 setState 方法进行修改</strong></li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义数据</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">count</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 定义修改数据的方法</span></span><br><span class=\"line\">  setCount = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 使用数据 并绑定事件</span></span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.setCount&#125;</span>&gt;</span>&#123;this.state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this-问题说明\"><a href=\"#this-问题说明\" class=\"headerlink\" title=\"this 问题说明\"></a>this 问题说明</h3><p><img src=\"https://img.gejiba.com/images/c0effcdb7343c55aa42751b43255d24c.png\" alt=\"c0effcdb7343c55aa42751b43255d24c.png\"></p>\n<p>随着 js 标准的发展，主流的写法已经变成了 class fields，无需考虑太多 this 问题</p>\n<h3 id=\"React-的状态不可变\"><a href=\"#React-的状态不可变\" class=\"headerlink\" title=\"React 的状态不可变\"></a>React 的状态不可变</h3><p><strong>概念</strong>：不要直接修改状态的值，而是基于当前状态创建新的状态值</p>\n<ol>\n<li>错误的直接修改</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state = &#123;</span><br><span class=\"line\">  count : <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">list</span>: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  <span class=\"attr\">person</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">name</span>:<span class=\"string\">&#x27;jack&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 直接修改简单类型Number</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>++</span><br><span class=\"line\">++<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接修改数组</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">list</span>.<span class=\"title function_\">spice</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接修改对象</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">person</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;rose&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>基于当前状态创建新值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">list</span>: [...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">list</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    <span class=\"attr\">person</span>: &#123;</span><br><span class=\"line\">       ...<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">person</span>,</span><br><span class=\"line\">       <span class=\"comment\">// 覆盖原来的属性 就可以达到修改对象中属性的目的</span></span><br><span class=\"line\">       <span class=\"attr\">name</span>: <span class=\"string\">&#x27;rose&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表单处理\"><a href=\"#表单处理\" class=\"headerlink\" title=\"表单处理\"></a>表单处理</h3><p>使用 React 处理表单元素，一般有俩种方式：</p>\n<ol>\n<li>受控组件 （推荐使用）</li>\n<li>非受控组件</li>\n</ol>\n<h4 id=\"受控表单组件\"><a href=\"#受控表单组件\" class=\"headerlink\" title=\"受控表单组件\"></a>受控表单组件</h4><blockquote>\n<p>什么是受控组件？ input 框自己的状态被 React 组件状态控制<br>React 组件的状态的地方是在 state 中，input 表单元素也有自己的状态是在 value 中，React 将 state 与表单元素的值（value）绑定到一起，由 state 的值来控制表单元素的值，从而保证单一数据源特性</p>\n</blockquote>\n<p><strong>实现步骤</strong></p>\n<p>以获取文本框的值为例，受控组件的使用步骤如下：</p>\n<ol>\n<li>在组件的 state 中声明一个组件的状态数据</li>\n<li>将状态数据设置为 input 标签元素的 value 属性的值</li>\n<li>为 input 添加 change 事件，在事件处理程序中，通过事件对象 e 获取到当前文本框的值（即用户当前输入的值）</li>\n<li>调用 setState 方法，将文本框的值作为 state 状态的最新值</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InputComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 声明组件状态</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;<span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is message&#x27;</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 声明事件回调函数</span></span><br><span class=\"line\">  changeHandler = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">message</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 绑定value 绑定事件*/&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.message&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.changeHandler&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">InputComponent</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"非受控表单组件\"><a href=\"#非受控表单组件\" class=\"headerlink\" title=\"非受控表单组件\"></a>非受控表单组件</h4><blockquote>\n<p>什么是非受控组件？<br>非受控组件就是通过手动操作 dom 的方式获取文本框的值，文本框的状态不受 react 组件的 state 中的状态控制，直接通过原生 dom 获取输入框的值</p>\n</blockquote>\n<p><strong>实现步骤</strong></p>\n<ol>\n<li>导入 createRef 函数</li>\n<li>调用 createRef 函数，创建一个 ref 对象，存储到名为 msgRef 的实例属性中</li>\n<li>为 input 添加 ref 属性，值为 msgRef</li>\n<li>在按钮的事件处理程序中，通过 msgRef.current 即可拿到 input 对应的 dom 元素，而其中 msgRef.current.value 拿到的就是文本框的值</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InputComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用createRef产生一个存放dom的对象容器</span></span><br><span class=\"line\">  msgRef = <span class=\"title function_\">createRef</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  changeHandler = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">msgRef</span>.<span class=\"property\">current</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* ref绑定 获取真实dom */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.msgRef&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.changeHandler&#125;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">InputComponent</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"React-组件通信\"><a href=\"#React-组件通信\" class=\"headerlink\" title=\"React 组件通信\"></a>React 组件通信</h2><h3 id=\"组件通信的意义\"><a href=\"#组件通信的意义\" class=\"headerlink\" title=\"组件通信的意义\"></a>组件通信的意义</h3><p>组件是独立且封闭的单元，默认情况下组件<strong>只能使用自己的数据（state）</strong><br>组件化开发的过程中，完整的功能会拆分多个组件，在这个过程中不可避免的需要互相传递一些数据<br>为了能让各组件之间可以进行互相沟通，数据传递，这个过程就是组件通信</p>\n<ol>\n<li>父子关系 - 最重要的</li>\n<li>兄弟关系 - 自定义事件模式产生技术方法 eventBus / 通过共同的父组件通信</li>\n<li>其它关系 - mobx / redux / 基于 hook 的方案</li>\n</ol>\n<h3 id=\"父传子实现\"><a href=\"#父传子实现\" class=\"headerlink\" title=\"父传子实现\"></a>父传子实现</h3><p><strong>实现步骤</strong></p>\n<ol>\n<li> 父组件提供要传递的数据 - state</li>\n<li> 给子组件标签添加属性值为 state 中的数据</li>\n<li>子组件中通过 props 接收父组件中传过来的数据<br> a. 类组件使用 this.props 获取 props 对象<br> b. 函数式组件直接通过参数获取 props 对象</li>\n</ol>\n<p><img src=\"https://img.gejiba.com/images/efb04fab8891b6507a321a9706b0b1c1.png\" alt=\"efb04fab8891b6507a321a9706b0b1c1.png\"></p>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数式子组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FSon</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      子组件1</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;props.msg&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类子组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CSon</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        子组件2</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;this.props.msg&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is a message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>父组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">FSon</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CSon</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"props-说明\"><a href=\"#props-说明\" class=\"headerlink\" title=\"props 说明\"></a>props 说明</h3><h4 id=\"props-是只读对象（readonly）\"><a href=\"#props-是只读对象（readonly）\" class=\"headerlink\" title=\"props 是只读对象（readonly）\"></a>props 是只读对象（readonly）</h4><p>根据单项数据流的要求，子组件只能读取 props 中的数据，不能进行修改</p>\n<h4 id=\"props-可以传递任意数据\"><a href=\"#props-可以传递任意数据\" class=\"headerlink\" title=\"props 可以传递任意数据\"></a>props 可以传递任意数据</h4><p>数字、字符串、布尔值、数组、对象、函数、JSX</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is a message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>父组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">FSon</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">age</span>=<span class=\"string\">&#123;20&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">isMan</span>=<span class=\"string\">&#123;true&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">cb</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; console.log(1) &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          child=&#123;<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>this is child<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">CSon</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img.gejiba.com/images/b60880bb7a5ce85b074e0ff9784acc8a.png\" alt=\"b60880bb7a5ce85b074e0ff9784acc8a.png\"></p>\n<h3 id=\"子传父实现\"><a href=\"#子传父实现\" class=\"headerlink\" title=\"子传父实现\"></a>子传父实现</h3><p><strong>口诀</strong>： 父组件给子组件传递回调函数，子组件调用<br><strong>实现步骤</strong></p>\n<ol>\n<li>父组件提供一个回调函数 - 用于接收数据</li>\n<li>将函数作为属性的值，传给子组件</li>\n<li>子组件通过 props 调用 回调函数</li>\n<li>将子组件中的数据作为参数传递给回调函数</li>\n</ol>\n<p><img src=\"https://img.gejiba.com/images/7e6f7f4d3ea9fc7b56ca52d0240603f3.png\" alt=\"7e6f7f4d3ea9fc7b56ca52d0240603f3.png\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用父组件传递过来的回调函数 并注入参数</span></span><br><span class=\"line\">    props.<span class=\"title function_\">changeMsg</span>(<span class=\"string\">&#x27;this is newMessage&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;props.msg&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>change<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is a message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 提供回调函数</span></span><br><span class=\"line\">  changeMessage = <span class=\"function\">(<span class=\"params\">newMsg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;子组件传过来的数据:&#x27;</span>,newMsg)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: newMsg</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>父组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Son</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          // 传递给子组件</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">changeMsg</span>=<span class=\"string\">&#123;this.changeMessage&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"兄弟组件通信\"><a href=\"#兄弟组件通信\" class=\"headerlink\" title=\"兄弟组件通信\"></a>兄弟组件通信</h3><p><strong>核心思路</strong>： 通过状态提升机制，利用共同的父组件实现兄弟通信<br><img src=\"https://img.gejiba.com/images/bc10d3653e637134a16cc5cef364cabe.png\" alt=\"bc10d3653e637134a16cc5cef364cabe.png\"></p>\n<p><strong>实现步骤</strong></p>\n<ol>\n<li><p>将共享状态提升到最近的公共父组件中，由公共父组件管理这个状态</p>\n<ul>\n<li>提供共享状态</li>\n<li>提供操作共享状态的方法</li>\n</ul>\n</li>\n<li><p>要接收数据状态的子组件通过 props 接收数据</p>\n</li>\n<li><p>要传递数据状态的子组件通过 props 接收方法，调用方法传递数据</p>\n</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子组件A</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonA</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      SonA</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;props.msg&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件B</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SonB</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      SonB</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> props.changeMsg(&#x27;new message&#x27;)&#125;&gt;changeMsg<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 父组件提供状态数据</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is a message&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 父组件提供修改数据的方法</span></span><br><span class=\"line\">  changeMsg = <span class=\"function\">(<span class=\"params\">newMsg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: newMsg</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 接收数据的组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonA</span> <span class=\"attr\">msg</span>=<span class=\"string\">&#123;this.state.message&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;/* 修改数据的组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">SonB</span> <span class=\"attr\">changeMsg</span>=<span class=\"string\">&#123;this.changeMsg&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"跨组件通信-Context\"><a href=\"#跨组件通信-Context\" class=\"headerlink\" title=\"跨组件通信 Context\"></a>跨组件通信 Context</h3><p><img src=\"https://img.gejiba.com/images/9decc7bd1f6bbd7b065439fcb8317a50.png\" alt=\"9decc7bd1f6bbd7b065439fcb8317a50.png\"></p>\n<blockquote>\n<p>上图是一个 react 形成的嵌套组件树，如果我们想从 App 组件向任意一个下层组件传递数据，该怎么办呢？目前我们能采取的方式就是一层一层的 props 往下传，显然很繁琐<br>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法</p>\n</blockquote>\n<p><strong>实现步骤</strong></p>\n<ol>\n<li>创建 Context 对象 导出 Provider 和 Consumer 对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Provider</span>, <span class=\"title class_\">Consumer</span> &#125; = <span class=\"title function_\">createContext</span>()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 Provider 包裹根组件提供数据</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Provider</span> value=&#123;<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">message</span>&#125;&gt;</span><br><span class=\"line\">    &#123;<span class=\"comment\">/* 根组件 */</span>&#125;</span><br><span class=\"line\">&lt;/<span class=\"title class_\">Provider</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li> 需要用到数据的组件使用 Consumer 包裹获取数据</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Consumer</span> &gt;</span><br><span class=\"line\">    &#123;<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"comment\">/* 基于 context 值进行渲染*/</span>&#125;</span><br><span class=\"line\">&lt;/<span class=\"title class_\">Consumer</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; createContext &#125;  <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建Context对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">Provider</span>, <span class=\"title class_\">Consumer</span> &#125; = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 消费数据</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ComC</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Consumer</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;value =&gt; <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Consumer</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ComA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ComC</span>/&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 提供数据</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;this is message&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.message&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">ComA</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"React-组件进阶\"><a href=\"#React-组件进阶\" class=\"headerlink\" title=\"React 组件进阶\"></a>React 组件进阶</h2><h3 id=\"children-属性\"><a href=\"#children-属性\" class=\"headerlink\" title=\"children 属性\"></a>children 属性</h3><h4 id=\"children-属性是什么\"><a href=\"#children-属性是什么\" class=\"headerlink\" title=\"children 属性是什么\"></a>children 属性是什么</h4><blockquote>\n<p>表示该组件的子节点，只要组件内部有子节点，props 中就有该属性</p>\n</blockquote>\n<h4 id=\"children-可以是什么\"><a href=\"#children-可以是什么\" class=\"headerlink\" title=\"children 可以是什么\"></a>children 可以是什么</h4><ol>\n<li>普通文本</li>\n<li>普通标签元素</li>\n<li>函数</li>\n<li>JSX</li>\n</ol>\n<h3 id=\"props-校验-场景和使用\"><a href=\"#props-校验-场景和使用\" class=\"headerlink\" title=\"props 校验-场景和使用\"></a>props 校验-场景和使用</h3><blockquote>\n<p>对于组件来说，props 是由外部传入的，我们其实无法保证组件使用者传入了什么格式的数据，如果传入的数据格式不对，就有可能会导致组件内部错误，有一个点很关键 - 组件的使用者可能报错了也不知道为什么，看下面的例子</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">List</span> = props =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = props.<span class=\"property\">colors</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lis = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;lis&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"title class_\">List</span> colors=&#123;<span class=\"number\">20</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>面对这样的问题，如何解决？ <strong>props 校验</strong></p>\n<p><strong>实现步骤</strong></p>\n<ol>\n<li>安装属性校验包： <code>npm i prop-types</code></li>\n<li>导入 prop-types 包</li>\n<li>使用 组件名.propTypes = {} 给组件添加校验规则</li>\n</ol>\n<p><strong>核心代码</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">List</span> = props =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = props.<span class=\"property\">colors</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lis = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span>&gt;</span>&#123;item.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;lis&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">List</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">colors</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">array</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"props-校验-规则说明\"><a href=\"#props-校验-规则说明\" class=\"headerlink\" title=\"props 校验-规则说明\"></a>props 校验-规则说明</h3><h4 id=\"四种常见结构\"><a href=\"#四种常见结构\" class=\"headerlink\" title=\"四种常见结构\"></a>四种常见结构</h4><ol>\n<li>常见类型：array、bool、func、number、object、string</li>\n<li>React 元素类型：element</li>\n<li>必填项：isRequired</li>\n<li>特定的结构对象：shape({})</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常见类型</span></span><br><span class=\"line\"><span class=\"attr\">optionalFunc</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>,</span><br><span class=\"line\"><span class=\"comment\">// 必填 只需要在类型后面串联一个isRequired</span></span><br><span class=\"line\"><span class=\"attr\">requiredFunc</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\"><span class=\"comment\">// 特定结构的对象</span></span><br><span class=\"line\"><span class=\"attr\">optionalObjectWithShape</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"title function_\">shape</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">color</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">string</span>,</span><br><span class=\"line\">\t<span class=\"attr\">fontSize</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">number</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html\">官网文档更多阅读</a></p>\n<h3 id=\"props-校验-规则说明-1\"><a href=\"#props-校验-规则说明-1\" class=\"headerlink\" title=\"props 校验-规则说明\"></a>props 校验-规则说明</h3><blockquote>\n<p>通过 <code>defaultProps</code> 可以给组件的 props 设置默认值，在未传入 props 的时候生效</p>\n</blockquote>\n<h4 id=\"函数组件-1\"><a href=\"#函数组件-1\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h4><p>直接使用函数参数默认值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">List</span>(<span class=\"params\">&#123;pageSize = <span class=\"number\">10</span>&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      此处展示props的默认值：&#123; pageSize &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不传入pageSize属性</span></span><br><span class=\"line\">&lt;<span class=\"title class_\">List</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类组件-1\"><a href=\"#类组件-1\" class=\"headerlink\" title=\"类组件\"></a>类组件</h4><p>使用类静态属性声明默认值，<code>static defaultProps = &#123;&#125;</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">List</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">    <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        此处展示props的默认值：&#123;this.props.pageSize&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">List</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生命周期-概述\"><a href=\"#生命周期-概述\" class=\"headerlink\" title=\"生命周期 - 概述\"></a>生命周期 - 概述</h3><blockquote>\n<p>组件的生命周期是指组件从被创建到挂载到页面中运行起来，再到组件不用时卸载的过程，注意，只有类组件才有生命周期（类组件 实例化 函数组件 不需要实例化）<br><img src=\"https://img.gejiba.com/images/6bcfce01b8fec23ca114b6c4fbac6a16.png\" alt=\"6bcfce01b8fec23ca114b6c4fbac6a16.png\"></p>\n</blockquote>\n<p><a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p>\n<h3 id=\"生命周期-挂载阶段\"><a href=\"#生命周期-挂载阶段\" class=\"headerlink\" title=\"生命周期 - 挂载阶段\"></a>生命周期 - 挂载阶段</h3><p><img src=\"https://img.gejiba.com/images/1fd62b6f68705bf5d1d562b5d764153c.png\" alt=\"1fd62b6f68705bf5d1d562b5d764153c.png\"></p>\n<table>\n<thead>\n<tr>\n<th>钩子函数</th>\n<th>触发时机</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>constructor</td>\n<td>constructor 创建组件时，最先执行，初始化的时候只执行一次</td>\n<td>1. 初始化 state 2. 创建 Ref 3. 使用 bind 解决 this 指向问题等</td>\n</tr>\n<tr>\n<td>render</td>\n<td>每次组件渲染都会触发</td>\n<td>渲染 UI（注意： 不能在里面调用 setState() ）</td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>组件挂载（完成 DOM 渲染）后执行，初始化的时候执行一次</td>\n<td>1. 发送网络请求 2.DOM 操作</td>\n</tr>\n</tbody></table>\n<h3 id=\"生命周期-更新阶段\"><a href=\"#生命周期-更新阶段\" class=\"headerlink\" title=\"生命周期 - 更新阶段\"></a>生命周期 - 更新阶段</h3><p><img src=\"https://img.gejiba.com/images/480575c7388d6aab5d3405a55eb3a837.png\" alt=\"480575c7388d6aab5d3405a55eb3a837.png\"></p>\n<table>\n<thead>\n<tr>\n<th>钩子函数</th>\n<th>触发时机</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>render</td>\n<td>每次组件渲染都会触发</td>\n<td>每次组件渲染都会触发 渲染 UI（与 挂载阶段 是同一个 render）</td>\n</tr>\n<tr>\n<td>componentDidUpdate</td>\n<td>componentDidUpdate 组件更新后（DOM 渲染完毕）</td>\n<td>DOM 操作，可以获取到更新后的 DOM 内容，不要直接调用 setState</td>\n</tr>\n</tbody></table>\n<h3 id=\"生命周期-卸载阶段\"><a href=\"#生命周期-卸载阶段\" class=\"headerlink\" title=\"生命周期 - 卸载阶段\"></a>生命周期 - 卸载阶段</h3><table>\n<thead>\n<tr>\n<th>钩子函数</th>\n<th>触发时机</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>componentWillUnmount</td>\n<td>组件卸载（从页面中消失）</td>\n<td>组件卸载（从页面中消失） 执行清理工作（比如：清理定时器等）</td>\n</tr>\n</tbody></table>\n<h2 id=\"Hooks-基础\"><a href=\"#Hooks-基础\" class=\"headerlink\" title=\"Hooks 基础\"></a>Hooks 基础</h2><h3 id=\"Hooks-概念理解\"><a href=\"#Hooks-概念理解\" class=\"headerlink\" title=\"Hooks 概念理解\"></a>Hooks 概念理解</h3><h4 id=\"什么是-hooks\"><a href=\"#什么是-hooks\" class=\"headerlink\" title=\"什么是 hooks\"></a>什么是 hooks</h4><blockquote>\n<p>Hooks 的本质：一套能够使函数组件更强大，更灵活的“钩子”</p>\n</blockquote>\n<p>React 体系里组件分为 类组件 和 函数组件<br>经过多年的实战，函数组件是一个更加匹配 React 的设计理念 UI = f(data)，也更有利于逻辑拆分与重用的组件表达形式，而先前的函数组件是不可以有自己的状态的，为了能让函数组件可以拥有自己的状态，所以从 react v16.8 开始，Hooks 应运而生</p>\n<p><strong>注意点</strong>：</p>\n<ol>\n<li>有了 hooks 之后，为了兼容老版本，class 类组件并没有被移除，俩者都可以使用</li>\n<li>有了 hooks 之后，不能在把函数成为无状态组件了，因为 hooks 为函数组件提供了状态</li>\n<li>hooks 只能在函数组件中使用</li>\n</ol>\n<h4 id=\"Hooks-解决了什么问题\"><a href=\"#Hooks-解决了什么问题\" class=\"headerlink\" title=\"Hooks 解决了什么问题\"></a>Hooks 解决了什么问题</h4><p>Hooks 的出现解决了俩个问题 1. 组件的状态逻辑复用 2.class 组件自身的问题</p>\n<ol>\n<li>组件的逻辑复用<br> 在 hooks 出现之前，react 先后尝试了 mixins 混入，HOC 高阶组件，render-props 等模式<br> 但是都有各自的问题，比如 mixin 的数据来源不清晰，高阶组件的嵌套问题等等</li>\n<li>class 组件自身的问题<br> class 组件就像一个厚重的‘战舰’ 一样，大而全，提供了很多东西，有不可忽视的学习成本，比如各种生命周期，this 指向问题等等，而我们更多时候需要的是一个轻快灵活的’快艇’</li>\n</ol>\n<h4 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h4><h5 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h5><p><strong>作用</strong></p>\n<blockquote>\n<p>useState 为函数组件提供状态（state）</p>\n</blockquote>\n<p><strong>使用步骤</strong></p>\n<ol>\n<li>导入 useState 函数</li>\n<li>调用 useState 函数，并传入状态的初始值</li>\n<li>从 useState 函数的返回值中，拿到状态和修改状态的方法</li>\n<li>在 JSX 中展示状态</li>\n<li>调用修改状态的方法更新状态</li>\n</ol>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参数：状态初始值比如,传入 0 表示该状态的初始值为 0</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回值：数组,包含两个值：1 状态值（state） 2 修改该状态的函数（setState）</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setCount(count + 1) &#125;&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"状态的读取和修改\"><a href=\"#状态的读取和修改\" class=\"headerlink\" title=\"状态的读取和修改\"></a>状态的读取和修改</h5><p><strong>读取状态</strong></p>\n<blockquote>\n<p>该方式提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用</p>\n</blockquote>\n<p><strong>修改状态</strong></p>\n<ol>\n<li>setCount 是一个函数，参数表示最新的状态值</li>\n<li>调用该函数后，将使用新值替换旧值</li>\n<li>修改状态后，由于状态发生变化，会引起视图变化</li>\n</ol>\n<p><strong>注意事项</strong></p>\n<ol>\n<li>修改状态的时候，一定要使用新的状态替换旧的状态，不能直接修改旧的状态，尤其是引用类型</li>\n</ol>\n<h5 id=\"组件的更新过程\"><a href=\"#组件的更新过程\" class=\"headerlink\" title=\"组件的更新过程\"></a>组件的更新过程</h5><p>函数组件使用 <strong>useState hook</strong> 后的执行过程，以及状态值的变化</p>\n<ul>\n<li>组件第一次渲染<br>a. 从头开始执行该组件中的代码逻辑<br>b. 调用 useState(0) 将传入的参数作为状态初始值，即：0<br>c. 渲染组件，此时，获取到的状态 count 值为： 0</li>\n<li>组件第二次渲染<br>a. 点击按钮，调用 setCount(count + 1) 修改状态，因为状态发生改变，所以，该组件会重新渲染<br>b. 组件重新渲染时，会再次执行该组件中的代码逻辑<br>c. 再次调用 useState(0)，此时 React 内部会拿到最新的状态值而非初始值，比如，该案例中最新的状态值为 1<br>d. 再次渲染组件，此时，获取到的状态 count 值为：1</li>\n</ul>\n<p>注意：<strong>useState 的初始值(参数)只会在组件第一次渲染时生效</strong>。也就是说，以后的每次渲染，useState 获取到都是最新的状态值，React 组件会记住每次最新的状态值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 在这里可以进行打印测试</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setCount(count + 1) &#125;&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用规则\"><a href=\"#使用规则\" class=\"headerlink\" title=\"使用规则\"></a>使用规则</h5><ol>\n<li>useState 函数可以执行多次，每次执行互相独立，每调用一次为函数组件提供一个状态</li>\n<li>useState 注意事项<br>a. 只能出现在函数组件中<br>b. 不能嵌套在 if/for/其它函数中（react 按照 hooks 的调用顺序识别每一个 hook）<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">List</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  num++</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(num / <span class=\"number\">2</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;cp&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [list,setList] = <span class=\"title function_\">useState</span>([])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 俩个hook的顺序不是固定的，这是不可以的！！！</span></span><br></pre></td></tr></table></figure>\nc. 可以通过开发者工具查看 hooks 状态</li>\n</ol>\n<h4 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h4><h5 id=\"理解函数副作用\"><a href=\"#理解函数副作用\" class=\"headerlink\" title=\"理解函数副作用\"></a>理解函数副作用</h5><p><strong>什么是副作用</strong></p>\n<blockquote>\n<p>副作用是相对于主作用来说的，一个函数除了主作用，其他的作用就是副作用。对于 React 组件来说，<strong>主作用就是根据数据（state/props）渲染 UI</strong>，除此之外都是副作用（比如，手动修改 DOM）</p>\n</blockquote>\n<p><strong>常见的副作用</strong></p>\n<ol>\n<li>数据请求 ajax 发送</li>\n<li>手动修改 dom</li>\n<li>localstorage 操作</li>\n</ol>\n<p>useEffect 函数的作用就是为 react 函数组件提供副作用处理的！</p>\n<h5 id=\"基础使用-1\"><a href=\"#基础使用-1\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h5><p><strong>作用</strong></p>\n<blockquote>\n<p>为 react 函数组件提供副作用处理</p>\n</blockquote>\n<p><strong>使用步骤</strong></p>\n<ol>\n<li>导入 useEffect 函数</li>\n<li>调用 useEffect 函数，并传入回调函数</li>\n<li>在回调函数中编写副作用处理（dom 操作）</li>\n<li>修改数据状态</li>\n<li>检测副作用是否生效</li>\n</ol>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dom操作</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">`当前已点击了<span class=\"subst\">$&#123;count&#125;</span>次`</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setCount(count + 1) &#125;&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"依赖项控制执行时机\"><a href=\"#依赖项控制执行时机\" class=\"headerlink\" title=\"依赖项控制执行时机\"></a>依赖项控制执行时机</h5><ol>\n<li>不添加依赖项</li>\n</ol>\n<blockquote>\n<p>组件首次渲染执行一次，以及不管是哪个状态更改引起组件更新时都会重新执行</p>\n<ol>\n<li> 组件初始渲染</li>\n<li> 组件更新 （不管是哪个状态引起的更新）</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>添加空数组</li>\n</ol>\n<blockquote>\n<p>组件只在首次渲染时执行一次</p>\n</blockquote>\n<ol start=\"3\">\n<li>添加特定依赖项</li>\n</ol>\n<blockquote>\n<p>副作用函数在首次渲染时执行，在依赖项发生变化时重新执行</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;zs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;副作用执行了&#x27;</span>)</span><br><span class=\"line\">    &#125;, [count])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setCount(count + 1) &#125;&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123; setName(&#x27;cp&#x27;) &#125;&#125;&gt;&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意事项</strong><br>useEffect 回调函数中用到的数据（比如，count）就是依赖数据，就应该出现在依赖项数组中，如果不添加依赖项就会有 bug 出现</p>\n<h2 id=\"Hooks-进阶\"><a href=\"#Hooks-进阶\" class=\"headerlink\" title=\"Hooks 进阶\"></a>Hooks 进阶</h2><h3 id=\"Hooks-进阶-1\"><a href=\"#Hooks-进阶-1\" class=\"headerlink\" title=\"Hooks 进阶\"></a>Hooks 进阶</h3><p><strong>使用场景</strong><br>参数只会在组件的初始渲染中起作用，后续渲染时会被忽略。如果初始 state 需要通过计算才能获得，则可以传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 编写计算逻辑    return &#x27;计算之后的初始值&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>语法选择</strong></p>\n<ol>\n<li>如果就是初始化一个普通的数据 直接使用 useState(普通数据) 即可</li>\n<li>如果要初始化的数据无法直接得到需要通过计算才能获取到，使用 useState(()=&gt;{})</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Counter</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> props.<span class=\"property\">count</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Counter</span> <span class=\"attr\">count</span>=<span class=\"string\">&#123;10&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Counter</span> <span class=\"attr\">count</span>=<span class=\"string\">&#123;20&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect-清理副作用\"><a href=\"#useEffect-清理副作用\" class=\"headerlink\" title=\"useEffect - 清理副作用\"></a>useEffect - 清理副作用</h3><p><strong>使用场景</strong><br>在组件被销毁时，如果有些副作用操作需要被清理，就可以使用此语法，比如常见的定时器<br><strong>语法及规则</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;副作用函数执行了&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 副作用函数的执行时机为: 在下一次副作用函数执行之前执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;清理副作用的函数执行了&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 在这里写清理副作用的代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>定时器小案例</strong></p>\n<blockquote>\n<p>添加副作用函数前：组件虽然已经不显示了，但是定时器依旧在运行</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;副作用函数执行了&#x27;</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setFlag(false)&#125;&gt;click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         &#123;flag ? <span class=\"tag\">&lt;<span class=\"name\">Foo</span>/&gt;</span> : null&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加清理副作用函数后：一旦组件被销毁，定时器也被清理</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> timerId = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;副作用函数执行了&#x27;</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 添加清理副租用函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(timerId)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [flag, setFlag] = <span class=\"title function_\">useState</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setFlag(false)&#125;&gt;click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         &#123;flag ? <span class=\"tag\">&lt;<span class=\"name\">Foo</span>/&gt;</span> : null&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect-发送网络请求\"><a href=\"#useEffect-发送网络请求\" class=\"headerlink\" title=\"useEffect - 发送网络请求\"></a>useEffect - 发送网络请求</h3><p><strong>使用场景</strong><br>如何在 useEffect 中发送网络请求，并且封装同步 async await 操作</p>\n<p><strong>语法要求</strong><br>不可以直接在 useEffect 的回调函数外层直接包裹 await ，因为异步会导致清理函数无法立即返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://geek.itheima.net/v1_0/channels&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;,[])</span><br></pre></td></tr></table></figure>\n\n<p><strong>正确写法</strong><br>在内部单独定义一个函数，然后把这个函数包装成同步</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;https://api.inews.qq.com/newsqa/v1/query/inner/publish/modules/list?modules=statisGradeCityDetail,diseaseh5Shelf&#x27;</span>)                            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,[])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h3><p><strong>使用场景</strong></p>\n<blockquote>\n<p>在函数组件中获取真实的 dom 元素对象或者是组件对象</p>\n</blockquote>\n<p><strong>使用步骤</strong></p>\n<ol>\n<li>导入 useRef 函数</li>\n<li>执行 useRef 函数并传入 null，返回值为一个对象 内部有一个 current 属性存放拿到的 dom 对象（组件实例）</li>\n<li>通过 ref 绑定 要获取的元素或者组件</li>\n</ol>\n<p><strong>获取 dom</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> h1Ref = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(h1Ref)</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">h1Ref</span> &#125;&gt;</span>this is h1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>获取组件实例</strong></p>\n<blockquote>\n<p>函数组件没有实例，不能使用 ref 获取，如果想获取组件实例，必须是类组件</p>\n</blockquote>\n<figure class=\"highlight jsx\"><figcaption><span>Foo.jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    sayHi = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;say hi&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Foo</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><figcaption><span>App.jsx</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Foo</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Foo&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> h1Foo = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(h1Foo)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">Foo</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">h1Foo</span> &#125; /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h3><p><strong>实现步骤</strong></p>\n<ol>\n<li>使用 createContext 创建 Context 对象</li>\n<li>在顶层组件通过 Provider 提供数据</li>\n<li>在底层组件通过 useContext 函数获取数据</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createContext, useContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建Context对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = <span class=\"title function_\">createContext</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Foo <span class=\"tag\">&lt;<span class=\"name\">Bar</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 底层组件通过useContext函数获取数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Bar &#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"comment\">// 顶层组件通过Provider 提供数据</span></span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;</span>&#x27;<span class=\"attr\">this</span> <span class=\"attr\">is</span> <span class=\"attr\">name</span>&#x27;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">Foo</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span></span><br></pre></td></tr></table></figure>\n"},{"title":"WEB前端精选vscode插件","date":"2021-06-12T00:00:00.000Z","updated":"2022-04-03T00:00:00.000Z","description":" ","_content":"\n## Chinese (Simplified) Language Pack for Visual Studio Code\n\n把 VSCode 的英文转换成中文。对我我这种英语渣渣特别刚需。而且这个是官方汉化包，理解没毛病。\n![650ca613c80eb66345eec0a4d8708fc6.png](https://img.gejiba.com/images/650ca613c80eb66345eec0a4d8708fc6.png)\n\n## Vetur\n\nVue 特定的语法语义突出显示、代码片段和 API 语法以错误检查调试等。\nVue3.0 推荐用 Volar，体验上会更好。\n![156e64b4edfe5910e17155e76ed95b1f.png](https://img.gejiba.com/images/156e64b4edfe5910e17155e76ed95b1f.png)\n\n## Volar\n\nVolar 是一个专为 Vue 3 构建的语言支持插件，它基于@vue/reactivity 按需计算 TypeScript 来优化类似于原生 TypeScript 语言服务的性能。\n\n![5a8bd6e5a54112c91e3b9f6c1901b299.png](https://img.gejiba.com/images/5a8bd6e5a54112c91e3b9f6c1901b299.png)\n\n## Auto Rename Tag\n\n一个修改标签对的插件。重命名一个 HTML / XML 标签时，自动重命名配对的 HTML / XML 标签\n![b5e4c7e8d22e9a15cf540b2c89e54554.png](https://img.gejiba.com/images/b5e4c7e8d22e9a15cf540b2c89e54554.png)\n\n## Error Lens\n\n当我们输入一些错误的语法格式的时候，它都会有一些提示！\n![de6382733ddd28aeba910e2a9e5fd54a.png](https://img.gejiba.com/images/de6382733ddd28aeba910e2a9e5fd54a.png)\n\n## Git History\n\n查看 git 日志、文件历史、比较分支或提交。\n点击文件的右上角图标就能看文件的历史\n![6ab41ba779729c3f424de3da9935622a.png](https://img.gejiba.com/images/6ab41ba779729c3f424de3da9935622a.png)\n\n## GitLens\n\n增强 Git 功能构建到 Visual Studio 代码可视化代码作者一眼就通过 Git 指责注释和代码镜头,无缝导航和探索 Git 存储库。\n![4e735758a3d2083867f1800f3dd68458.png](https://img.gejiba.com/images/4e735758a3d2083867f1800f3dd68458.png)\n\n## htmltagwrap\n\n快捷键 Alt + W， Mac 系统 Option + W .可以在选中文本外面套一层标签。\n![17614fa14aca380873fc2d0bd419d027.png](https://img.gejiba.com/images/17614fa14aca380873fc2d0bd419d027.png)\n\n## Live Server\n\n一个具有实时加载功能的小型服务器，可以在项目中实时用 live-server 作为一个实时服务器实时查看开发的网页或项目效果。\n![0a821ea83c15a47c07f4b00381f816a6.png](https://img.gejiba.com/images/0a821ea83c15a47c07f4b00381f816a6.png)\n\n## Prettier\n\n代码格式化工具\n![8c9baa1cde79317f188c8166d92a40a6.png](https://img.gejiba.com/images/8c9baa1cde79317f188c8166d92a40a6.png)\n\n## ESLint\n\nESLint 是一款语法检测工具\n![53ec8f35799f898d26f632c4ee80986f.png](https://img.gejiba.com/images/53ec8f35799f898d26f632c4ee80986f.png)\n\n## Project Manager\n\n在多个项目中快速切换\n![5de716a35f6675603600a906902a8d19.png](https://img.gejiba.com/images/5de716a35f6675603600a906902a8d19.png)\n\n## ES7 React/Redux/GraphQL/React-Native snippets\n\n只需要敲简单的关键字就能快速生成代码模版\n![c775bc3c83b5ce28d67fd182f7dd268a.png](https://img.gejiba.com/images/c775bc3c83b5ce28d67fd182f7dd268a.png)\n","source":"_posts/vscode-plugin.md","raw":"---\ntitle: WEB前端精选vscode插件\ndate: '2021-06-12'\nupdated: '2022-04-03'\ntags:\n  - vscode\ncategories:\n  - 前端工具\ndescription: ' '\n---\n\n## Chinese (Simplified) Language Pack for Visual Studio Code\n\n把 VSCode 的英文转换成中文。对我我这种英语渣渣特别刚需。而且这个是官方汉化包，理解没毛病。\n![650ca613c80eb66345eec0a4d8708fc6.png](https://img.gejiba.com/images/650ca613c80eb66345eec0a4d8708fc6.png)\n\n## Vetur\n\nVue 特定的语法语义突出显示、代码片段和 API 语法以错误检查调试等。\nVue3.0 推荐用 Volar，体验上会更好。\n![156e64b4edfe5910e17155e76ed95b1f.png](https://img.gejiba.com/images/156e64b4edfe5910e17155e76ed95b1f.png)\n\n## Volar\n\nVolar 是一个专为 Vue 3 构建的语言支持插件，它基于@vue/reactivity 按需计算 TypeScript 来优化类似于原生 TypeScript 语言服务的性能。\n\n![5a8bd6e5a54112c91e3b9f6c1901b299.png](https://img.gejiba.com/images/5a8bd6e5a54112c91e3b9f6c1901b299.png)\n\n## Auto Rename Tag\n\n一个修改标签对的插件。重命名一个 HTML / XML 标签时，自动重命名配对的 HTML / XML 标签\n![b5e4c7e8d22e9a15cf540b2c89e54554.png](https://img.gejiba.com/images/b5e4c7e8d22e9a15cf540b2c89e54554.png)\n\n## Error Lens\n\n当我们输入一些错误的语法格式的时候，它都会有一些提示！\n![de6382733ddd28aeba910e2a9e5fd54a.png](https://img.gejiba.com/images/de6382733ddd28aeba910e2a9e5fd54a.png)\n\n## Git History\n\n查看 git 日志、文件历史、比较分支或提交。\n点击文件的右上角图标就能看文件的历史\n![6ab41ba779729c3f424de3da9935622a.png](https://img.gejiba.com/images/6ab41ba779729c3f424de3da9935622a.png)\n\n## GitLens\n\n增强 Git 功能构建到 Visual Studio 代码可视化代码作者一眼就通过 Git 指责注释和代码镜头,无缝导航和探索 Git 存储库。\n![4e735758a3d2083867f1800f3dd68458.png](https://img.gejiba.com/images/4e735758a3d2083867f1800f3dd68458.png)\n\n## htmltagwrap\n\n快捷键 Alt + W， Mac 系统 Option + W .可以在选中文本外面套一层标签。\n![17614fa14aca380873fc2d0bd419d027.png](https://img.gejiba.com/images/17614fa14aca380873fc2d0bd419d027.png)\n\n## Live Server\n\n一个具有实时加载功能的小型服务器，可以在项目中实时用 live-server 作为一个实时服务器实时查看开发的网页或项目效果。\n![0a821ea83c15a47c07f4b00381f816a6.png](https://img.gejiba.com/images/0a821ea83c15a47c07f4b00381f816a6.png)\n\n## Prettier\n\n代码格式化工具\n![8c9baa1cde79317f188c8166d92a40a6.png](https://img.gejiba.com/images/8c9baa1cde79317f188c8166d92a40a6.png)\n\n## ESLint\n\nESLint 是一款语法检测工具\n![53ec8f35799f898d26f632c4ee80986f.png](https://img.gejiba.com/images/53ec8f35799f898d26f632c4ee80986f.png)\n\n## Project Manager\n\n在多个项目中快速切换\n![5de716a35f6675603600a906902a8d19.png](https://img.gejiba.com/images/5de716a35f6675603600a906902a8d19.png)\n\n## ES7 React/Redux/GraphQL/React-Native snippets\n\n只需要敲简单的关键字就能快速生成代码模版\n![c775bc3c83b5ce28d67fd182f7dd268a.png](https://img.gejiba.com/images/c775bc3c83b5ce28d67fd182f7dd268a.png)\n","slug":"vscode-plugin","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl68qk8wh00076qjc1cc4brvf","content":"<h2 id=\"Chinese-Simplified-Language-Pack-for-Visual-Studio-Code\"><a href=\"#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Chinese (Simplified) Language Pack for Visual Studio Code\"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h2><p>把 VSCode 的英文转换成中文。对我我这种英语渣渣特别刚需。而且这个是官方汉化包，理解没毛病。<br><img src=\"https://img.gejiba.com/images/650ca613c80eb66345eec0a4d8708fc6.png\" alt=\"650ca613c80eb66345eec0a4d8708fc6.png\"></p>\n<h2 id=\"Vetur\"><a href=\"#Vetur\" class=\"headerlink\" title=\"Vetur\"></a>Vetur</h2><p>Vue 特定的语法语义突出显示、代码片段和 API 语法以错误检查调试等。<br>Vue3.0 推荐用 Volar，体验上会更好。<br><img src=\"https://img.gejiba.com/images/156e64b4edfe5910e17155e76ed95b1f.png\" alt=\"156e64b4edfe5910e17155e76ed95b1f.png\"></p>\n<h2 id=\"Volar\"><a href=\"#Volar\" class=\"headerlink\" title=\"Volar\"></a>Volar</h2><p>Volar 是一个专为 Vue 3 构建的语言支持插件，它基于@vue/reactivity 按需计算 TypeScript 来优化类似于原生 TypeScript 语言服务的性能。</p>\n<p><img src=\"https://img.gejiba.com/images/5a8bd6e5a54112c91e3b9f6c1901b299.png\" alt=\"5a8bd6e5a54112c91e3b9f6c1901b299.png\"></p>\n<h2 id=\"Auto-Rename-Tag\"><a href=\"#Auto-Rename-Tag\" class=\"headerlink\" title=\"Auto Rename Tag\"></a>Auto Rename Tag</h2><p>一个修改标签对的插件。重命名一个 HTML / XML 标签时，自动重命名配对的 HTML / XML 标签<br><img src=\"https://img.gejiba.com/images/b5e4c7e8d22e9a15cf540b2c89e54554.png\" alt=\"b5e4c7e8d22e9a15cf540b2c89e54554.png\"></p>\n<h2 id=\"Error-Lens\"><a href=\"#Error-Lens\" class=\"headerlink\" title=\"Error Lens\"></a>Error Lens</h2><p>当我们输入一些错误的语法格式的时候，它都会有一些提示！<br><img src=\"https://img.gejiba.com/images/de6382733ddd28aeba910e2a9e5fd54a.png\" alt=\"de6382733ddd28aeba910e2a9e5fd54a.png\"></p>\n<h2 id=\"Git-History\"><a href=\"#Git-History\" class=\"headerlink\" title=\"Git History\"></a>Git History</h2><p>查看 git 日志、文件历史、比较分支或提交。<br>点击文件的右上角图标就能看文件的历史<br><img src=\"https://img.gejiba.com/images/6ab41ba779729c3f424de3da9935622a.png\" alt=\"6ab41ba779729c3f424de3da9935622a.png\"></p>\n<h2 id=\"GitLens\"><a href=\"#GitLens\" class=\"headerlink\" title=\"GitLens\"></a>GitLens</h2><p>增强 Git 功能构建到 Visual Studio 代码可视化代码作者一眼就通过 Git 指责注释和代码镜头,无缝导航和探索 Git 存储库。<br><img src=\"https://img.gejiba.com/images/4e735758a3d2083867f1800f3dd68458.png\" alt=\"4e735758a3d2083867f1800f3dd68458.png\"></p>\n<h2 id=\"htmltagwrap\"><a href=\"#htmltagwrap\" class=\"headerlink\" title=\"htmltagwrap\"></a>htmltagwrap</h2><p>快捷键 Alt + W， Mac 系统 Option + W .可以在选中文本外面套一层标签。<br><img src=\"https://img.gejiba.com/images/17614fa14aca380873fc2d0bd419d027.png\" alt=\"17614fa14aca380873fc2d0bd419d027.png\"></p>\n<h2 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a>Live Server</h2><p>一个具有实时加载功能的小型服务器，可以在项目中实时用 live-server 作为一个实时服务器实时查看开发的网页或项目效果。<br><img src=\"https://img.gejiba.com/images/0a821ea83c15a47c07f4b00381f816a6.png\" alt=\"0a821ea83c15a47c07f4b00381f816a6.png\"></p>\n<h2 id=\"Prettier\"><a href=\"#Prettier\" class=\"headerlink\" title=\"Prettier\"></a>Prettier</h2><p>代码格式化工具<br><img src=\"https://img.gejiba.com/images/8c9baa1cde79317f188c8166d92a40a6.png\" alt=\"8c9baa1cde79317f188c8166d92a40a6.png\"></p>\n<h2 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h2><p>ESLint 是一款语法检测工具<br><img src=\"https://img.gejiba.com/images/53ec8f35799f898d26f632c4ee80986f.png\" alt=\"53ec8f35799f898d26f632c4ee80986f.png\"></p>\n<h2 id=\"Project-Manager\"><a href=\"#Project-Manager\" class=\"headerlink\" title=\"Project Manager\"></a>Project Manager</h2><p>在多个项目中快速切换<br><img src=\"https://img.gejiba.com/images/5de716a35f6675603600a906902a8d19.png\" alt=\"5de716a35f6675603600a906902a8d19.png\"></p>\n<h2 id=\"ES7-React-Redux-GraphQL-React-Native-snippets\"><a href=\"#ES7-React-Redux-GraphQL-React-Native-snippets\" class=\"headerlink\" title=\"ES7 React/Redux/GraphQL/React-Native snippets\"></a>ES7 React/Redux/GraphQL/React-Native snippets</h2><p>只需要敲简单的关键字就能快速生成代码模版<br><img src=\"https://img.gejiba.com/images/c775bc3c83b5ce28d67fd182f7dd268a.png\" alt=\"c775bc3c83b5ce28d67fd182f7dd268a.png\"></p>\n","site":{"data":{}},"length":702,"excerpt":"","more":"<h2 id=\"Chinese-Simplified-Language-Pack-for-Visual-Studio-Code\"><a href=\"#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Chinese (Simplified) Language Pack for Visual Studio Code\"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h2><p>把 VSCode 的英文转换成中文。对我我这种英语渣渣特别刚需。而且这个是官方汉化包，理解没毛病。<br><img src=\"https://img.gejiba.com/images/650ca613c80eb66345eec0a4d8708fc6.png\" alt=\"650ca613c80eb66345eec0a4d8708fc6.png\"></p>\n<h2 id=\"Vetur\"><a href=\"#Vetur\" class=\"headerlink\" title=\"Vetur\"></a>Vetur</h2><p>Vue 特定的语法语义突出显示、代码片段和 API 语法以错误检查调试等。<br>Vue3.0 推荐用 Volar，体验上会更好。<br><img src=\"https://img.gejiba.com/images/156e64b4edfe5910e17155e76ed95b1f.png\" alt=\"156e64b4edfe5910e17155e76ed95b1f.png\"></p>\n<h2 id=\"Volar\"><a href=\"#Volar\" class=\"headerlink\" title=\"Volar\"></a>Volar</h2><p>Volar 是一个专为 Vue 3 构建的语言支持插件，它基于@vue/reactivity 按需计算 TypeScript 来优化类似于原生 TypeScript 语言服务的性能。</p>\n<p><img src=\"https://img.gejiba.com/images/5a8bd6e5a54112c91e3b9f6c1901b299.png\" alt=\"5a8bd6e5a54112c91e3b9f6c1901b299.png\"></p>\n<h2 id=\"Auto-Rename-Tag\"><a href=\"#Auto-Rename-Tag\" class=\"headerlink\" title=\"Auto Rename Tag\"></a>Auto Rename Tag</h2><p>一个修改标签对的插件。重命名一个 HTML / XML 标签时，自动重命名配对的 HTML / XML 标签<br><img src=\"https://img.gejiba.com/images/b5e4c7e8d22e9a15cf540b2c89e54554.png\" alt=\"b5e4c7e8d22e9a15cf540b2c89e54554.png\"></p>\n<h2 id=\"Error-Lens\"><a href=\"#Error-Lens\" class=\"headerlink\" title=\"Error Lens\"></a>Error Lens</h2><p>当我们输入一些错误的语法格式的时候，它都会有一些提示！<br><img src=\"https://img.gejiba.com/images/de6382733ddd28aeba910e2a9e5fd54a.png\" alt=\"de6382733ddd28aeba910e2a9e5fd54a.png\"></p>\n<h2 id=\"Git-History\"><a href=\"#Git-History\" class=\"headerlink\" title=\"Git History\"></a>Git History</h2><p>查看 git 日志、文件历史、比较分支或提交。<br>点击文件的右上角图标就能看文件的历史<br><img src=\"https://img.gejiba.com/images/6ab41ba779729c3f424de3da9935622a.png\" alt=\"6ab41ba779729c3f424de3da9935622a.png\"></p>\n<h2 id=\"GitLens\"><a href=\"#GitLens\" class=\"headerlink\" title=\"GitLens\"></a>GitLens</h2><p>增强 Git 功能构建到 Visual Studio 代码可视化代码作者一眼就通过 Git 指责注释和代码镜头,无缝导航和探索 Git 存储库。<br><img src=\"https://img.gejiba.com/images/4e735758a3d2083867f1800f3dd68458.png\" alt=\"4e735758a3d2083867f1800f3dd68458.png\"></p>\n<h2 id=\"htmltagwrap\"><a href=\"#htmltagwrap\" class=\"headerlink\" title=\"htmltagwrap\"></a>htmltagwrap</h2><p>快捷键 Alt + W， Mac 系统 Option + W .可以在选中文本外面套一层标签。<br><img src=\"https://img.gejiba.com/images/17614fa14aca380873fc2d0bd419d027.png\" alt=\"17614fa14aca380873fc2d0bd419d027.png\"></p>\n<h2 id=\"Live-Server\"><a href=\"#Live-Server\" class=\"headerlink\" title=\"Live Server\"></a>Live Server</h2><p>一个具有实时加载功能的小型服务器，可以在项目中实时用 live-server 作为一个实时服务器实时查看开发的网页或项目效果。<br><img src=\"https://img.gejiba.com/images/0a821ea83c15a47c07f4b00381f816a6.png\" alt=\"0a821ea83c15a47c07f4b00381f816a6.png\"></p>\n<h2 id=\"Prettier\"><a href=\"#Prettier\" class=\"headerlink\" title=\"Prettier\"></a>Prettier</h2><p>代码格式化工具<br><img src=\"https://img.gejiba.com/images/8c9baa1cde79317f188c8166d92a40a6.png\" alt=\"8c9baa1cde79317f188c8166d92a40a6.png\"></p>\n<h2 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h2><p>ESLint 是一款语法检测工具<br><img src=\"https://img.gejiba.com/images/53ec8f35799f898d26f632c4ee80986f.png\" alt=\"53ec8f35799f898d26f632c4ee80986f.png\"></p>\n<h2 id=\"Project-Manager\"><a href=\"#Project-Manager\" class=\"headerlink\" title=\"Project Manager\"></a>Project Manager</h2><p>在多个项目中快速切换<br><img src=\"https://img.gejiba.com/images/5de716a35f6675603600a906902a8d19.png\" alt=\"5de716a35f6675603600a906902a8d19.png\"></p>\n<h2 id=\"ES7-React-Redux-GraphQL-React-Native-snippets\"><a href=\"#ES7-React-Redux-GraphQL-React-Native-snippets\" class=\"headerlink\" title=\"ES7 React/Redux/GraphQL/React-Native snippets\"></a>ES7 React/Redux/GraphQL/React-Native snippets</h2><p>只需要敲简单的关键字就能快速生成代码模版<br><img src=\"https://img.gejiba.com/images/c775bc3c83b5ce28d67fd182f7dd268a.png\" alt=\"c775bc3c83b5ce28d67fd182f7dd268a.png\"></p>\n"},{"title":"webpack5基础配置","date":"2022-07-05T00:40:04.894Z","description":" ","_content":"\n## 前言\n\n### 为什么需要打包工具？\n\n日常开发中，我们会使用框架（React、Vue），ES6 模块化语法，Less/Sass 等 css 预处理器等语法进行开发。\n\n这些代码要想在浏览器运行必须经过编译成浏览器能识别的 JS、Css 等语法，才能运行。\n\n所以我们需要打包工具帮我们做完这些事。\n\n除此之外，打包工具还能压缩代码、做兼容性处理、提升代码性能等。\n\n### 有哪些打包工具？\n\n- Grunt\n- Gulp\n- Parcel\n- Webpack\n- Rollup\n- Vite\n- ...\n\n目前市面上最流行的打包工具是 Webpack\n\n## 基本使用\n\n**Webpack 是一个静态资源打包工具。**\n它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。\n\n输出的文件就是编译好的文件，就可以在浏览器段运行了。\n\n我们将 Webpack 输出的文件叫做 bundle。\n\n### 功能介绍\n\nWebpack 本身功能是有限的:\n\n- 开发模式：仅能编译 JS 中的 ES Module 语法\n- 生产模式：能编译 JS 中的 ES Module 语法，还能压缩 JS 代码\n\n### 开始使用\n\n#### 1. 资源目录\n\n```\nwebpack_code # 项目根目录（所有指令必须在这个目录运行）\n    └── src # 项目源码目录\n        ├── js # js文件目录\n        │   ├── count.js\n        │   └── sum.js\n        └── main.js # 项目主文件\n\n```\n\n#### 2.创建文件\n\n- count.js\n\n```\nexport default function count(x, y) {\n  return x - y;\n}\n```\n\n- sum.js\n\n```\nexport default function sum(...args) {\n  return args.reduce((p, c) => p + c, 0);\n}\n```\n\n- main.js\n\n```\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n#### 3.下载依赖\n\n打开终端，在项目根目录。运行以下指令：\n\n- 初始化 package.json\n\n```\nnpm init -y\n```\n\n此时会生成一个基础的 package.json 文件。\n**需要注意的是 package.json 中 name 字段不能叫做 webpack, 否则下一步会报错**\n\n- 下载依赖\n\n```\nnpm i webpack webpack-cli -D\n```\n\n#### 4. 启用 Webpack\n\n- 开发模式\n\n```\nnpx webpack ./src/main.js --mode=development\n```\n\n- 生产模式\n\n```\nnpx webpack ./src/main.js --mode=production\n```\n\n`npx webpack`: 是用来运行本地安装 Webpack 包的。\n`./src/main.js`: 指定 Webpack 从 main.js 文件开始打包，不但会打包 main.js，还会将其依赖也一起打包进来。\n`--mode=xxx`：指定模式（环境）。\n\n#### 5. 观察输出文件\n\n默认 `Webpack` 会将文件打包输出到 `dist` 目录下，我们查看 `dist` 目录下文件情况就好了\n\n## 基本配置\n\n### 5 大核心概念\n\n- **entry（入口）** :指示 Webpack 从哪个文件开始打包\n- **output（输出）**:指示 Webpack 打包完的文件输出到哪里去，如何命名等\n- **loader（加载器）**:webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析\n- **plugins（插件）**:扩展 Webpack 的功能\n- **mode（模式）**\n  主要有两种模式：\n  - 开发模式：development\n  - 生产模式：production\n\n### 创建 Webpack 配置文件\n\n在项目根目录下新建文件：webpack.config.js\n\n```\nmodule.exports = {\n  // 入口\n  entry: \"\",\n  // 输出\n  output: {},\n  // 加载器\n  module: {\n    rules: [],\n  },\n  // 插件\n  plugins: [],\n  // 模式\n  mode: \"\",\n};\n\n```\n\nWebpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范\n\n### 修改配置文件\n\n1. 配置文件\n\n```javascript\n// Node.js的核心模块，专门用来处理文件路径\nconst path = require(\"path\");\n\nmodule.exports = {\n  // 入口\n  // 相对路径和绝对路径都行\n  entry: \"./src/main.js\",\n  // 输出\n  output: {\n    // path: 文件输出目录，必须是绝对路径\n    // path.resolve()方法返回一个绝对路径\n    // __dirname 当前文件的文件夹绝对路径\n    path: path.resolve(__dirname, \"dist\"),\n    // filename: 输出文件名\n    filename: \"main.js\",\n  },\n  // 加载器\n  module: {\n    rules: [],\n  },\n  // 插件\n  plugins: [],\n  // 模式\n  mode: \"development\", // 开发模式\n};\n```\n\n2. 运行指令\n\n```\nnpx webpack\n```\n\n此时功能和之前一样，也不能处理样式资源\n\n## 开发模式介绍\n\n开发模式顾名思义就是我们开发代码时使用的模式。\n这个模式下我们主要做两件事：\n\n1. 编译代码，使浏览器能识别运行\n   开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源\n2. 代码质量检查，树立代码规范\n   提前检查代码的一些隐患，让代码运行时能更加健壮。\n   提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。\n\n## 处理样式资源\n\n### 介绍\n\nWebpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源\n\n我们找 Loader 都应该去官方文档中找到对应的 Loader，然后使用\n\n官方文档找不到的话，可以从社区 Github 中搜索查询\n\n[Webpack 官方 Loader 文档](https://webpack.docschina.org/loaders/)\n\n### 处理 Css 资源\n\n1. 下载包\n\n```\nnpm i css-loader style-loader -D\n```\n\n注意：需要下载两个 loader 2. 功能介绍\n\n- `css-loader`: 负责将 Css 文件编译成 Webpack 能识别的模块\n- `style-loader`: 会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容\n  此时样式就会以 Style 标签的形式在页面上生效\n\n3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n4. 添加 Css 资源\n\n```css src/css/index.css\n.box1 {\n  width: 100px;\n  height: 100px;\n  background-color: pink;\n}\n```\n\n```js src/main.js\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n// 引入 Css 资源，Webpack才会对其打包\nimport \"./css/index.css\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <!-- 准备一个使用样式的 DOM 容器 -->\n    <div class=\"box1\"></div>\n    <!-- 引入打包后的js文件，才能看到效果 -->\n    <script src=\"../dist/main.js\"></script>\n  </body>\n</html>\n```\n\n5. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n### 处理 Less 资源\n\n1. 下载包\n\n```\nnpm i less-loader -D\n```\n\n2. 功能介绍\n\n- `less-loader`: 负责将 Less 文件编译成 Css 文件\n\n3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n4. 添加 Less 资源\n\n```less src/less/index.less\n.box2 {\n  width: 100px;\n  height: 100px;\n  background-color: deeppink;\n}\n```\n\n```js src/main.js\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n// 引入资源，Webpack才会对其打包\nimport \"./css/index.css\";\nimport \"./less/index.less\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <script src=\"../dist/main.js\"></script>\n  </body>\n</html>\n```\n\n5. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n### 处理 Sass 和 Scss 资源\n\n1. 下载包\n\n```\nnpm i sass-loader sass -D\n```\n\n注意：需要下载两个\n\n2. 功能介绍\n\n- **sass-loader**: 负责将 **Sass** 文件编译成 **css** 文件\n- **sass**: **sass-loader** 依赖 **sass** 进行编译\n\n3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n4. 添加 Sass 资源\n\n```css src/sass/index.sass\n/* 可以省略大括号和分号 */\n.box3\n  width: 100px\n  height: 100px\n  background-color: hotpink\n```\n\n```css src/sass/index.scss\n.box4 {\n  width: 100px;\n  height: 100px;\n  background-color: lightpink;\n}\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"box3\"></div>\n    <div class=\"box4\"></div>\n    <script src=\"../dist/main.js\"></script>\n  </body>\n</html>\n```\n\n5. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n### 处理 Styl 资源\n\n1. 下载包\n\n```\nnpm i stylus-loader -D\n```\n\n2. 功能介绍\n\n- **stylus-loader**: 负责将 **Styl** 文件编译成 **Css** 文件\n\n3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n4. 添加 Styl 资源\n\n```style src/styl/index.styl\n/* 可以省略大括号、分号、冒号 */\n.box\n  width 100px\n  height 100px\n  background-color pink\n```\n\n```js src/main.js\nimport { add } from \"./math\";\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n// 引入资源，Webpack才会对其打包\nimport \"./css/index.css\";\nimport \"./less/index.less\";\nimport \"./sass/index.sass\";\nimport \"./sass/index.scss\";\nimport \"./styl/index.styl\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <!-- 准备一个使用样式的 DOM 容器 -->\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"box3\"></div>\n    <div class=\"box4\"></div>\n    <div class=\"box5\"></div>\n    <script src=\"../dist/main.js\"></script>\n  </body>\n</html>\n```\n\n5. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n## 处理图片资源\n\n过去在 Webpack4 时，我们处理图片资源通过 file-loader 和 url-loader 进行处理\n现在 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源\n\n1. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n2. 添加图片资源\n\n- src/images/1.jpeg\n- src/images/2.png\n- src/images/3.gif\n\n3. 使用图片资源\n\n```less src/less/index.less\n.box2 {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"../images/1.jpeg\");\n  background-size: cover;\n}\n```\n\n```sass src/sass/index.sass\n.box3\n  width: 100px\n  height: 100px\n  background-image: url(\"../images/2.png\")\n  background-size: cover\n```\n\n```styl src/styl/index.styl\n.box5\n  width 100px\n  height 100px\n  background-image url(\"../images/3.gif\")\n  background-size cover\n\n```\n\n4. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n5. 输出资源情况\n   此时如果查看 dist 目录的话，会发现多了三张图片资源\n   因为 Webpack 会将所有打包好的资源输出到 dist 目录下\n\n- 为什么样式资源没有呢？\n  因为经过 style-loader 的处理，样式资源打包到 main.js 里面去了，所以没有额外输出出来\n\n6. 对图片资源进行优化\n   将小于某个大小的图片转化成 data URI 形式（Base64 格式）\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: {\n          dataUrlCondition: {\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          },\n        },\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n- 优点：减少请求数量\n- 缺点：体积变得更大\n\n## 修改输出资源的名称和路径\n\n1. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: {\n          dataUrlCondition: {\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          },\n        },\n        generator: {\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        },\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n2. 修改 index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"box3\"></div>\n    <div class=\"box4\"></div>\n    <div class=\"box5\"></div>\n    <!-- 修改 js 资源路径 -->\n    <script src=\"../dist/static/js/main.js\"></script>\n  </body>\n</html>\n```\n\n3. 运行指令\n\n```\nnpx webpack\n```\n\n此时输出文件目录：（注意：需要将上次打包生成的文件清空，再重新打包才有效果）\n\n```\n├── dist\n    └── static\n         ├── imgs\n         │    └── 7003350e.png\n         └── js\n              └── main.js\n\n```\n\n## 自动清空上次打包资源\n\n1. 配置\n\n```js\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"static/js/main.js\",\n    clean: true, // 自动将上次打包目录资源清空\n  },\n  .\n  .\n  .\n```\n\n2. 运行指令\n\n```\nnpx webpack\n```\n\n观察 dist 目录资源情况\n\n## 处理字体图标资源\n\n### 1. 下载字体图标文件\n\n1. 打开[阿里巴巴矢量图标库](https://www.iconfont.cn/)\n2. 选择想要的图标添加到购物车，统一下载到本地\n\n### 2. 添加字体图标资源\n\n- src/fonts/iconfont.ttf\n\n- src/fonts/iconfont.woff\n\n- src/fonts/iconfont.woff2\n\n- src/css/iconfont.css\n  注意字体文件路径需要修改\n\n```js src/main.js\nimport { add } from \"./math\";\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n// 引入资源，Webpack才会对其打包\nimport \"./css/iconfont.css\";\nimport \"./css/index.css\";\nimport \"./less/index.less\";\nimport \"./sass/index.sass\";\nimport \"./sass/index.scss\";\nimport \"./styl/index.styl\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"box3\"></div>\n    <div class=\"box4\"></div>\n    <div class=\"box5\"></div>\n    <!-- 使用字体图标 -->\n    <i class=\"iconfont icon-arrow-down\"></i>\n    <i class=\"iconfont icon-ashbin\"></i>\n    <i class=\"iconfont icon-browse\"></i>\n    <script src=\"../dist/static/js/main.js\"></script>\n  </body>\n</html>\n```\n\n### 3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n    clean: true, // 自动将上次打包目录资源清空\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: {\n          dataUrlCondition: {\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          },\n        },\n        generator: {\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        },\n      },\n      {\n        test: /\\.(ttf|woff2?)$/,\n        type: \"asset/resource\",\n        generator: {\n          filename: \"static/media/[hash:8][ext][query]\",\n        },\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n`type: \"asset/resource\"`和`type: \"asset\"`的区别： 1.` type: \"asset/resource\"` 相当于 file-loader, 将文件转化成 Webpack 能识别的资源，其他不做处理 2.`type: \"asset\"` 相当于 url-loader, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式\n\n### 4.运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n\n## 处理其他资源\n开发中可能还存在一些其他资源，如音视频等，我们也一起处理了\n### 1.配置\n```\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n    clean: true, // 自动将上次打包目录资源清空\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: {\n          dataUrlCondition: {\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          },\n        },\n        generator: {\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        },\n      },\n      {\n        test: /\\.(ttf|woff2?|map4|map3|avi)$/,\n        type: \"asset/resource\",\n        generator: {\n          filename: \"static/media/[hash:8][ext][query]\",\n        },\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n就是在处理字体图标资源基础上增加其他文件类型，统一处理即可\n### 2.运行指令\n```\nnpx webpack\n```","source":"_posts/webpack.md","raw":"---\ntitle: \"webpack5基础配置\"\ndate:\n  \"[object Object]\": null\ntags:\n  - webpack5\ncategories:\n  - 前端工具\ndescription: \" \"\n---\n\n## 前言\n\n### 为什么需要打包工具？\n\n日常开发中，我们会使用框架（React、Vue），ES6 模块化语法，Less/Sass 等 css 预处理器等语法进行开发。\n\n这些代码要想在浏览器运行必须经过编译成浏览器能识别的 JS、Css 等语法，才能运行。\n\n所以我们需要打包工具帮我们做完这些事。\n\n除此之外，打包工具还能压缩代码、做兼容性处理、提升代码性能等。\n\n### 有哪些打包工具？\n\n- Grunt\n- Gulp\n- Parcel\n- Webpack\n- Rollup\n- Vite\n- ...\n\n目前市面上最流行的打包工具是 Webpack\n\n## 基本使用\n\n**Webpack 是一个静态资源打包工具。**\n它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。\n\n输出的文件就是编译好的文件，就可以在浏览器段运行了。\n\n我们将 Webpack 输出的文件叫做 bundle。\n\n### 功能介绍\n\nWebpack 本身功能是有限的:\n\n- 开发模式：仅能编译 JS 中的 ES Module 语法\n- 生产模式：能编译 JS 中的 ES Module 语法，还能压缩 JS 代码\n\n### 开始使用\n\n#### 1. 资源目录\n\n```\nwebpack_code # 项目根目录（所有指令必须在这个目录运行）\n    └── src # 项目源码目录\n        ├── js # js文件目录\n        │   ├── count.js\n        │   └── sum.js\n        └── main.js # 项目主文件\n\n```\n\n#### 2.创建文件\n\n- count.js\n\n```\nexport default function count(x, y) {\n  return x - y;\n}\n```\n\n- sum.js\n\n```\nexport default function sum(...args) {\n  return args.reduce((p, c) => p + c, 0);\n}\n```\n\n- main.js\n\n```\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n#### 3.下载依赖\n\n打开终端，在项目根目录。运行以下指令：\n\n- 初始化 package.json\n\n```\nnpm init -y\n```\n\n此时会生成一个基础的 package.json 文件。\n**需要注意的是 package.json 中 name 字段不能叫做 webpack, 否则下一步会报错**\n\n- 下载依赖\n\n```\nnpm i webpack webpack-cli -D\n```\n\n#### 4. 启用 Webpack\n\n- 开发模式\n\n```\nnpx webpack ./src/main.js --mode=development\n```\n\n- 生产模式\n\n```\nnpx webpack ./src/main.js --mode=production\n```\n\n`npx webpack`: 是用来运行本地安装 Webpack 包的。\n`./src/main.js`: 指定 Webpack 从 main.js 文件开始打包，不但会打包 main.js，还会将其依赖也一起打包进来。\n`--mode=xxx`：指定模式（环境）。\n\n#### 5. 观察输出文件\n\n默认 `Webpack` 会将文件打包输出到 `dist` 目录下，我们查看 `dist` 目录下文件情况就好了\n\n## 基本配置\n\n### 5 大核心概念\n\n- **entry（入口）** :指示 Webpack 从哪个文件开始打包\n- **output（输出）**:指示 Webpack 打包完的文件输出到哪里去，如何命名等\n- **loader（加载器）**:webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析\n- **plugins（插件）**:扩展 Webpack 的功能\n- **mode（模式）**\n  主要有两种模式：\n  - 开发模式：development\n  - 生产模式：production\n\n### 创建 Webpack 配置文件\n\n在项目根目录下新建文件：webpack.config.js\n\n```\nmodule.exports = {\n  // 入口\n  entry: \"\",\n  // 输出\n  output: {},\n  // 加载器\n  module: {\n    rules: [],\n  },\n  // 插件\n  plugins: [],\n  // 模式\n  mode: \"\",\n};\n\n```\n\nWebpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范\n\n### 修改配置文件\n\n1. 配置文件\n\n```javascript\n// Node.js的核心模块，专门用来处理文件路径\nconst path = require(\"path\");\n\nmodule.exports = {\n  // 入口\n  // 相对路径和绝对路径都行\n  entry: \"./src/main.js\",\n  // 输出\n  output: {\n    // path: 文件输出目录，必须是绝对路径\n    // path.resolve()方法返回一个绝对路径\n    // __dirname 当前文件的文件夹绝对路径\n    path: path.resolve(__dirname, \"dist\"),\n    // filename: 输出文件名\n    filename: \"main.js\",\n  },\n  // 加载器\n  module: {\n    rules: [],\n  },\n  // 插件\n  plugins: [],\n  // 模式\n  mode: \"development\", // 开发模式\n};\n```\n\n2. 运行指令\n\n```\nnpx webpack\n```\n\n此时功能和之前一样，也不能处理样式资源\n\n## 开发模式介绍\n\n开发模式顾名思义就是我们开发代码时使用的模式。\n这个模式下我们主要做两件事：\n\n1. 编译代码，使浏览器能识别运行\n   开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源\n2. 代码质量检查，树立代码规范\n   提前检查代码的一些隐患，让代码运行时能更加健壮。\n   提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。\n\n## 处理样式资源\n\n### 介绍\n\nWebpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源\n\n我们找 Loader 都应该去官方文档中找到对应的 Loader，然后使用\n\n官方文档找不到的话，可以从社区 Github 中搜索查询\n\n[Webpack 官方 Loader 文档](https://webpack.docschina.org/loaders/)\n\n### 处理 Css 资源\n\n1. 下载包\n\n```\nnpm i css-loader style-loader -D\n```\n\n注意：需要下载两个 loader 2. 功能介绍\n\n- `css-loader`: 负责将 Css 文件编译成 Webpack 能识别的模块\n- `style-loader`: 会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容\n  此时样式就会以 Style 标签的形式在页面上生效\n\n3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n4. 添加 Css 资源\n\n```css src/css/index.css\n.box1 {\n  width: 100px;\n  height: 100px;\n  background-color: pink;\n}\n```\n\n```js src/main.js\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n// 引入 Css 资源，Webpack才会对其打包\nimport \"./css/index.css\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <!-- 准备一个使用样式的 DOM 容器 -->\n    <div class=\"box1\"></div>\n    <!-- 引入打包后的js文件，才能看到效果 -->\n    <script src=\"../dist/main.js\"></script>\n  </body>\n</html>\n```\n\n5. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n### 处理 Less 资源\n\n1. 下载包\n\n```\nnpm i less-loader -D\n```\n\n2. 功能介绍\n\n- `less-loader`: 负责将 Less 文件编译成 Css 文件\n\n3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n4. 添加 Less 资源\n\n```less src/less/index.less\n.box2 {\n  width: 100px;\n  height: 100px;\n  background-color: deeppink;\n}\n```\n\n```js src/main.js\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n// 引入资源，Webpack才会对其打包\nimport \"./css/index.css\";\nimport \"./less/index.less\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <script src=\"../dist/main.js\"></script>\n  </body>\n</html>\n```\n\n5. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n### 处理 Sass 和 Scss 资源\n\n1. 下载包\n\n```\nnpm i sass-loader sass -D\n```\n\n注意：需要下载两个\n\n2. 功能介绍\n\n- **sass-loader**: 负责将 **Sass** 文件编译成 **css** 文件\n- **sass**: **sass-loader** 依赖 **sass** 进行编译\n\n3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n4. 添加 Sass 资源\n\n```css src/sass/index.sass\n/* 可以省略大括号和分号 */\n.box3\n  width: 100px\n  height: 100px\n  background-color: hotpink\n```\n\n```css src/sass/index.scss\n.box4 {\n  width: 100px;\n  height: 100px;\n  background-color: lightpink;\n}\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"box3\"></div>\n    <div class=\"box4\"></div>\n    <script src=\"../dist/main.js\"></script>\n  </body>\n</html>\n```\n\n5. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n### 处理 Styl 资源\n\n1. 下载包\n\n```\nnpm i stylus-loader -D\n```\n\n2. 功能介绍\n\n- **stylus-loader**: 负责将 **Styl** 文件编译成 **Css** 文件\n\n3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n4. 添加 Styl 资源\n\n```style src/styl/index.styl\n/* 可以省略大括号、分号、冒号 */\n.box\n  width 100px\n  height 100px\n  background-color pink\n```\n\n```js src/main.js\nimport { add } from \"./math\";\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n// 引入资源，Webpack才会对其打包\nimport \"./css/index.css\";\nimport \"./less/index.less\";\nimport \"./sass/index.sass\";\nimport \"./sass/index.scss\";\nimport \"./styl/index.styl\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <!-- 准备一个使用样式的 DOM 容器 -->\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"box3\"></div>\n    <div class=\"box4\"></div>\n    <div class=\"box5\"></div>\n    <script src=\"../dist/main.js\"></script>\n  </body>\n</html>\n```\n\n5. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n## 处理图片资源\n\n过去在 Webpack4 时，我们处理图片资源通过 file-loader 和 url-loader 进行处理\n现在 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源\n\n1. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n2. 添加图片资源\n\n- src/images/1.jpeg\n- src/images/2.png\n- src/images/3.gif\n\n3. 使用图片资源\n\n```less src/less/index.less\n.box2 {\n  width: 100px;\n  height: 100px;\n  background-image: url(\"../images/1.jpeg\");\n  background-size: cover;\n}\n```\n\n```sass src/sass/index.sass\n.box3\n  width: 100px\n  height: 100px\n  background-image: url(\"../images/2.png\")\n  background-size: cover\n```\n\n```styl src/styl/index.styl\n.box5\n  width 100px\n  height 100px\n  background-image url(\"../images/3.gif\")\n  background-size cover\n\n```\n\n4. 运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n5. 输出资源情况\n   此时如果查看 dist 目录的话，会发现多了三张图片资源\n   因为 Webpack 会将所有打包好的资源输出到 dist 目录下\n\n- 为什么样式资源没有呢？\n  因为经过 style-loader 的处理，样式资源打包到 main.js 里面去了，所以没有额外输出出来\n\n6. 对图片资源进行优化\n   将小于某个大小的图片转化成 data URI 形式（Base64 格式）\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"main.js\",\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: {\n          dataUrlCondition: {\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          },\n        },\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n- 优点：减少请求数量\n- 缺点：体积变得更大\n\n## 修改输出资源的名称和路径\n\n1. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: {\n          dataUrlCondition: {\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          },\n        },\n        generator: {\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        },\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n2. 修改 index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"box3\"></div>\n    <div class=\"box4\"></div>\n    <div class=\"box5\"></div>\n    <!-- 修改 js 资源路径 -->\n    <script src=\"../dist/static/js/main.js\"></script>\n  </body>\n</html>\n```\n\n3. 运行指令\n\n```\nnpx webpack\n```\n\n此时输出文件目录：（注意：需要将上次打包生成的文件清空，再重新打包才有效果）\n\n```\n├── dist\n    └── static\n         ├── imgs\n         │    └── 7003350e.png\n         └── js\n              └── main.js\n\n```\n\n## 自动清空上次打包资源\n\n1. 配置\n\n```js\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"static/js/main.js\",\n    clean: true, // 自动将上次打包目录资源清空\n  },\n  .\n  .\n  .\n```\n\n2. 运行指令\n\n```\nnpx webpack\n```\n\n观察 dist 目录资源情况\n\n## 处理字体图标资源\n\n### 1. 下载字体图标文件\n\n1. 打开[阿里巴巴矢量图标库](https://www.iconfont.cn/)\n2. 选择想要的图标添加到购物车，统一下载到本地\n\n### 2. 添加字体图标资源\n\n- src/fonts/iconfont.ttf\n\n- src/fonts/iconfont.woff\n\n- src/fonts/iconfont.woff2\n\n- src/css/iconfont.css\n  注意字体文件路径需要修改\n\n```js src/main.js\nimport { add } from \"./math\";\nimport count from \"./js/count\";\nimport sum from \"./js/sum\";\n// 引入资源，Webpack才会对其打包\nimport \"./css/iconfont.css\";\nimport \"./css/index.css\";\nimport \"./less/index.less\";\nimport \"./sass/index.sass\";\nimport \"./sass/index.scss\";\nimport \"./styl/index.styl\";\n\nconsole.log(count(2, 1));\nconsole.log(sum(1, 2, 3, 4));\n```\n\n```html public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>webpack5</title>\n  </head>\n  <body>\n    <h1>Hello Webpack5</h1>\n    <div class=\"box1\"></div>\n    <div class=\"box2\"></div>\n    <div class=\"box3\"></div>\n    <div class=\"box4\"></div>\n    <div class=\"box5\"></div>\n    <!-- 使用字体图标 -->\n    <i class=\"iconfont icon-arrow-down\"></i>\n    <i class=\"iconfont icon-ashbin\"></i>\n    <i class=\"iconfont icon-browse\"></i>\n    <script src=\"../dist/static/js/main.js\"></script>\n  </body>\n</html>\n```\n\n### 3. 配置\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n    clean: true, // 自动将上次打包目录资源清空\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: {\n          dataUrlCondition: {\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          },\n        },\n        generator: {\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        },\n      },\n      {\n        test: /\\.(ttf|woff2?)$/,\n        type: \"asset/resource\",\n        generator: {\n          filename: \"static/media/[hash:8][ext][query]\",\n        },\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n\n`type: \"asset/resource\"`和`type: \"asset\"`的区别： 1.` type: \"asset/resource\"` 相当于 file-loader, 将文件转化成 Webpack 能识别的资源，其他不做处理 2.`type: \"asset\"` 相当于 url-loader, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式\n\n### 4.运行指令\n\n```\nnpx webpack\n```\n\n打开 index.html 页面查看效果\n\n\n## 处理其他资源\n开发中可能还存在一些其他资源，如音视频等，我们也一起处理了\n### 1.配置\n```\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/main.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"static/js/main.js\", // 将 js 文件输出到 static/js 目录中\n    clean: true, // 自动将上次打包目录资源清空\n  },\n  module: {\n    rules: [\n      {\n        // 用来匹配 .css 结尾的文件\n        test: /\\.css$/,\n        // use 数组里面 Loader 执行顺序是从右到左\n        use: [\"style-loader\", \"css-loader\"],\n      },\n      {\n        test: /\\.less$/,\n        use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n      },\n      {\n        test: /\\.s[ac]ss$/,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.styl$/,\n        use: [\"style-loader\", \"css-loader\", \"stylus-loader\"],\n      },\n      {\n        test: /\\.(png|jpe?g|gif|webp)$/,\n        type: \"asset\",\n        parser: {\n          dataUrlCondition: {\n            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\n          },\n        },\n        generator: {\n          // 将图片文件输出到 static/imgs 目录中\n          // 将图片文件命名 [hash:8][ext][query]\n          // [hash:8]: hash值取8位\n          // [ext]: 使用之前的文件扩展名\n          // [query]: 添加之前的query参数\n          filename: \"static/imgs/[hash:8][ext][query]\",\n        },\n      },\n      {\n        test: /\\.(ttf|woff2?|map4|map3|avi)$/,\n        type: \"asset/resource\",\n        generator: {\n          filename: \"static/media/[hash:8][ext][query]\",\n        },\n      },\n    ],\n  },\n  plugins: [],\n  mode: \"development\",\n};\n```\n就是在处理字体图标资源基础上增加其他文件类型，统一处理即可\n### 2.运行指令\n```\nnpx webpack\n```","slug":"webpack","published":1,"updated":"2022-07-07T07:10:29.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl68qk8wh00086qjcccjlgnno","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"为什么需要打包工具？\"><a href=\"#为什么需要打包工具？\" class=\"headerlink\" title=\"为什么需要打包工具？\"></a>为什么需要打包工具？</h3><p>日常开发中，我们会使用框架（React、Vue），ES6 模块化语法，Less/Sass 等 css 预处理器等语法进行开发。</p>\n<p>这些代码要想在浏览器运行必须经过编译成浏览器能识别的 JS、Css 等语法，才能运行。</p>\n<p>所以我们需要打包工具帮我们做完这些事。</p>\n<p>除此之外，打包工具还能压缩代码、做兼容性处理、提升代码性能等。</p>\n<h3 id=\"有哪些打包工具？\"><a href=\"#有哪些打包工具？\" class=\"headerlink\" title=\"有哪些打包工具？\"></a>有哪些打包工具？</h3><ul>\n<li>Grunt</li>\n<li>Gulp</li>\n<li>Parcel</li>\n<li>Webpack</li>\n<li>Rollup</li>\n<li>Vite</li>\n<li>…</li>\n</ul>\n<p>目前市面上最流行的打包工具是 Webpack</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p><strong>Webpack 是一个静态资源打包工具。</strong><br>它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。</p>\n<p>输出的文件就是编译好的文件，就可以在浏览器段运行了。</p>\n<p>我们将 Webpack 输出的文件叫做 bundle。</p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>Webpack 本身功能是有限的:</p>\n<ul>\n<li>开发模式：仅能编译 JS 中的 ES Module 语法</li>\n<li>生产模式：能编译 JS 中的 ES Module 语法，还能压缩 JS 代码</li>\n</ul>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><h4 id=\"1-资源目录\"><a href=\"#1-资源目录\" class=\"headerlink\" title=\"1. 资源目录\"></a>1. 资源目录</h4><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack_code <span class=\"comment\"># 项目根目录（所有指令必须在这个目录运行）</span></span><br><span class=\"line\">    └── src <span class=\"comment\"># 项目源码目录</span></span><br><span class=\"line\">        ├── <span class=\"keyword\">js </span><span class=\"comment\"># js文件目录</span></span><br><span class=\"line\">        │   ├── <span class=\"built_in\">count</span>.<span class=\"keyword\">js</span></span><br><span class=\"line\"><span class=\"keyword\"></span>        │   └── sum.<span class=\"keyword\">js</span></span><br><span class=\"line\"><span class=\"keyword\"></span>        └── main.<span class=\"keyword\">js </span><span class=\"comment\"># 项目主文件</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建文件\"><a href=\"#2-创建文件\" class=\"headerlink\" title=\"2.创建文件\"></a>2.创建文件</h4><ul>\n<li>count.js</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default <span class=\"keyword\">function</span> <span class=\"title\">count</span>(x, y) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">x</span> - y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>sum.js</li>\n</ul>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args.reduce((p, c) =&gt; p + c, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main.js</li>\n</ul>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import <span class=\"built_in\">count</span> from <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\">import <span class=\"built_in\">sum</span> from <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"built_in\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-下载依赖\"><a href=\"#3-下载依赖\" class=\"headerlink\" title=\"3.下载依赖\"></a>3.下载依赖</h4><p>打开终端，在项目根目录。运行以下指令：</p>\n<ul>\n<li>初始化 package.json</li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> init -y</span><br></pre></td></tr></table></figure>\n\n<p>此时会生成一个基础的 package.json 文件。<br><strong>需要注意的是 package.json 中 name 字段不能叫做 webpack, 否则下一步会报错</strong></p>\n<ul>\n<li>下载依赖</li>\n</ul>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-<span class=\"keyword\">cli</span> -D</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-启用-Webpack\"><a href=\"#4-启用-Webpack\" class=\"headerlink\" title=\"4. 启用 Webpack\"></a>4. 启用 Webpack</h4><ul>\n<li>开发模式</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack .<span class=\"regexp\">/src/m</span>ain.js --mode=development</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生产模式</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack .<span class=\"regexp\">/src/m</span>ain.js --mode=production</span><br></pre></td></tr></table></figure>\n\n<p><code>npx webpack</code>: 是用来运行本地安装 Webpack 包的。<br><code>./src/main.js</code>: 指定 Webpack 从 main.js 文件开始打包，不但会打包 main.js，还会将其依赖也一起打包进来。<br><code>--mode=xxx</code>：指定模式（环境）。</p>\n<h4 id=\"5-观察输出文件\"><a href=\"#5-观察输出文件\" class=\"headerlink\" title=\"5. 观察输出文件\"></a>5. 观察输出文件</h4><p>默认 <code>Webpack</code> 会将文件打包输出到 <code>dist</code> 目录下，我们查看 <code>dist</code> 目录下文件情况就好了</p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"5-大核心概念\"><a href=\"#5-大核心概念\" class=\"headerlink\" title=\"5 大核心概念\"></a>5 大核心概念</h3><ul>\n<li><strong>entry（入口）</strong> :指示 Webpack 从哪个文件开始打包</li>\n<li><strong>output（输出）</strong>:指示 Webpack 打包完的文件输出到哪里去，如何命名等</li>\n<li><strong>loader（加载器）</strong>:webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析</li>\n<li><strong>plugins（插件）</strong>:扩展 Webpack 的功能</li>\n<li><strong>mode（模式）</strong><br>主要有两种模式：<ul>\n<li>开发模式：development</li>\n<li>生产模式：production</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建-Webpack-配置文件\"><a href=\"#创建-Webpack-配置文件\" class=\"headerlink\" title=\"创建 Webpack 配置文件\"></a>创建 Webpack 配置文件</h3><p>在项目根目录下新建文件：webpack.config.js</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.<span class=\"attr\">exports</span> <span class=\"operator\">=</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 入口</span></span><br><span class=\"line\"><span class=\"symbol\">  entry:</span> <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"symbol\">  output:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 加载器</span></span><br><span class=\"line\"><span class=\"symbol\">  module:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">    rules:</span> [],</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\"><span class=\"symbol\">  plugins:</span> [],</span><br><span class=\"line\">  <span class=\"comment\">// 模式</span></span><br><span class=\"line\"><span class=\"symbol\">  mode:</span> <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\"><span class=\"punctuation\">&#125;;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Webpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范</p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><ol>\n<li>配置文件</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Node.js的核心模块，专门用来处理文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  <span class=\"comment\">// 相对路径和绝对路径都行</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// path: 文件输出目录，必须是绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// path.resolve()方法返回一个绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// __dirname 当前文件的文件夹绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">// filename: 输出文件名</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 加载器</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"comment\">// 模式</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>此时功能和之前一样，也不能处理样式资源</p>\n<h2 id=\"开发模式介绍\"><a href=\"#开发模式介绍\" class=\"headerlink\" title=\"开发模式介绍\"></a>开发模式介绍</h2><p>开发模式顾名思义就是我们开发代码时使用的模式。<br>这个模式下我们主要做两件事：</p>\n<ol>\n<li>编译代码，使浏览器能识别运行<br>开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源</li>\n<li>代码质量检查，树立代码规范<br>提前检查代码的一些隐患，让代码运行时能更加健壮。<br>提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。</li>\n</ol>\n<h2 id=\"处理样式资源\"><a href=\"#处理样式资源\" class=\"headerlink\" title=\"处理样式资源\"></a>处理样式资源</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源</p>\n<p>我们找 Loader 都应该去官方文档中找到对应的 Loader，然后使用</p>\n<p>官方文档找不到的话，可以从社区 Github 中搜索查询</p>\n<p><a href=\"https://webpack.docschina.org/loaders/\">Webpack 官方 Loader 文档</a></p>\n<h3 id=\"处理-Css-资源\"><a href=\"#处理-Css-资源\" class=\"headerlink\" title=\"处理 Css 资源\"></a>处理 Css 资源</h3><ol>\n<li>下载包</li>\n</ol>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> i css-loader style-loader -D</span><br></pre></td></tr></table></figure>\n\n<p>注意：需要下载两个 loader 2. 功能介绍</p>\n<ul>\n<li><code>css-loader</code>: 负责将 Css 文件编译成 Webpack 能识别的模块</li>\n<li><code>style-loader</code>: 会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容<br>此时样式就会以 Style 标签的形式在页面上生效</li>\n</ul>\n<ol start=\"3\">\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>添加 Css 资源</li>\n</ol>\n<figure class=\"highlight css\"><figcaption><span>src/css/index.css</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>src/main.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入 Css 资源，Webpack才会对其打包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 准备一个使用样式的 DOM 容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入打包后的js文件，才能看到效果 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h3 id=\"处理-Less-资源\"><a href=\"#处理-Less-资源\" class=\"headerlink\" title=\"处理 Less 资源\"></a>处理 Less 资源</h3><ol>\n<li>下载包</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"keyword\">less</span>-loader -D</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>功能介绍</li>\n</ol>\n<ul>\n<li><code>less-loader</code>: 负责将 Less 文件编译成 Css 文件</li>\n</ul>\n<ol start=\"3\">\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>添加 Less 资源</li>\n</ol>\n<figure class=\"highlight less\"><figcaption><span>src/less/index.less</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: deeppink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>src/main.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入资源，Webpack才会对其打包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./less/index.less&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h3 id=\"处理-Sass-和-Scss-资源\"><a href=\"#处理-Sass-和-Scss-资源\" class=\"headerlink\" title=\"处理 Sass 和 Scss 资源\"></a>处理 Sass 和 Scss 资源</h3><ol>\n<li>下载包</li>\n</ol>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> i sass-loader sass -D</span><br></pre></td></tr></table></figure>\n\n<p>注意：需要下载两个</p>\n<ol start=\"2\">\n<li>功能介绍</li>\n</ol>\n<ul>\n<li><strong>sass-loader</strong>: 负责将 <strong>Sass</strong> 文件编译成 <strong>css</strong> 文件</li>\n<li><strong>sass</strong>: <strong>sass-loader</strong> 依赖 <strong>sass</strong> 进行编译</li>\n</ul>\n<ol start=\"3\">\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>添加 Sass 资源</li>\n</ol>\n<figure class=\"highlight css\"><figcaption><span>src/sass/index.sass</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 可以省略大括号和分号 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box3</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span></span><br><span class=\"line\">  height: <span class=\"number\">100px</span></span><br><span class=\"line\">  background-color: hotpink</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><figcaption><span>src/sass/index.scss</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightpink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h3 id=\"处理-Styl-资源\"><a href=\"#处理-Styl-资源\" class=\"headerlink\" title=\"处理 Styl 资源\"></a>处理 Styl 资源</h3><ol>\n<li>下载包</li>\n</ol>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> i stylus-loader -D</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>功能介绍</li>\n</ol>\n<ul>\n<li><strong>stylus-loader</strong>: 负责将 <strong>Styl</strong> 文件编译成 <strong>Css</strong> 文件</li>\n</ul>\n<ol start=\"3\">\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>添加 Styl 资源</li>\n</ol>\n<figure class=\"highlight plaintext\"><figcaption><span>src/styl/index.styl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 可以省略大括号、分号、冒号 */</span><br><span class=\"line\">.box</span><br><span class=\"line\">  width 100px</span><br><span class=\"line\">  height 100px</span><br><span class=\"line\">  background-color pink</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>src/main.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./math&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入资源，Webpack才会对其打包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./less/index.less&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./sass/index.sass&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./sass/index.scss&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./styl/index.styl&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 准备一个使用样式的 DOM 容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h2 id=\"处理图片资源\"><a href=\"#处理图片资源\" class=\"headerlink\" title=\"处理图片资源\"></a>处理图片资源</h2><p>过去在 Webpack4 时，我们处理图片资源通过 file-loader 和 url-loader 进行处理<br>现在 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源</p>\n<ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>添加图片资源</li>\n</ol>\n<ul>\n<li>src/images/1.jpeg</li>\n<li>src/images/2.png</li>\n<li>src/images/3.gif</li>\n</ul>\n<ol start=\"3\">\n<li>使用图片资源</li>\n</ol>\n<figure class=\"highlight less\"><figcaption><span>src/less/index.less</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: url(<span class=\"string\">&quot;../images/1.jpeg&quot;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>src/sass/index.sass</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box3</span><br><span class=\"line\">  width: 100px</span><br><span class=\"line\">  height: 100px</span><br><span class=\"line\">  background-image: url(&quot;../images/2.png&quot;)</span><br><span class=\"line\">  background-size: cover</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight styl\"><figcaption><span>src/styl/index.styl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box5</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span> <span class=\"number\">100px</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span> <span class=\"number\">100px</span></span><br><span class=\"line\">  <span class=\"attribute\">background-image</span> url(<span class=\"string\">&quot;../images/3.gif&quot;</span>)</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span> cover</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<ol start=\"5\">\n<li>输出资源情况<br>此时如果查看 dist 目录的话，会发现多了三张图片资源<br>因为 Webpack 会将所有打包好的资源输出到 dist 目录下</li>\n</ol>\n<ul>\n<li>为什么样式资源没有呢？<br>因为经过 style-loader 的处理，样式资源打包到 main.js 里面去了，所以没有额外输出出来</li>\n</ul>\n<ol start=\"6\">\n<li>对图片资源进行优化<br>将小于某个大小的图片转化成 data URI 形式（Base64 格式）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点：减少请求数量</li>\n<li>缺点：体积变得更大</li>\n</ul>\n<h2 id=\"修改输出资源的名称和路径\"><a href=\"#修改输出资源的名称和路径\" class=\"headerlink\" title=\"修改输出资源的名称和路径\"></a>修改输出资源的名称和路径</h2><ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/js/main.js&quot;</span>, <span class=\"comment\">// 将 js 文件输出到 static/js 目录中</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class=\"line\">          <span class=\"comment\">// [hash:8]: hash值取8位</span></span><br><span class=\"line\">          <span class=\"comment\">// [ext]: 使用之前的文件扩展名</span></span><br><span class=\"line\">          <span class=\"comment\">// [query]: 添加之前的query参数</span></span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改 index.html</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 修改 js 资源路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/static/js/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>此时输出文件目录：（注意：需要将上次打包生成的文件清空，再重新打包才有效果）</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── <span class=\"keyword\">dist</span></span><br><span class=\"line\"><span class=\"keyword\"></span>    └── static</span><br><span class=\"line\">         ├── imgs</span><br><span class=\"line\">         │    └── <span class=\"number\">7003350</span>e.png</span><br><span class=\"line\">         └── <span class=\"keyword\">js</span></span><br><span class=\"line\"><span class=\"keyword\"></span>              └── main.<span class=\"keyword\">js</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动清空上次打包资源\"><a href=\"#自动清空上次打包资源\" class=\"headerlink\" title=\"自动清空上次打包资源\"></a>自动清空上次打包资源</h2><ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/js/main.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动将上次打包目录资源清空</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>观察 dist 目录资源情况</p>\n<h2 id=\"处理字体图标资源\"><a href=\"#处理字体图标资源\" class=\"headerlink\" title=\"处理字体图标资源\"></a>处理字体图标资源</h2><h3 id=\"1-下载字体图标文件\"><a href=\"#1-下载字体图标文件\" class=\"headerlink\" title=\"1. 下载字体图标文件\"></a>1. 下载字体图标文件</h3><ol>\n<li>打开<a href=\"https://www.iconfont.cn/\">阿里巴巴矢量图标库</a></li>\n<li>选择想要的图标添加到购物车，统一下载到本地</li>\n</ol>\n<h3 id=\"2-添加字体图标资源\"><a href=\"#2-添加字体图标资源\" class=\"headerlink\" title=\"2. 添加字体图标资源\"></a>2. 添加字体图标资源</h3><ul>\n<li><p>src/fonts/iconfont.ttf</p>\n</li>\n<li><p>src/fonts/iconfont.woff</p>\n</li>\n<li><p>src/fonts/iconfont.woff2</p>\n</li>\n<li><p>src/css/iconfont.css<br>注意字体文件路径需要修改</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>src/main.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./math&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入资源，Webpack才会对其打包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/iconfont.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./less/index.less&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./sass/index.sass&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./sass/index.scss&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./styl/index.styl&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用字体图标 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont icon-arrow-down&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont icon-ashbin&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont icon-browse&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/static/js/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/js/main.js&quot;</span>, <span class=\"comment\">// 将 js 文件输出到 static/js 目录中</span></span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动将上次打包目录资源清空</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class=\"line\">          <span class=\"comment\">// [hash:8]: hash值取8位</span></span><br><span class=\"line\">          <span class=\"comment\">// [ext]: 使用之前的文件扩展名</span></span><br><span class=\"line\">          <span class=\"comment\">// [query]: 添加之前的query参数</span></span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(ttf|woff2?)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset/resource&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>type: &quot;asset/resource&quot;</code>和<code>type: &quot;asset&quot;</code>的区别： 1.<code> type: &quot;asset/resource&quot;</code> 相当于 file-loader, 将文件转化成 Webpack 能识别的资源，其他不做处理 2.<code>type: &quot;asset&quot;</code> 相当于 url-loader, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式</p>\n<h3 id=\"4-运行指令\"><a href=\"#4-运行指令\" class=\"headerlink\" title=\"4.运行指令\"></a>4.运行指令</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h2 id=\"处理其他资源\"><a href=\"#处理其他资源\" class=\"headerlink\" title=\"处理其他资源\"></a>处理其他资源</h2><p>开发中可能还存在一些其他资源，如音视频等，我们也一起处理了</p>\n<h3 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1.配置\"></a>1.配置</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">path</span> <span class=\"operator\">=</span> require(<span class=\"string\">&quot;path&quot;</span>)<span class=\"punctuation\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.<span class=\"attr\">exports</span> <span class=\"operator\">=</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">  entry:</span> <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\"><span class=\"symbol\">  output:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">    path:</span> path.resolve(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\"><span class=\"symbol\">    filename:</span> <span class=\"string\">&quot;static/js/main.js&quot;</span>, <span class=\"comment\">// 将 js 文件输出到 static/js 目录中</span></span><br><span class=\"line\"><span class=\"symbol\">    clean:</span> true, <span class=\"comment\">// 自动将上次打包目录资源清空</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\"><span class=\"symbol\">  module:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">    rules:</span> [</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.css$/,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\"><span class=\"symbol\">        use:</span> [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.less$/,</span><br><span class=\"line\"><span class=\"symbol\">        use:</span> [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.s[ac]ss$/,</span><br><span class=\"line\"><span class=\"symbol\">        use:</span> [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.styl$/,</span><br><span class=\"line\"><span class=\"symbol\">        use:</span> [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.(png|jpe?g|gif|webp)$/,</span><br><span class=\"line\"><span class=\"symbol\">        type:</span> <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\"><span class=\"symbol\">        parser:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">          dataUrlCondition:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">            maxSize:</span> <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\"><span class=\"symbol\">        generator:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class=\"line\">          <span class=\"comment\">// [hash:8]: hash值取8位</span></span><br><span class=\"line\">          <span class=\"comment\">// [ext]: 使用之前的文件扩展名</span></span><br><span class=\"line\">          <span class=\"comment\">// [query]: 添加之前的query参数</span></span><br><span class=\"line\"><span class=\"symbol\">          filename:</span> <span class=\"string\">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.(ttf|woff2?|map4|map3|avi)$/,</span><br><span class=\"line\"><span class=\"symbol\">        type:</span> <span class=\"string\">&quot;asset/resource&quot;</span>,</span><br><span class=\"line\"><span class=\"symbol\">        generator:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">          filename:</span> <span class=\"string\">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\"><span class=\"symbol\">  plugins:</span> [],</span><br><span class=\"line\"><span class=\"symbol\">  mode:</span> <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\"><span class=\"punctuation\">&#125;;</span></span><br></pre></td></tr></table></figure>\n<p>就是在处理字体图标资源基础上增加其他文件类型，统一处理即可</p>\n<h3 id=\"2-运行指令\"><a href=\"#2-运行指令\" class=\"headerlink\" title=\"2.运行指令\"></a>2.运行指令</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":18701,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"为什么需要打包工具？\"><a href=\"#为什么需要打包工具？\" class=\"headerlink\" title=\"为什么需要打包工具？\"></a>为什么需要打包工具？</h3><p>日常开发中，我们会使用框架（React、Vue），ES6 模块化语法，Less/Sass 等 css 预处理器等语法进行开发。</p>\n<p>这些代码要想在浏览器运行必须经过编译成浏览器能识别的 JS、Css 等语法，才能运行。</p>\n<p>所以我们需要打包工具帮我们做完这些事。</p>\n<p>除此之外，打包工具还能压缩代码、做兼容性处理、提升代码性能等。</p>\n<h3 id=\"有哪些打包工具？\"><a href=\"#有哪些打包工具？\" class=\"headerlink\" title=\"有哪些打包工具？\"></a>有哪些打包工具？</h3><ul>\n<li>Grunt</li>\n<li>Gulp</li>\n<li>Parcel</li>\n<li>Webpack</li>\n<li>Rollup</li>\n<li>Vite</li>\n<li>…</li>\n</ul>\n<p>目前市面上最流行的打包工具是 Webpack</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p><strong>Webpack 是一个静态资源打包工具。</strong><br>它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。</p>\n<p>输出的文件就是编译好的文件，就可以在浏览器段运行了。</p>\n<p>我们将 Webpack 输出的文件叫做 bundle。</p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>Webpack 本身功能是有限的:</p>\n<ul>\n<li>开发模式：仅能编译 JS 中的 ES Module 语法</li>\n<li>生产模式：能编译 JS 中的 ES Module 语法，还能压缩 JS 代码</li>\n</ul>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><h4 id=\"1-资源目录\"><a href=\"#1-资源目录\" class=\"headerlink\" title=\"1. 资源目录\"></a>1. 资源目录</h4><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack_code <span class=\"comment\"># 项目根目录（所有指令必须在这个目录运行）</span></span><br><span class=\"line\">    └── src <span class=\"comment\"># 项目源码目录</span></span><br><span class=\"line\">        ├── <span class=\"keyword\">js </span><span class=\"comment\"># js文件目录</span></span><br><span class=\"line\">        │   ├── <span class=\"built_in\">count</span>.<span class=\"keyword\">js</span></span><br><span class=\"line\"><span class=\"keyword\"></span>        │   └── sum.<span class=\"keyword\">js</span></span><br><span class=\"line\"><span class=\"keyword\"></span>        └── main.<span class=\"keyword\">js </span><span class=\"comment\"># 项目主文件</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建文件\"><a href=\"#2-创建文件\" class=\"headerlink\" title=\"2.创建文件\"></a>2.创建文件</h4><ul>\n<li>count.js</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default <span class=\"keyword\">function</span> <span class=\"title\">count</span>(x, y) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">x</span> - y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>sum.js</li>\n</ul>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args.reduce((p, c) =&gt; p + c, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main.js</li>\n</ul>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import <span class=\"built_in\">count</span> from <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\">import <span class=\"built_in\">sum</span> from <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"built_in\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-下载依赖\"><a href=\"#3-下载依赖\" class=\"headerlink\" title=\"3.下载依赖\"></a>3.下载依赖</h4><p>打开终端，在项目根目录。运行以下指令：</p>\n<ul>\n<li>初始化 package.json</li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> init -y</span><br></pre></td></tr></table></figure>\n\n<p>此时会生成一个基础的 package.json 文件。<br><strong>需要注意的是 package.json 中 name 字段不能叫做 webpack, 否则下一步会报错</strong></p>\n<ul>\n<li>下载依赖</li>\n</ul>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-<span class=\"keyword\">cli</span> -D</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-启用-Webpack\"><a href=\"#4-启用-Webpack\" class=\"headerlink\" title=\"4. 启用 Webpack\"></a>4. 启用 Webpack</h4><ul>\n<li>开发模式</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack .<span class=\"regexp\">/src/m</span>ain.js --mode=development</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生产模式</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack .<span class=\"regexp\">/src/m</span>ain.js --mode=production</span><br></pre></td></tr></table></figure>\n\n<p><code>npx webpack</code>: 是用来运行本地安装 Webpack 包的。<br><code>./src/main.js</code>: 指定 Webpack 从 main.js 文件开始打包，不但会打包 main.js，还会将其依赖也一起打包进来。<br><code>--mode=xxx</code>：指定模式（环境）。</p>\n<h4 id=\"5-观察输出文件\"><a href=\"#5-观察输出文件\" class=\"headerlink\" title=\"5. 观察输出文件\"></a>5. 观察输出文件</h4><p>默认 <code>Webpack</code> 会将文件打包输出到 <code>dist</code> 目录下，我们查看 <code>dist</code> 目录下文件情况就好了</p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"5-大核心概念\"><a href=\"#5-大核心概念\" class=\"headerlink\" title=\"5 大核心概念\"></a>5 大核心概念</h3><ul>\n<li><strong>entry（入口）</strong> :指示 Webpack 从哪个文件开始打包</li>\n<li><strong>output（输出）</strong>:指示 Webpack 打包完的文件输出到哪里去，如何命名等</li>\n<li><strong>loader（加载器）</strong>:webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析</li>\n<li><strong>plugins（插件）</strong>:扩展 Webpack 的功能</li>\n<li><strong>mode（模式）</strong><br>主要有两种模式：<ul>\n<li>开发模式：development</li>\n<li>生产模式：production</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建-Webpack-配置文件\"><a href=\"#创建-Webpack-配置文件\" class=\"headerlink\" title=\"创建 Webpack 配置文件\"></a>创建 Webpack 配置文件</h3><p>在项目根目录下新建文件：webpack.config.js</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.<span class=\"attr\">exports</span> <span class=\"operator\">=</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 入口</span></span><br><span class=\"line\"><span class=\"symbol\">  entry:</span> <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"symbol\">  output:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 加载器</span></span><br><span class=\"line\"><span class=\"symbol\">  module:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">    rules:</span> [],</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\"><span class=\"symbol\">  plugins:</span> [],</span><br><span class=\"line\">  <span class=\"comment\">// 模式</span></span><br><span class=\"line\"><span class=\"symbol\">  mode:</span> <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\"><span class=\"punctuation\">&#125;;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Webpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范</p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><ol>\n<li>配置文件</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Node.js的核心模块，专门用来处理文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口</span></span><br><span class=\"line\">  <span class=\"comment\">// 相对路径和绝对路径都行</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// path: 文件输出目录，必须是绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// path.resolve()方法返回一个绝对路径</span></span><br><span class=\"line\">    <span class=\"comment\">// __dirname 当前文件的文件夹绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"comment\">// filename: 输出文件名</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 加载器</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"comment\">// 模式</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>此时功能和之前一样，也不能处理样式资源</p>\n<h2 id=\"开发模式介绍\"><a href=\"#开发模式介绍\" class=\"headerlink\" title=\"开发模式介绍\"></a>开发模式介绍</h2><p>开发模式顾名思义就是我们开发代码时使用的模式。<br>这个模式下我们主要做两件事：</p>\n<ol>\n<li>编译代码，使浏览器能识别运行<br>开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源</li>\n<li>代码质量检查，树立代码规范<br>提前检查代码的一些隐患，让代码运行时能更加健壮。<br>提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。</li>\n</ol>\n<h2 id=\"处理样式资源\"><a href=\"#处理样式资源\" class=\"headerlink\" title=\"处理样式资源\"></a>处理样式资源</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源</p>\n<p>我们找 Loader 都应该去官方文档中找到对应的 Loader，然后使用</p>\n<p>官方文档找不到的话，可以从社区 Github 中搜索查询</p>\n<p><a href=\"https://webpack.docschina.org/loaders/\">Webpack 官方 Loader 文档</a></p>\n<h3 id=\"处理-Css-资源\"><a href=\"#处理-Css-资源\" class=\"headerlink\" title=\"处理 Css 资源\"></a>处理 Css 资源</h3><ol>\n<li>下载包</li>\n</ol>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> i css-loader style-loader -D</span><br></pre></td></tr></table></figure>\n\n<p>注意：需要下载两个 loader 2. 功能介绍</p>\n<ul>\n<li><code>css-loader</code>: 负责将 Css 文件编译成 Webpack 能识别的模块</li>\n<li><code>style-loader</code>: 会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容<br>此时样式就会以 Style 标签的形式在页面上生效</li>\n</ul>\n<ol start=\"3\">\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>添加 Css 资源</li>\n</ol>\n<figure class=\"highlight css\"><figcaption><span>src/css/index.css</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>src/main.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入 Css 资源，Webpack才会对其打包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 准备一个使用样式的 DOM 容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入打包后的js文件，才能看到效果 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h3 id=\"处理-Less-资源\"><a href=\"#处理-Less-资源\" class=\"headerlink\" title=\"处理 Less 资源\"></a>处理 Less 资源</h3><ol>\n<li>下载包</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"keyword\">less</span>-loader -D</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>功能介绍</li>\n</ol>\n<ul>\n<li><code>less-loader</code>: 负责将 Less 文件编译成 Css 文件</li>\n</ul>\n<ol start=\"3\">\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>添加 Less 资源</li>\n</ol>\n<figure class=\"highlight less\"><figcaption><span>src/less/index.less</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: deeppink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>src/main.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入资源，Webpack才会对其打包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./less/index.less&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h3 id=\"处理-Sass-和-Scss-资源\"><a href=\"#处理-Sass-和-Scss-资源\" class=\"headerlink\" title=\"处理 Sass 和 Scss 资源\"></a>处理 Sass 和 Scss 资源</h3><ol>\n<li>下载包</li>\n</ol>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> i sass-loader sass -D</span><br></pre></td></tr></table></figure>\n\n<p>注意：需要下载两个</p>\n<ol start=\"2\">\n<li>功能介绍</li>\n</ol>\n<ul>\n<li><strong>sass-loader</strong>: 负责将 <strong>Sass</strong> 文件编译成 <strong>css</strong> 文件</li>\n<li><strong>sass</strong>: <strong>sass-loader</strong> 依赖 <strong>sass</strong> 进行编译</li>\n</ul>\n<ol start=\"3\">\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>添加 Sass 资源</li>\n</ol>\n<figure class=\"highlight css\"><figcaption><span>src/sass/index.sass</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 可以省略大括号和分号 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.box3</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span></span><br><span class=\"line\">  height: <span class=\"number\">100px</span></span><br><span class=\"line\">  background-color: hotpink</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><figcaption><span>src/sass/index.scss</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightpink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h3 id=\"处理-Styl-资源\"><a href=\"#处理-Styl-资源\" class=\"headerlink\" title=\"处理 Styl 资源\"></a>处理 Styl 资源</h3><ol>\n<li>下载包</li>\n</ol>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> i stylus-loader -D</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>功能介绍</li>\n</ol>\n<ul>\n<li><strong>stylus-loader</strong>: 负责将 <strong>Styl</strong> 文件编译成 <strong>Css</strong> 文件</li>\n</ul>\n<ol start=\"3\">\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>添加 Styl 资源</li>\n</ol>\n<figure class=\"highlight plaintext\"><figcaption><span>src/styl/index.styl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 可以省略大括号、分号、冒号 */</span><br><span class=\"line\">.box</span><br><span class=\"line\">  width 100px</span><br><span class=\"line\">  height 100px</span><br><span class=\"line\">  background-color pink</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>src/main.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./math&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入资源，Webpack才会对其打包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./less/index.less&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./sass/index.sass&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./sass/index.scss&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./styl/index.styl&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 准备一个使用样式的 DOM 容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h2 id=\"处理图片资源\"><a href=\"#处理图片资源\" class=\"headerlink\" title=\"处理图片资源\"></a>处理图片资源</h2><p>过去在 Webpack4 时，我们处理图片资源通过 file-loader 和 url-loader 进行处理<br>现在 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源</p>\n<ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>添加图片资源</li>\n</ol>\n<ul>\n<li>src/images/1.jpeg</li>\n<li>src/images/2.png</li>\n<li>src/images/3.gif</li>\n</ul>\n<ol start=\"3\">\n<li>使用图片资源</li>\n</ol>\n<figure class=\"highlight less\"><figcaption><span>src/less/index.less</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: url(<span class=\"string\">&quot;../images/1.jpeg&quot;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>src/sass/index.sass</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box3</span><br><span class=\"line\">  width: 100px</span><br><span class=\"line\">  height: 100px</span><br><span class=\"line\">  background-image: url(&quot;../images/2.png&quot;)</span><br><span class=\"line\">  background-size: cover</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight styl\"><figcaption><span>src/styl/index.styl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box5</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span> <span class=\"number\">100px</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span> <span class=\"number\">100px</span></span><br><span class=\"line\">  <span class=\"attribute\">background-image</span> url(<span class=\"string\">&quot;../images/3.gif&quot;</span>)</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span> cover</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<ol start=\"5\">\n<li>输出资源情况<br>此时如果查看 dist 目录的话，会发现多了三张图片资源<br>因为 Webpack 会将所有打包好的资源输出到 dist 目录下</li>\n</ol>\n<ul>\n<li>为什么样式资源没有呢？<br>因为经过 style-loader 的处理，样式资源打包到 main.js 里面去了，所以没有额外输出出来</li>\n</ul>\n<ol start=\"6\">\n<li>对图片资源进行优化<br>将小于某个大小的图片转化成 data URI 形式（Base64 格式）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;main.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点：减少请求数量</li>\n<li>缺点：体积变得更大</li>\n</ul>\n<h2 id=\"修改输出资源的名称和路径\"><a href=\"#修改输出资源的名称和路径\" class=\"headerlink\" title=\"修改输出资源的名称和路径\"></a>修改输出资源的名称和路径</h2><ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/js/main.js&quot;</span>, <span class=\"comment\">// 将 js 文件输出到 static/js 目录中</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class=\"line\">          <span class=\"comment\">// [hash:8]: hash值取8位</span></span><br><span class=\"line\">          <span class=\"comment\">// [ext]: 使用之前的文件扩展名</span></span><br><span class=\"line\">          <span class=\"comment\">// [query]: 添加之前的query参数</span></span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改 index.html</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 修改 js 资源路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/static/js/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>此时输出文件目录：（注意：需要将上次打包生成的文件清空，再重新打包才有效果）</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── <span class=\"keyword\">dist</span></span><br><span class=\"line\"><span class=\"keyword\"></span>    └── static</span><br><span class=\"line\">         ├── imgs</span><br><span class=\"line\">         │    └── <span class=\"number\">7003350</span>e.png</span><br><span class=\"line\">         └── <span class=\"keyword\">js</span></span><br><span class=\"line\"><span class=\"keyword\"></span>              └── main.<span class=\"keyword\">js</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动清空上次打包资源\"><a href=\"#自动清空上次打包资源\" class=\"headerlink\" title=\"自动清空上次打包资源\"></a>自动清空上次打包资源</h2><ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/js/main.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动将上次打包目录资源清空</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行指令</li>\n</ol>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>观察 dist 目录资源情况</p>\n<h2 id=\"处理字体图标资源\"><a href=\"#处理字体图标资源\" class=\"headerlink\" title=\"处理字体图标资源\"></a>处理字体图标资源</h2><h3 id=\"1-下载字体图标文件\"><a href=\"#1-下载字体图标文件\" class=\"headerlink\" title=\"1. 下载字体图标文件\"></a>1. 下载字体图标文件</h3><ol>\n<li>打开<a href=\"https://www.iconfont.cn/\">阿里巴巴矢量图标库</a></li>\n<li>选择想要的图标添加到购物车，统一下载到本地</li>\n</ol>\n<h3 id=\"2-添加字体图标资源\"><a href=\"#2-添加字体图标资源\" class=\"headerlink\" title=\"2. 添加字体图标资源\"></a>2. 添加字体图标资源</h3><ul>\n<li><p>src/fonts/iconfont.ttf</p>\n</li>\n<li><p>src/fonts/iconfont.woff</p>\n</li>\n<li><p>src/fonts/iconfont.woff2</p>\n</li>\n<li><p>src/css/iconfont.css<br>注意字体文件路径需要修改</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>src/main.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./math&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> count <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/count&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">&quot;./js/sum&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入资源，Webpack才会对其打包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/iconfont.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./css/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./less/index.less&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./sass/index.sass&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./sass/index.scss&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./styl/index.styl&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">count</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>public/index.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>webpack5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Webpack5<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box4&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box5&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用字体图标 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont icon-arrow-down&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont icon-ashbin&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iconfont icon-browse&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../dist/static/js/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/js/main.js&quot;</span>, <span class=\"comment\">// 将 js 文件输出到 static/js 目录中</span></span><br><span class=\"line\">    <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动将上次打包目录资源清空</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class=\"line\">          <span class=\"comment\">// [hash:8]: hash值取8位</span></span><br><span class=\"line\">          <span class=\"comment\">// [ext]: 使用之前的文件扩展名</span></span><br><span class=\"line\">          <span class=\"comment\">// [query]: 添加之前的query参数</span></span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(ttf|woff2?)$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;asset/resource&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">filename</span>: <span class=\"string\">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>type: &quot;asset/resource&quot;</code>和<code>type: &quot;asset&quot;</code>的区别： 1.<code> type: &quot;asset/resource&quot;</code> 相当于 file-loader, 将文件转化成 Webpack 能识别的资源，其他不做处理 2.<code>type: &quot;asset&quot;</code> 相当于 url-loader, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式</p>\n<h3 id=\"4-运行指令\"><a href=\"#4-运行指令\" class=\"headerlink\" title=\"4.运行指令\"></a>4.运行指令</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>\n\n<p>打开 index.html 页面查看效果</p>\n<h2 id=\"处理其他资源\"><a href=\"#处理其他资源\" class=\"headerlink\" title=\"处理其他资源\"></a>处理其他资源</h2><p>开发中可能还存在一些其他资源，如音视频等，我们也一起处理了</p>\n<h3 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1.配置\"></a>1.配置</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"attr\">path</span> <span class=\"operator\">=</span> require(<span class=\"string\">&quot;path&quot;</span>)<span class=\"punctuation\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">module.<span class=\"attr\">exports</span> <span class=\"operator\">=</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">  entry:</span> <span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\"><span class=\"symbol\">  output:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">    path:</span> path.resolve(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\"><span class=\"symbol\">    filename:</span> <span class=\"string\">&quot;static/js/main.js&quot;</span>, <span class=\"comment\">// 将 js 文件输出到 static/js 目录中</span></span><br><span class=\"line\"><span class=\"symbol\">    clean:</span> true, <span class=\"comment\">// 自动将上次打包目录资源清空</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\"><span class=\"symbol\">  module:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">    rules:</span> [</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// 用来匹配 .css 结尾的文件</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.css$/,</span><br><span class=\"line\">        <span class=\"comment\">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class=\"line\"><span class=\"symbol\">        use:</span> [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>],</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.less$/,</span><br><span class=\"line\"><span class=\"symbol\">        use:</span> [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;less-loader&quot;</span>],</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.s[ac]ss$/,</span><br><span class=\"line\"><span class=\"symbol\">        use:</span> [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.styl$/,</span><br><span class=\"line\"><span class=\"symbol\">        use:</span> [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;stylus-loader&quot;</span>],</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.(png|jpe?g|gif|webp)$/,</span><br><span class=\"line\"><span class=\"symbol\">        type:</span> <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\"><span class=\"symbol\">        parser:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">          dataUrlCondition:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">            maxSize:</span> <span class=\"number\">10</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 小于10kb的图片会被base64处理</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\"><span class=\"symbol\">        generator:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class=\"line\">          <span class=\"comment\">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class=\"line\">          <span class=\"comment\">// [hash:8]: hash值取8位</span></span><br><span class=\"line\">          <span class=\"comment\">// [ext]: 使用之前的文件扩展名</span></span><br><span class=\"line\">          <span class=\"comment\">// [query]: 添加之前的query参数</span></span><br><span class=\"line\"><span class=\"symbol\">          filename:</span> <span class=\"string\">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">        test:</span> /\\.(ttf|woff2?|map4|map3|avi)$/,</span><br><span class=\"line\"><span class=\"symbol\">        type:</span> <span class=\"string\">&quot;asset/resource&quot;</span>,</span><br><span class=\"line\"><span class=\"symbol\">        generator:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"symbol\">          filename:</span> <span class=\"string\">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span>,</span><br><span class=\"line\"><span class=\"symbol\">  plugins:</span> [],</span><br><span class=\"line\"><span class=\"symbol\">  mode:</span> <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\"><span class=\"punctuation\">&#125;;</span></span><br></pre></td></tr></table></figure>\n<p>就是在处理字体图标资源基础上增加其他文件类型，统一处理即可</p>\n<h3 id=\"2-运行指令\"><a href=\"#2-运行指令\" class=\"headerlink\" title=\"2.运行指令\"></a>2.运行指令</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npx webpack</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl68qk8wc00016qjcbyyy8jxp","category_id":"cl68qk8wf00046qjc0lq6cd7d","_id":"cl68qk8wi000c6qjc9askhq7y"},{"post_id":"cl68qk8we00036qjc4rmaad2g","category_id":"cl68qk8wh00096qjc8g0y8h9x","_id":"cl68qk8wi000g6qjcfoyb8jsn"},{"post_id":"cl68qk8wh00076qjc1cc4brvf","category_id":"cl68qk8wi000h6qjc2f9zespw","_id":"cl68qk8wj000o6qjc9agj5sak"},{"post_id":"cl68qk8wh00086qjcccjlgnno","category_id":"cl68qk8wi000h6qjc2f9zespw","_id":"cl68qk8wj000q6qjc4yvw4sm6"},{"post_id":"cl68qk8wg00066qjcgl77134l","category_id":"cl68qk8wi000d6qjch5mp40b8","_id":"cl68qk8wj000r6qjc5oehdgdf"},{"post_id":"cl68qk8wg00066qjcgl77134l","category_id":"cl68qk8wj000n6qjcgirfakke","_id":"cl68qk8wj000s6qjc8k60be6c"}],"PostTag":[{"post_id":"cl68qk8wc00016qjcbyyy8jxp","tag_id":"cl68qk8wg00056qjcarua9qkr","_id":"cl68qk8wi000b6qjcedaea7q0"},{"post_id":"cl68qk8we00036qjc4rmaad2g","tag_id":"cl68qk8wi000a6qjc5n15drar","_id":"cl68qk8wi000f6qjc94v81dfp"},{"post_id":"cl68qk8wg00066qjcgl77134l","tag_id":"cl68qk8wi000e6qjc933udyvf","_id":"cl68qk8wi000j6qjc45qt8t0n"},{"post_id":"cl68qk8wh00076qjc1cc4brvf","tag_id":"cl68qk8wi000i6qjcf0lj5j84","_id":"cl68qk8wj000m6qjc3thsej83"},{"post_id":"cl68qk8wh00086qjcccjlgnno","tag_id":"cl68qk8wj000l6qjcc28pga4m","_id":"cl68qk8wj000p6qjc1y3oamhm"}],"Tag":[{"name":"Git","_id":"cl68qk8wg00056qjcarua9qkr"},{"name":"leetcode","_id":"cl68qk8wi000a6qjc5n15drar"},{"name":"react","_id":"cl68qk8wi000e6qjc933udyvf"},{"name":"vscode","_id":"cl68qk8wi000i6qjcf0lj5j84"},{"name":"webpack5","_id":"cl68qk8wj000l6qjcc28pga4m"}]}}